(function () {
  'use strict';

  angular
    .module('daisy', [
      'ui.router',
      'ngAnimate',
      'ngCookies',
      'daisy.config',
      'daisy.routes',
      'daisy.controllers',
      'daisy.services',
      'daisy.directives',
      'daisy.stores',
      'angular.filter',
      'ngLodash',
      'ngHandsontable',
      'ui.bootstrap',
      'ui.bootstrap.datepickerPopup',
      'ui.bootstrap-slider',
      'ui.bootstrap.tabs',
      'ui.bootstrap.accordion',
      'localytics.directives',
      'pascalprecht.translate',
      'tmh.dynamicLocale',
      'ngFileUpload',
      'puElasticInput'
    ]);

  angular
    .module('daisy.config', ['flux', 'pascalprecht.translate', 'tmh.dynamicLocale']);

  angular
    .module('daisy.routes', ['ngRoute']);

  angular
    .module('daisy.controllers', []);

  angular
    .module('daisy.services', ['flux']);

  angular
    .module('daisy.directives', []);

  angular
    .module('daisy.stores', ['flux']);

  angular
    .module('daisy')
    .run(run);

  run.$inject = [
    '$rootScope',
    '$location',
    '$cookies',
    '$http',
    '$state',
    'AuthenticationService',
    'ApiService'];

  /**
  * @name run
  * @desc Update xsrf $http headers to align with Django's defaults
  */
  function run(
    $rootScope,
    $location,
    $cookies,
    $http,
    $state,
    AuthenticationService,
    ApiService) {

    // 브라우져 로딩속도 측정
    window.onload = function(){
      setTimeout(function(){
        var t = performance.timing;
        // console.log('브라우져 로딩속도: ' + (t.loadEventEnd - t.responseEnd));
        $rootScope.sampleDataLimitByOnload = t.loadEventEnd - t.responseEnd;
      }, 0);
    }

    $http.defaults.xsrfHeaderName = 'X-CSRFToken';
    $http.defaults.xsrfCookieName = 'csrftoken';
    $rootScope.globals = $cookies.getObject('globals') || {};

    if ($rootScope.globals.currentUser) {
      $http.defaults.headers.common['Authorization'] = $rootScope.globals.currentUser.authToken;
    }

    $rootScope.$on('$stateChangeStart', stateChangeStart);
    $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);

    function stateChangeStart(event, toState, toParams, fromState, fromParams) {
      if (toState.authenticate && !$rootScope.globals.currentUser) {
          event.preventDefault();
          AuthenticationService.LoginPopup(function(response) {
            if(response.success) {
              return $state.go(toState, toParams);
            } else {
              // 로그인 실패 또는 취소
              console.log(response.message);
              return;
            }
          });
      }
    }

    function stateChangeSuccess(event, toState, toParams, fromState, fromParams) {
      if (angular.isDefined(toState.data.bodyClasses)) {
        $rootScope.bodyClasses = toState.data.bodyClasses;
      } else {
        $rootScope.bodyClasses = '';
      }
    }

    // 시각화 타입 등록
    $rootScope.vizTypes = [];
    ApiService.Visualize.getTypes().then(function(types){
      $rootScope.vizTypes = types;
      registerTypes();
    });


    function registerTypes() {
      [{
        name: '선',
        alias: 'line',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.date, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.date, count: { gt: 1 }, weight: 0.5 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 1 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.date },
            { key: 'categories', isArray: true, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '비교-선',
        alias: 'line-diff',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.date, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 0 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.date },
            { key: 'comparison', isArray: true, type: NJ.Vtr.constants.types.numeric },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '영역',
        alias: 'area',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.date, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 0 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.date },
            { key: 'categories', isArray: true, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '막대',
        alias: 'bar',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.string, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.string, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.string, count: { gt: 1 }, weight: 0.5 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 1 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.string },
            { key: 'categories', isArray: true, type: NJ.Vtr.constants.types.numeric }
            // { key: 'dimensions', isArray: false, type: NJ.Vtr.constants.types.string },
            // { key: 'categories', isArray: true, type: NJ.Vtr.constants.types.numeric },
            // { key: 'direction', isArray: false, value: 'vertical' }
          ]
        }
      },

      {
        name: '평행 좌표',
        alias: 'parallel-coords',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 2 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 2 }, weight: 1 }
          ]
        },
        outputs: {
          header: [
            { key: 'group', isArray: false, type: NJ.Vtr.constants.types.string },
            { key: 'traits', isArray: true, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '패러럴 태그클라우드',
        alias: 'parallel-tag-cloud',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.categorical, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.string, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.string, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.string, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'group', isArray: false, type: NJ.Vtr.constants.types.categorical },
            { key: 'key', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'size', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '파이',
        alias: 'pie',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.string, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.string, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.string, count: { gt: 1 }, weight: 0.5 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, weight: 0.25 }
          ]
        },
        outputs: {
          header: [
            { key: 'variable', isArray: false, type: NJ.Vtr.constants.types.string },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '서울 지도',
        alias: 'choropleth-seoul',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.stringAddress, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.stringAddress, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.stringAddress, count: { gt: 1 }, weight: 0.75 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, weight: 0.5 }
          ]
        },
        outputs: {
          header: [
            { key: 'region', isArray: false, type: NJ.Vtr.constants.types.stringAddress },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '버블 차트',
        alias: 'bubble',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.stringAddress, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.stringAddress, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.stringAddress, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, weight: 0 }
          ],
          hierarchy: [
            { count: { lt: 1 }, weight: 0 },
            { count: { eq: 1 }, weight: 0 },
            { count: { gt: 1 }, weight: 0 }
          ],
        },
        outputs: {
          header: [
            { key: 'key', isArray: true, hierarchy: true },
            { key: 'key', isArray: true, type: NJ.Vtr.constants.types.stringAddress },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '트리맵',
        alias: 'treemap',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.string, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.string, count: { eq: 1 }, weight: 0.5 },
            { type: NJ.Vtr.constants.types.string, count: { gt: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, wei: 0.5 }
          ]
        },
        outputs: {
          header: [
            // { key: 'key', isArray: true, hierarchy: true },
            { key: 'key', isArray: true, type: NJ.Vtr.constants.types.string },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '원형 트리',
        alias: 'tree-circular',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 0 }
          ],
          hierarchy: [
            { count: { eq: 1 }, weight: 0 },
            { count: { eq: 0 }, weight: 0 },
            { count: { gt: 1 }, weight: 0 }
          ],
        },
        outputs: {
          header: [
            { key: 'key', isArray: true, hierarchy: true },
            { key: 'key', isArray: true, type: NJ.Vtr.constants.types.stringAddress },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '위계 막대',
        alias: 'bar-hierarchy',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 0 }
          ],
          hierarchy: [
            { count: { eq: 1 }, weight: 0 },
            { count: { eq: 0 }, weight: 0 },
            { count: { gt: 1 }, weight: 0 }
          ],
        },
        outputs: {
          header: [
            { key: 'key', isArray: true, hierarchy: true },
            { key: 'key', isArray: true, type: NJ.Vtr.constants.types.stringAddress },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '스몰 멀티플즈',
        alias: 'small-multiples',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.categorical, count: { eq: 0 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 0 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 1 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.date },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'group', isArray: false, type: NJ.Vtr.constants.types.categorical }
          ]
        }
      },

      {
        name: '캘린더',
        alias: 'calendar',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.date, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.date, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'term', isArray: false, type: NJ.Vtr.constants.types.date }
          ]
        }
      },

      {
        name: '히트맵',
        alias: 'heatmap',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 3 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 3 }, weight: 0 }
          ]
        },
        outputs: {
          header:[
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'y', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '선버스트',
        alias: 'sunburst',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, weight: 0 }
          ],
          hierarchy: [
            { count: { eq: 1 }, weight: 0 },
            { count: { eq: 0 }, weight: 0 },
            { count: { gt: 1 }, weight: 0 }
          ],
        },
        outputs: {
          header: [
            { key: 'key', isArray: true, hierarchy: true },
            { key: 'value', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '헥사고널 비닝',
        alias: 'hexagonal-binning',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 2 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 2 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'y', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '산점도 행렬',
        alias: 'scatterplot-matrix',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.categorical, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 2 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 2 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'group', isArray: false, type: NJ.Vtr.constants.types.categorical },
            { key: 'traits', isArray: true, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '산점도',
        alias: 'scatterplot',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 2 }, weight: -1 },
            { type: NJ.Vtr.constants.types.numeric, count: { gte: 2 }, weight: 1 }
          ]
        },
        outputs: {
          header: [
            { key: 'group', isArray: false, type: NJ.Vtr.constants.types.string },
            { key: 'x', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'y', isArray: false, type: NJ.Vtr.constants.types.numeric },
            { key: 'radius', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      },

      {
        name: '패러럴 세트',
        alias: 'parallel-sets',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.categorical, count: { lt: 2 }, weight: 0 },
            { type: NJ.Vtr.constants.types.categorical, count: { gte: 2 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'dimensions', isArray: true, type: NJ.Vtr.constants.types.categorical },
          ]
        }
      },

      {
        name: '워드클라우드',
        alias: 'wordcloud',
        inputs: {
          types: [
            { type: NJ.Vtr.constants.types.string, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.string, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.string, count: { gt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { lt: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { eq: 1 }, weight: 0 },
            { type: NJ.Vtr.constants.types.numeric, count: { gt: 1 }, weight: 0 }
          ]
        },
        outputs: {
          header: [
            { key: 'key', isArray: false, type: NJ.Vtr.constants.types.string },
            { key: 'size', isArray: false, type: NJ.Vtr.constants.types.numeric }
          ]
        }
      }].forEach(function (meta) {
        NJ.Vtr.Match.register(meta);
      });
    }
  }

})();

(function (window) {
  'use strict';

  angular
    .module('daisy.config')
    .config(config);

  config.$inject = [
    '$locationProvider',
    '$httpProvider',
    'fluxProvider',
    '$translateProvider',
    'LOCALES',
    'tmhDynamicLocaleProvider'];

  /**
   * @name config
   * @desc Enable HTML5 routing
   */
  function config(
    $locationProvider,
    $httpProvider,
    fluxProvider,
    $translateProvider,
    LOCALES,
    tmhDynamicLocaleProvider) {

    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix('!');
    $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
    $httpProvider.defaults.headers.post['Content-Type'] = 'application/json';
    $httpProvider.defaults.headers.common['Accept'] = 'application/json';

    // Flux 설정
    // @setImmutableDefaults : true - flux 설정을 외부에서 변경 못하도록 막는다.
    // @autoInjectStores : true - 모든 스토어를 자동 Inject 시키기.
    fluxProvider.setImmutableDefaults({ immutable: false });
    fluxProvider.autoInjectStores(true);

    // 언어 설정
    $translateProvider.useStaticFilesLoader({
      prefix: 'static/locales/locale-',
      suffix: '.json'
    });
    $translateProvider.useSanitizeValueStrategy(null);
    $translateProvider.preferredLanguage(LOCALES.preferredLocale);
    $translateProvider.useLocalStorage();
    tmhDynamicLocaleProvider.localeLocationPattern('bower_components/angular-i18n/angular-locale_{{locale}}.js');
  }

  angular
    .module('daisy.config')

    // 언어
    .constant('LOCALES', {
      'locales': {
        'ko_KR': '한국어'
      },
      'preferredLocale': 'ko_KR'
    })

    // 차트 에디터 액션
    .constant('actions', {
      // Items
      addItem: 'addItem',
      updateItem: 'updateItem',
      updateItemOriginData: 'updateItemOriginData',
      updateItemVisualizeData: 'updateItemVisualizeData',
      updateItemSelectRang: 'updateItemSelectRang',
      updateItemUseVisualized: 'updateItemUseVisualized',
      updateItemFilterOperator: 'updateItemFilterOperator',
      dataStatistics: 'dataStatistics',
      removeStatistics: 'removeStatistics',
      deleteItem: 'deleteItem',
      deleteAllItem: 'deleteAllItem',

      // Columns
      addColumn: 'addColumn',
      selectColumn: 'selectColumn',
      removeColumn: 'removeColumn',
      sortColumn: 'sortColumn',

      // Cells
      addCell: 'addCell',

      // Tables
      saveTable: 'saveTable',

      // Datas
      saveData: 'saveData',

      // Searchdata
      saveSearchData: 'saveSearchData',

      // Localdata
      addLocalData: 'addLocalData',

      // History
      addAllData: 'addAllData',

      // Options
      updateColumn: 'updateColumn',
      updateHeader: 'updateHeader',

      // Filters
      addFilter: 'addFilter',
      removeFilter: 'removeFilter',
      updateItemFilteredData: 'updateItemFilteredData',

      // Project
      setProjectTitle: 'setProjectTitle',
      setProjectDescription: 'setProjectDescription',
      setProjectStatus: 'setProjectStatus',
      setProjectCopyright: 'setProjectCopyright',
      setProjectThumbnail: 'setProjectThumbnail',
      saveProject: 'saveProject'
    })

    // app 설정
    .constant('AppConstants', {
      config: window.appConfig,

      handsontableSettings: {
        autoColumnSize: true,
        colHeaders: true,
        rowHeaders: true,
        manualColumnResize: true,
        minCols: 1,
        minRows: 1,
        contextMenu: ["row_above", "row_below", "---------", "col_left", "col_right", "---------", "remove_row", "remove_col", "---------", "undo", "redo"]
      },

      handsontableReadOnly: {
        autoColumnSize: true,
        colHeaders: true,
        rowHeaders: true,
        renderAllRows: (window.navigator.userAgent.indexOf('MSIE ') > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)),
        manualColumnResize: true,
        minSpareCols: 20,
        minSpareRows: 15,
        stretchH: 'all',
        readOnly: true,
        minCols: 1,
        minRows: 1
      },

      NJColors: [{
        label: '기본 2색상 프리셋',
        colors: NJ.Utils.category2
      }, {
        label: '기본 4색상 프리셋',
        colors: NJ.Utils.category4
      }, {
        label: '기본 8색상 프리셋 A',
        colors: NJ.Utils.category8a
      }, {
        label: '기본 8색상 프리셋 B',
        colors: NJ.Utils.category8b
      }, {
        label: '기본 20색상 프리셋',
        colors: NJ.Utils.category20
      }],

      visualizeAttrs: {
        brush: '브러시',
        categories: '카테고리',
        color: '색상',
        colors: '색상',
        colorPreset: '색상 프리셋',
        colorBegin: '색상범위 시작',
        colorEnd: '색상범위 끝',
        comparison: '비교군',
        dimensions: '차원',
        fontColor: '글자 색상',
        fontFamily: '글꼴',
        fontSize: '글자 크기',
        graph: '그래프 속성',
        group: '그룹',
        groupColor: '그룹 동일색상 사용',
        hexaRadius: '반지름',
        innerInterval: '안쪽 막대 간격',
        innerRadius: '안쪽 반지름',
        label: '라벨',
        lineWidth: '선 굵기',
        key: '그룹 키',
        maxTagSize: '태그 크기 (최대)',
        minTagSize: '태그 크기 (최대)',
        offset: '변위',
        outerInterval: '바깥쪽 막대 간격',
        outerRadius: '바깥쪽 반지름',
        radius: '반지름',
        region: '지역',
        scale: '비율',
        shape: '모양',
        size: '크기',
        tagMargin: '태그 간격',
        term: '기간',
        timeFormat: '시간 형식',
        titleMargin: '제목 간격',
        titleSize: '제목 크기',
        traits: '특성',
        value: '값',
        x: 'X축',
        xAxis: 'X축',
        xLabel: 'X축 라벨',
        y: 'Y축',
        yAxis: 'Y축',
        yLabel: 'Y축 라벨',
      },

      // 차트간 우선순위
      visualizeOrderBy: {
        'bar': 0,
        'line': 1,
        'scatterplot': 2,
        'treemap': 3,
        'bubble': 4,
        'pie': 5,
        'sunburst': 6,
        'parallel-sets': 7,

        // 추후 병합될 챠트
        'line-diff': 8,
        'area': 8,
        'parallel-coords': 8,
        'parallel-tag-cloud': 8,
        'choropleth-seoul': 8,
        // 'treemap': 8,
        'tree-circular': 8,
        'bar-hierarchy': 8,
        'small-multiples': 8,
        'calendar': 8,
        'heatmap': 8,
        // 'sunburst': 8,
        'hexagonal-binning': 8,
        'scatterplot-matrix': 8,
        'swordcloud': 8
      },

      // 컬럼 타입별 우선순위
      columnsOrderBy: {
        'string': 0,
        'numeric': 1,
        'stringAddress': 2,
        'date': 3,
        'categorical': 4,
        'boolean': 5,
        'blank': 6
      },

      sampleDataLimit: 1000
    });



})(window);

(function () {
  'use strict';

  angular
    .module('daisy.routes')
    .config(config);

  config.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];

  /**
  * @name config
  * @desc Define valid application routes
  */
  function config($stateProvider, $urlRouterProvider, $locationProvider) {
    var getUserProfile = ['ApiService', function functionName(ApiService) {
      return ApiService.AuthData.me();
    }];

    $urlRouterProvider.otherwise('/');
    $stateProvider
    .state('/', {
      url: "/",
      controller: 'ProjectListController',
      controllerAs: 'vm',
      data: { bodyClasses: ''},
      templateUrl: 'static/templates/views/main.html'
    })

    .state('project-list', {
      url: "/projects/:page",
      controller: 'ProjectListController',
      controllerAs: 'vm',
      data: { bodyClasses: ''},
      templateUrl: 'static/templates/views/main.html'
    })

    .state('search', {
      url: "/search/:keyword",
      controller: 'SearchController',
      controllerAs: 'vm',
      data: {
        bodyClasses: 'grayBackground'
      },
      params: {
        backProject: false,
        editProjectId: ''
      },
      templateUrl: 'static/templates/views/search/search-list.html'
    })

    .state('search-page-with-detail-item', {
      url: "/search/:keyword/:page/:item",
      controller: 'SearchController',
      controllerAs: 'vm',
      data: {
        bodyClasses: 'grayBackground'
      },
      templateUrl: 'static/templates/views/search/search-list.html'
    })

    .state('project-new', {
      url: "/project/new",
      controller: 'ProjectNewController',
      controllerAs: 'vm',
      templateUrl: 'static/templates/views/project/project-new.html',
      params: {
        item: [],
        editProjectId: ''
      },
      data: { bodyClasses: ''},
      authenticate: true
    })

    .state('project-edit', {
      url: "/project/edit/:editProjectId",
      controller: 'ProjectNewController',
      controllerAs: 'vm',
      templateUrl: 'static/templates/views/project/project-new.html',
      params: { item: [] },
      data: { bodyClasses: ''},
      authenticate: true
    })

    .state('project-item', {
      url: "/project/:id",
      controller: 'ProjectItemController',
      controllerAs: 'vm',
      data: { bodyClasses: ''},
      templateUrl: 'static/templates/views/project/project-item.html'
    })

    .state('user-myroom', {
      url: "/myroom",
      controller: 'UserMyroomController',
      controllerAs: 'vm',
      resolve: { UserProfile: getUserProfile },
      data: { bodyClasses: ''},
      templateUrl: 'static/templates/views/user/myroom.html',
      authenticate: true
    })

    .state('password-reset', {
      url: "/password/reset/confirm/:uid/:token",
      controller: 'UserPasswordResetConfirmController',
      controllerAs: 'vm',
      data: { bodyClasses: ''},
      templateUrl: 'static/templates/views/user/password-reset-confirm.html'
    })

	$locationProvider.html5Mode(true);
  }
})();

/**************************************************************************
 * @Directive
 * 챠트벌 옵션 설정  위젯
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('widgetChartOptions', [
      '$rootScope',
      'EditorActions',

      function (
        $rootScope,
        EditorActions) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId'
        },
        link: function ($scope, $elem) {
          // 기본값
          $scope.chartDirection = 'vertical';

          // 바챠트 방향설정
          // 사용안함.
          $scope.$watchCollection('chartDirection', function(newValue, oldValue) {
            EditorActions.updateHeader({
              itemId: $scope.onEditorItemId,
              state: 'setDirection',
              value: newValue
            });
          });
        },
        templateUrl: "static/templates/views/editor/widgets/chart-options.html"
      };
    }]);

})();

/**************************************************************************
 * @Directive
 * 시각화 에디터 위젯
 * 각 컬럼별 옵션 설정
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('widgetColumnOptions', [
      '$rootScope',
      '$timeout',
      'ApiService',
      'DataFilterService',
      'EditorDatasStore',
      'EditorFiltersStore',
      'EditorActions',
      'lodash',

      function (
        $rootScope,
        $timeout,
        ApiService,
        DataFilterService,
        EditorDatasStore,
        EditorFiltersStore,
        EditorActions,
        _) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId',
          column: '=column',
          isOpend: '=isOpend'
        },
        link: function ($scope, $elem) {
          var getFilter = [];

          $scope.isReady = false; // 컬럼 수정 가능 여부
          $scope.data = []; // 컬럼 데이터
          $scope.column.filters = []; // 필터 배열

          $scope.filterRangeModel = []; // 필터 간격
          $scope.includingState = true; // 필터 포함/배제
          $scope.query = ''; // 필터 쿼리

          // $scope.dataStatisticsType = ''; // 집계 타입
          // $scope.column.dataStatisticsType = ''; // 집계 타입

          // 기간
          $scope.column.dateRanges = {
            start: _.now(),
            end: _.now()
          };

          // 타입에 따른 쿼리
          switch ($scope.column.columnType) {
            case 'text':
              $scope.query = 'AND';
              break;
            case 'numeric':
              $scope.query = '==';
              break;
            default:
              break;
          }

          // 슬라이더
          $scope.sliderOptions = {
            min: 0,
            max: 9999,
            range: true
          };

          // 날짜 선택
          $scope.dateOptions = {
            formatYear: 'yy',
            maxDate: new Date(3020, 1, 1),
            minDate: new Date(1700, 1, 1),
            // startingDay: 1,
            showButtonBar: false
          };

          // 필터 키네임
          $scope.filter_keyname = [];
          $scope.filter_keyname['all'] = '값을 모두 포함';
          $scope.filter_keyname['any'] = '값을 하나라도 포함';
          $scope.filter_keyname['=='] = '같을 때(=)';
          $scope.filter_keyname['>'] = '클 때';
          $scope.filter_keyname['<'] = '작을 때';
          $scope.filter_keyname['>='] = '크거나 같을 때';
          $scope.filter_keyname['<='] = '작거나 같을 때';
          $scope.filter_keyname['~'] = '사이일 때';
          $scope.filter_keyname['multi'] = '여럿 중 하나 일 때';

          // 집계 키네임
          $scope.statistics_keyname = [];
          $scope.statistics_keyname['sum'] = '합계';
          $scope.statistics_keyname['avg'] = '평균';
          $scope.statistics_keyname['min'] = '최소';
          $scope.statistics_keyname['max'] = '최대';
          $scope.statistics_keyname['med'] = '중간값';
          $scope.statistics_keyname['fre'] = '빈도수';

          // 조건 선택
          $scope.setFilterKey = function(query) {
            $scope.query = query;
          };

          // 컬럼 소팅
          $scope.sortColumn = function(sortState) {
            /*
             * 컬럼 소팅
             *
             * @itemId : 아이템 아이디
             * @columnSort : 'asc: true', 'desc: false'
             * @column : 해당 컬럼
             */
            EditorActions.sortColumn({
              itemId: $scope.onEditorItemId,
              column: $scope.column,
              columnSort: sortState
            });
          };

          // 필터 추가
          $scope.addFilter = function() {

            var query = $scope.column.columnType == 'date' ? '~@' : $scope.query;

            /*
             * 필터 추가
             * 테이블 데이터 필터 추가
             *
             * @itemId : 아이템 아이디
             * @dataSetName : 데이터명(컬럼 타이틀)
             * @column : 해당 컬럼
             * @values : 필터값
             * @valueRanges: 특수값(간격)
             * @dataTotalType: 특수값(집계)
             * @dateRanges: 날짜 간격
             * @includingState : 포함/배제
             * @query : 검색 조건
             * @operator : 컬럼간 연산값
             */
            EditorActions.addFilter({
              itemId: $scope.onEditorItemId,
              dataSetName: $scope.column.columnTitle,
              column: $scope.column,
              values: $scope.column.filters,
              valueRanges: {
                start: $scope.column.filterRanges ? $scope.column.filterRanges.start : '',
                end: $scope.column.filterRanges ? $scope.column.filterRanges.end : ''
              },
              dateRanges: {
                start: new Date($scope.column.dateRanges.start),
                end: new Date($scope.column.dateRanges.end)
              },
              dataTotalType: $scope.dataTotalType,
              includingState: $scope.includingState,
              query: query
            });

            // 데이터탭인 경우 옵션 패널 닫기
            $rootScope.$broadcast('close-option-panel-at-data-tab', { itemId: $scope.onEditorItemId });

            // 데이터 테이블 해더 새로고침
            $rootScope.$broadcast('refresh-option-panel-hearder-at-data-tab', { itemId: $scope.onEditorItemId });
          }

          // 필터 리셋
          // $scope.resetFilter = function (dataSetName) {
          //   /**
          //    * 필터 삭제
          //    *
          //    * @itemId : 아이템 아이디
          //    * @dataSetName : 데이터명(컬럼 타이틀)
          //    */
          //   EditorActions.removeFilter({
          //     itemId: $scope.itemId,
          //     dataSetName: dataSetName
          //   });
          // }

          // 필터간격 업데이트
          $scope.changeFilterRanges = function ($event, value) {
            if (value.length > 0) {
              $scope.column.filterRanges = {
                start: value[0],
                end: value[1]
              };
            }
          }

          // 기간선택 시작일 팝업
          $scope.openDatepickerStart = function () {
            $scope.openedDatepickerStart = true;
          }

          // 기간선택 종료일 팝업
          $scope.openDatepickerEnd = function () {
            $scope.openedDatepickerEnd = true;
          }

          // 집계
          $scope.setStatistics = function (type) {
            $scope.column.dataStatisticsType = type;

            if (type == 'default') {
              $scope.column.dataStatisticsType = '';

              /*
               * 컬럼 집계 삭제
               *
               * @itemId : 아이템 아이디
               */
              EditorActions.removeStatistics({
                itemId: $scope.onEditorItemId,
              });

              return;
            }

            /*
             * 컬럼 집계
             *
             * @itemId : 아이템 아이디
             * @key : type
             * @column : 해당 컬럼
             */
            EditorActions.dataStatistics({
              itemId: $scope.onEditorItemId,
              column: $scope.column,
              key: type
            });
          }

          // 필터 업데이트
          function updateFilter () {
            getFilter = [];
            getFilter.length = 0;
            getFilter = EditorFiltersStore.findFilterByIdWithDataName($scope.onEditorItemId, $scope.column.columnTitle);

            $scope.sliderOptions.min = $scope.column.isStatistics ? $scope.column.columnStatistics.min : _.min($scope.data);
            $scope.sliderOptions.max = $scope.column.isStatistics ? $scope.column.columnStatistics.max : _.max($scope.data);

            if (getFilter.length > 0) {
              $scope.includingState = getFilter[0].includingState;
              $scope.query = getFilter[0].query || $scope.query;
              $scope.column.filters = getFilter[0].values;
              $scope.column.filterRanges = {
                start: getFilter[0].valueRanges.start || $scope.sliderOptions.min,
                end: getFilter[0].valueRanges.end || $scope.sliderOptions.max
              };
              $scope.column.dateRanges = {
                start: new Date(getFilter[0].dateRanges.start),
                end: new Date(getFilter[0].dateRanges.end)
              };

              $scope.column.operator = getFilter[0].operator;
            } else {
              // $scope.column.filterRanges = {
              //   start: $scope.sliderOptions.min,
              //   end: $scope.sliderOptions.max
              // };
            }

            $scope.isReady = true;

          }

          // 옵션 패널이 열렸을때
          $scope.$watch('isOpend', function(newValue, oldValue) {
            var _data = [], columnData = [], slicedData = [], flattenData = [];

            if (newValue == false) {
              $scope.data = []; // 컬럼 데이터
              $scope.column.filters = []; // 필터 배열

              $scope.filterRangeModel = []; // 필터 간격
              $scope.includingState = true; // 필터 포함/배제
              $scope.query = ''; // 필터 쿼리

              return;
            }

            if (newValue == false || $scope.data.length > 0) return;

            // 파일 업로드인 경우
            if ($scope.column.isFile) {
              columnData.length = 0;
              columnData = EditorDatasStore.findSearchDataByItemId($scope.onEditorItemId);

              if (columnData.length == 0) { return; }

              _data.length = 0;
              _data = _.cloneDeep(columnData[0].data);

              columnData = _.map(_data, function(d) {
                return d[$scope.column.columnIndex];
              });

              $scope.data = [];
              $scope.data.length = 0;
              $scope.data = _.uniq(columnData.slice(1));

              updateFilter();
              return;
            }


            // 서버 데이터인 경우
            ApiService.PublicData.getItemByColumns($scope.column.dataLink, $scope.column.columnTitle).then(function (results) {
              _data.length = 0;
              _data = _.cloneDeep(results.data);

              flattenData.length = 0;
              flattenData = _.flattenDepth(_data.slice(1), 1);

              slicedData.length = 0;
              slicedData = _.uniq(flattenData.slice(1));

              $scope.data = [];
              $scope.data.length = 0;
              $scope.data = slicedData;

              updateFilter();
            });

          });

          // 필터 업데이트
          $scope.$watch('column.filters', function(newValue, oldValue) {
            if ($scope.isOpend == true && $scope.isReady && newValue.length > 0) {
              $scope.addFilter();
            }
          });

          // 필터 간격 업데이트
          $scope.$watch('column.filterRanges', function(newValue, oldValue) {
            if ($scope.isOpend == true && $scope.isReady && oldValue && newValue) {
              $scope.addFilter();
            }
          });

          // 필터 기간 업데이트
          $scope.$watch('column.dateRanges', function(newValue, oldValue) {
            if ($scope.isOpend == true && $scope.isReady && oldValue && newValue) {
              $scope.addFilter();
            }
          });

          // 포함/배제 업데이트
          $scope.$watch('includingState', function(newValue, oldValue) {
            console.log('$scope.column.filters');
            console.log($scope.column.filters);

            console.log('$scope.query');
            console.log($scope.query);

            if ($scope.column.filters.length == 0 || $scope.query == '') {
              return;
            }
            if ($scope.isOpend == true && $scope.isReady && oldValue != newValue) {
              $scope.addFilter();
            }
          });

          // 필터 새로고침
          $scope.$on('refresh-filter-in-option-panle', function(event, args) {
            if ($scope.onEditorItemId != args.itemId) { return; }
            $scope.isOpend = false;
          });
        },
        templateUrl: "static/templates/views/editor/widgets/column-options.html"
      };
    }]);

})();

/**************************************************************************
 * @Directive
 * 시각화 데이터 필터링 조건값 설정 위젯
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('widgetItemFilters', [
      '$rootScope',
      'EditorFiltersStore',
      'EditorItemsStore',
      'EditorActions',

      function (
        $rootScope,
        EditorFiltersStore,
        EditorItemsStore,
        EditorActions) {

      return {
        restrict: 'A',
        scope: {
          itemId: '=itemId'
        },
        link: function ($scope, $elem) {

          // 초기값
          $scope.filters = EditorFiltersStore.findFilterById($scope.itemId);
          $scope.vizItem = EditorItemsStore.findItemById($scope.itemId);

          // 필터 쿼리 등록
          $scope.updateFilterOperator = function(operator, itemId) {
            EditorActions.updateItemFilterOperator({
              operator: operator,
              itemId: itemId
            });
          };

          // 필터 삭제
          $scope.removeFilter = function (dataSetName) {
            /**
             * 필터 삭제
             *
             * @itemId : 아이템 아이디
             * @dataSetName : 데이터명(컬럼 타이틀)
             */
            EditorActions.removeFilter({
              itemId: $scope.itemId,
              dataSetName: dataSetName
            });
          };

          // 필터 새로고침
          $scope.refreshFilter = function (itemId) {
            $scope.filters = EditorFiltersStore.findFilterById(itemId);
            $scope.vizItem = EditorItemsStore.findItemById(itemId);
            $rootScope.$broadcast('refresh-viz', { itemId: itemId });
          };

          // 필터 새로고침
          $scope.$on('refresh-filter', function(event, args) {
            if ($scope.itemId != args.itemId) { return; }

            $scope.refreshFilter(args.itemId);
          });
        },
        templateUrl: "static/templates/views/editor/widgets/item-filters.html"
      };
    }]);

})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('ProjectListController', ProjectListController);

  ProjectListController.$inject = [
    '$location',
    '$stateParams',
    '$scope',
    'ApiService',
    'EditorItemsStore',
    '$state',
    '$http'];

  function ProjectListController(
    $location,
    $stateParams,
    $scope,
    ApiService,
    EditorItemsStore,
    $state,
    $http) {

    var vm = this;

    /**************************************************************************
     * Init & Setting
     **************************************************************************/
    vm.stateParams = $stateParams; // 파라미터


    /**************************************************************************
     * Functions
     **************************************************************************/

    vm.searchByKeyword = function(keyword) {
      $state.go('search', { keyword: keyword });
    }

    vm.pageChanged = function($event) {
      $state.go('project-list', { page: vm.currentPage });
    }


    /**************************************************************************
     * Onload & Events
     * 페이지 로딩시 실행
     **************************************************************************/

    $(window).unbind('beforeunload');

    ApiService.Project.getList(vm.stateParams.page || 1).then(function (data) {
      vm.projectList = data;
      vm.currentPage = vm.stateParams.page;
    }, function() {
      vm.projectList = [];
      vm.currentPage = vm.stateParams.page;
    });
  }
})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('ProjectItemController', ProjectItemController);

  ProjectItemController.$inject = [
    '$location',
    '$scope',
    '$state',
    '$rootScope',
    '$timeout',
    'AppConstants',
    'AppService',
    'ApiService',
    'DataFilterService',
    'ToastService',
    'UtilService',
    'ConfirmService',
    'hotRegisterer',
    '$stateParams',
    'lodash'];

  function ProjectItemController(
    $location,
    $scope,
    $state,
    $rootScope,
    $timeout,
    AppConstants,
    AppService,
    ApiService,
    DataFilterService,
    ToastService,
    UtilService,
    ConfirmService,
    hotRegisterer,
    $stateParams,
    _) {

    var vm = this;
    var allData = [];

    /**************************************************************************
     * Init & Setting
     **************************************************************************/

    vm.stateParams = $stateParams; // 파라미터
    vm.isLoading = false; // 로딩
    vm.isOwner = false; // 수정권한
    vm.active_tab  = 0; // 활성화된 탭 아이디
    vm.sidebarHide = true; // 사이드바 닫기
    vm.showDataSideBar = false; // 사이드바 열기
    vm.isReadyData = false; // 데이터 로딩 상태
    vm.table_data = [[]]; // 테이블 데이터
    vm.metadata = {}; // 아이템 상세정보
    vm.detailMode = { verbose: true, data: false }; // 상세보기 / 데이터보기 toggle
    vm.startedDataViewers = []; // 셋팅된 데이터 테이블
    vm.startedDataViewers.length = 0; // 메모리 삭제
    vm.hotTableSettings = { // 데이터 테이블 셋팅
      renderAllRows: UtilService.detectIE() ? true : false
    };


    /**************************************************************************
     * Functions
     **************************************************************************/

    /**
     * 이미지 다운로드
     *
     * @itemId : 아이템 아이디
     * @filename : 파일명
     */
    vm.imgDownload = function (itemId, filename) {
      var svg_thumbnail = angular.element(document.querySelector(".visualize-item-" + itemId + " .NJ-lib-svg"))[0];
      UtilService.getSvgThumbnail(svg_thumbnail).then(function(thumbnail){
        UtilService.downloadImageByDataImage(thumbnail, 'daisy-' + _.snakeCase(filename));
      });
    };

    /**
     * 프로젝트 편집
     */
    vm.editProject = function () {
      if (!vm.isOwner) { return; }
      $state.go('project-edit', {
        editProjectId: vm.item.id
      });
    };

    /**
     * 프로젝트 삭제
     */
    vm.deleteProject = function () {
      if (!vm.isOwner) { return; }

      ConfirmService.open('경고', '삭제한 프로젝트는 복구할수 없습니다. 프로젝트를 삭제 하실 건가요?', '예', '아니요', function () {
        ApiService.Project.deleteItem(vm.item.id).then(function(results) {
          if (results === true) {
            $state.go('/');
          }
        });
      });
    };

    /**
     * 데이터 보기
     *
     * @itemId : 아이템 아이디
     */
    vm.viewData = function (item) {
      vm.dataTitle = item.data.metadata.title;
      vm.dataDescription = item.data.metadata.description;
      vm.dataOrganization = '';
      vm.showDataId = item.id;
      vm.showDataSideBar = true;

      setDataViewer(item);
      updateDataViewer(item);
    };


    /**************************************************************************
     * Private Functions
     * 내부함수
     **************************************************************************/

    /**
     * 데이터 테이블 초기 셋팅
     *
     * @item : 아이템
     */
    function setDataViewer(item) {
      if (_.includes(vm.startedDataViewers, item.id)) { return; }

      vm.startedDataViewers.push(item.id);

      var _deep = [];
      var instance = hotRegisterer.getInstance('view-data-' + item.id);

      if (_deep.length == 0) {
        _deep = item.data.metadata.sampleData.slice(1);
      }

      $timeout(function () {
        if (!item.data.metadata.link) {
          instance.loadData(item.data.metadata.originData.slice(1));
          instance.render();
          return;
        }

        if (item.data.metadata.link) {
          instance.loadData(_deep);
          instance.render();
          instance.addHook('afterRender', function() {
            var renderedRows = instance.rowOffset() + instance.countRenderedRows();

            if (_deep.length == renderedRows && item.data.metadata.rows > instance.countRows()) {
              vm.isLoading = true;
              ApiService.PublicData.getItem(item.data.metadata.link, _deep.length, UtilService.getSampleDataLimit()).then(function (results) {
                var sliced = results.data.slice(1);

                _.forEach(sliced, function(value) {
                  _deep.push(value);
                });

                sliced = null;

                instance.loadData(_deep);
                instance.render();

                vm.isLoading = false;
              });
            }
          });
        };

      }, 20);
    };

    /**
     * 데이터 테이블 업데이트
     *
     * @item : 아이템
     */
    function updateDataViewer (item) {
      var instance = hotRegisterer.getInstance('view-data-' + item.id);

      instance.updateSettings({
        colHeaders: item.data.metadata.sampleData[0]
      });
    }


    /**************************************************************************
     * Onload & Events
     * 페이지 로딩시 실행
     **************************************************************************/

    // 프로젝트 데이터 로딩
    ApiService.Project.getItem(vm.stateParams.id).then(function (data) {
      if ($rootScope.globals.currentUser && data.user == $rootScope.globals.currentUser.email) {
        vm.isOwner = true;
      }

      vm.item = data;

    }, function() {
      vm.item = [];
    });

    // 로딩메시지 열기
    $scope.$on('open-loadingbar', function(event, args) {
      vm.isLoading = true;
    });

    // 로딩메시지 닫기
    $scope.$on('close-loadingbar', function(event, args) {
      vm.isLoading = false;
    });
  }

})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('ProjectNewController', ProjectNewController);

  ProjectNewController.$inject = [
    '$scope',
    '$rootScope',
    '$state',
    '$stateParams',
    '$window',
    '$timeout',
    '$uibModal',
    'ApiService',
    'ConfirmService',
    'UtilService',
    'AppConstants',
    'DataFilterService',
    'ViztypeRecommendService',
    'AuthenticationService',
    'EditorItemsStore',
    'EditorFiltersStore',
    'EditorColumnsStore',
    'EditorActions',
    'lodash'];

  function ProjectNewController(
    $scope,
    $rootScope,
    $state,
    $stateParams,
    $window,
    $timeout,
    $uibModal,
    ApiService,
    ConfirmService,
    UtilService,
    AppConstants,
    DataFilterService,
    ViztypeRecommendService,
    AuthenticationService,
    EditorItemsStore,
    EditorFiltersStore,
    EditorColumnsStore,
    EditorActions,
    _) {

    var vm = this;

    /**************************************************************************
     * Init & Setting
     **************************************************************************/
    vm.projectTitle = '';
    vm.onEditorItemId = -1; // 아이템 아이디 초기값
    vm.stateParams = $stateParams; // 파라미터
    vm.showDataSearchBar = false; // 데이터 추가하기 사이드바 노출여부
    vm.activeTab = 0; // 활성화되어있는 옵션탭
    vm.isGettingData = false; // 로딩메시지
    vm.isEdit = false; // 프로젝트 편집여부
    vm.titleInputFocus = false; // 프로젝트 제목 입력박스 포커스 여부
    vm.projectTitleWidthMax = '250px'; // 프로젝트 제목 입력박스 최대 가로 사이즈


    /**************************************************************************
     * Functions
     **************************************************************************/

    /**
     * 프로젝트 저장
     *
     * @title: 프로젝트 타이틀
     * @description: 프로젝트 설명
     * @status:
     * @copyright: 저작권 표시
     * @thumbnail: 첫번째 챠트 썸네일
     */
    vm.save = function () {
      // 필수값 검사
      var items = EditorItemsStore.items;
      if (vm.projectTitle == '') {
        ConfirmService.open('경고', '프로젝트 제목을 입력하세요.', '확인', '', function () {
          vm.titleInputFocus = true;
        });
        return;
      }

      if (items.length == 0) {
        ConfirmService.open('경고', '차트 내용이 없습니다 차트를 추가 하세요.', '확인', '', function () {
          vm.showDataSearchBar = true;
        });
        return;
      }

      var svg_thumbnail = angular.element(document.getElementsByClassName("NJ-lib-svg"))[0];
      UtilService.getSvgThumbnail(svg_thumbnail).then(function(thumbnail){
        var saveProject = {
          title: vm.projectTitle,
          description: '',
          status: '2',
          copyright: '',
          thumbnail: thumbnail
        };
        var filteredItem = _.map(items, function(item){
          var filters = EditorFiltersStore.findFilterById(item.itemId);
          item.filter = {};
          item.filter.content = filters;
          item.allColumns = EditorColumnsStore.findColumnsByItemId(item.itemId);
          item.selectColumns = EditorColumnsStore.findSelectColumnsByItemId(item.itemId);
          return item;
        });

        var updateId = vm.stateParams.editProjectId || '';

        ApiService.Project.saveItem(saveProject, filteredItem, updateId).then(function (data) {
          EditorActions.deleteAllItem();
          UtilService.navigation.path('/project/' + data.id);
        }, function (error) {
          console.log(error);
          alert('에러, 콘솔 확인');
          return;
        });
      });
    };

    /**
     * 프로젝트 삭제
     */
    vm.deleteProject = function () {
      ConfirmService.open('경고', '해당 게시물을 정말 삭제 하시겠습니까?', '삭제', '취소', function () {
        if (vm.stateParams.editProjectId) {
          ApiService.Project.deleteItem(vm.stateParams.editProjectId).then(function (state) {
            if (state == true) {
              EditorActions.deleteAllItem();
              UtilService.navigation.path('/');
            }
          });
        }
      });
    };

    /**
     * 메인으로 이동시
     */
    vm.goHome = function () {
      ConfirmService.open('경고', '작업중이던 프로젝트를 저장하지 않으면 데이터가 유실됩니다. 이 페이지를 떠나실건가요?', '예', '아니요', function () {
        // 전체 아이템 삭제
        EditorActions.deleteAllItem();
        UtilService.navigation.path('/');
      });
    };

    /**
     * 취소
     */
    vm.cancel = function () {
      ConfirmService.open('경고', '작업중이던 프로젝트를 저장하지 않으면 데이터가 유실됩니다. 프로젝트 편집을 취소 하실건가요?', '예', '아니요', function () {
        // 전체 아이템 삭제
        EditorActions.deleteAllItem();
        UtilService.navigation.path('/');
      });
    };

    vm.goMyRoom = function () {
      ConfirmService.open('경고', '작업중이던 프로젝트를 저장하지 않으면 데이터가 유실됩니다. 프로젝트 편집을 취소 하실건가요?', '예', '아니요', function () {
        // 전체 아이템 삭제
        EditorActions.deleteAllItem();
        UtilService.navigation.path('/myroom');
      });
    };

    vm.logout = function () {
      ConfirmService.open('경고', '작업중이던 프로젝트를 저장하지 않으면 데이터가 유실됩니다. 프로젝트 편집을 취소 하실건가요?', '예', '아니요', function () {
        // 전체 아이템 삭제
        EditorActions.deleteAllItem();
        AuthenticationService.ClearCredentials();
        UtilService.navigation.path('/');
      });
    };

    /**
     * hot-table resize
     */
    vm.resizeHotTabe = function () {
      if (vm.onEditorItemId != -1) {
        $rootScope.$broadcast('refresh-hot-tabe-at-option-tab', { itemId: vm.onEditorItemId });
      }
    };


    /**************************************************************************
     * Modals
     * 팝업
     **************************************************************************/

    /**
     * 차트 추천 팝업
     *
     * @item : 검색결과에서 받는 데이터
     * ----------------------------------
     * @item.data : 검색샘플 데이터
     * @item.title : 데이터 타이틀
     * @item.description : 데이터 디스크랩션
     * @item.id : 검색 아이디 (TODO : 삭제)
     * @item.searchItemId : 검색 아이디
     * @item.link : 검색 링크
     * @item.organization : 기관
     */
    vm.dataOptionManagerModal = function (item) {
      ViztypeRecommendService.startRecommendPop(item, function(returnItem) {
        if(returnItem.state) {
          vm.onEditorItemId = returnItem.itemId;
        }
      });
    };

    /**
     * 차트 추천 팝업 - 파일 업로드
     *
     * @item : 파일업로드에서 받는 데이터
     */
    vm.dataOptionManagerByFileModal = function (item) {
      ViztypeRecommendService.startRecommendPop(item, function(returnItem) {
        if(returnItem.state) {
          vm.onEditorItemId = returnItem.itemId;
        }
      });
    };


    /**************************************************************************
     * Private Functions
     * 내부함수
     **************************************************************************/

    /**
     * 차트 타입 검색
     *
     * @alias : 차트유형
     */
    function findViztypeByAlias (alias) {
      return $.grep($rootScope.vizTypes, function(e) { return e.alias === alias })[0];
    }

    /**
     * 프로젝트 수정
     *
     * @projectId : 프로젝트 아이디
     */
    function getProject (projectId, getInfo) {
      ApiService.Project.getItem(projectId).then(function (data) {
        var firstItemId = '';
        vm.projectTitle = data.title;

        if (getInfo) { return; }

        _(data.visualize).forEach(function(value, index) {
          var makeId = UtilService.guid();

          // 컬럼 등록
          _.forEach(value.data.metadata.allColumns, function (column, i) {
            column.itemId = makeId
            EditorActions.addColumn(column);
          });

          // 필터 등록
          _.forEach(value.filter.content, function (value, i) {
            value.itemId = makeId
            EditorActions.addFilter(value);
          });

          // 매칭리스트
          var table = new NJ.Vtr.Table(value.data.metadata.sampleData);
          var matchTest = NJ.Vtr.Match.match(table);

          // 아이템 등록
          var saveItem = {
            itemId: makeId,
            metadata: {
              title: value.data.metadata.title,
              description: value.data.metadata.description,
              link: value.data.metadata.link,
              searchItemId: value.data.metadata.searchItemId,
              type: value.data.metadata.type,
              rows: value.data.metadata.rows,
              cols: value.data.metadata.cols
            },
            alias: value.type.alias,
            matchList: matchTest.results,
            useVisualized: true,
            visualizeId: value.id,
            visualizeOrder: value.order,
            originData: value.data.metadata.originData,
            sampleData: value.data.metadata.sampleData,
            isFile: value.data.metadata.isFile,
            filterOperator: value.data.metadata.filterOperator || 'AND'
          };

          if (value.data.metadata.dataStatisticsColumn) {
            saveItem.dataStatisticsColumn = value.data.metadata.dataStatisticsColumn;
          }

          EditorActions.addItem(saveItem);

          // 데이터 정보 백업
          EditorActions.saveData({
            dataID: makeId,
            dataTitle: value.data.metadata.title,
            searchItem: saveItem.metadata,
            itemId: makeId,
            alias: value.type.alias,
            isFile: value.data.metadata.isFile,
            originData: value.data.metadata.isFile ? value.data.metadata.originData : []
          });

          // 검색 데이터
          EditorActions.saveSearchData({
            itemId: makeId,
            searchItemId: value.data.metadata.searchItemId,
            dataTitle: value.data.metadata.title,
            title: value.data.metadata.title,
            // searchItem: item,
            description: value.data.metadata.description,
            link: value.data.metadata.link,
            organization: value.data.metadata.organization,
            isFile: value.data.metadata.isFile,
            data: value.data.metadata.sampleData,
            sampleData: value.data.metadata.sampleData
          });

          // 첫번째 아이템 기록
          if (index == 0) {
            firstItemId = makeId;
          }
        });

        // 첫번째 아이템 선택하기
        if (firstItemId) {
          $rootScope.$broadcast('updated-data', { itemId: firstItemId });
        }

      }, function() {});
    }

    /**
     * 프로젝트 제목 입력박스 가로사이즈 계산
     */
    function setProjectTitleWidthMax () {
      var logoW = angular.element(document).find('.project-navbar .navbar-header').eq(0).width() + 15;
      var navRW = angular.element(document).find('.project-navbar .navbar-right').eq(0).width() + 15;
      var titleInput = angular.element(document).find('.project-navbar .project-title').eq(0);
      var maxSize = window.innerWidth - (logoW + navRW);

      vm.projectTitleWidthMax = maxSize + 'px';

      if ((titleInput.width() + 30) >= maxSize) {
        titleInput.width(maxSize - 100);
      }
    }


    /**************************************************************************
     * Onload & Events
     * 페이지 로딩시 실행
     **************************************************************************/

    // 수정 또는 검색 아이템 추가
    if (vm.stateParams.item.link && vm.stateParams.item) {
      vm.dataOptionManagerModal(vm.stateParams.item);
      if (vm.stateParams.editProjectId) {
        getProject(vm.stateParams.editProjectId, true);
      }
    } else if (vm.stateParams.item.length == 0 && vm.stateParams.editProjectId) {
      $timeout(function () {
        getProject(vm.stateParams.editProjectId, false);
      }, 20);
    }

    // 프로젝트 수정여부
    if (vm.stateParams.editProjectId) {
      vm.isEdit = true;
    }

    // 파일 업로드인경우
    if (vm.stateParams.uploadFile) {

    }

    // 윈도우 리사이즈시 프로젝트 타이틀 입력박스 최대크기 다시계산
    $window.addEventListener('resize', setProjectTitleWidthMax);
    setProjectTitleWidthMax();

    // 페이지를 벗어날 경우
    $window.addEventListener('beforeunload', function () {
      return '아직 저장하지 않은 변경 사항이 있을 수 있습니다.';
    });


    /**************************************************************************
     * 프로젝트 에디터 Handle
     **************************************************************************/

    // 편집 아이템 변경
    $scope.$on('set-editor-item', function (event, args) {
     vm.onEditorItemId = args.itemId;
    });

    // 파일 업로드 완료시
    $scope.$on('file-uploader:loaded', function(event, data, filename) {
     var dataType = filename.match(/([^.]*$)/)[0];
     var item = {
       isFile: true,
       data: [],
       title: filename
     };

     if (dataType == "xls" || dataType == "xlsx"){
       item.data = data;
     } else if (dataType == "json") {
       data = objToArr(JSON.parse(data));
       item.data = data;
     } else {
       item.data = Papa.parse(data, { skipEmptyLines: true }).data;
     }

     ViztypeRecommendService.startRecommendPop(item, function() {});
    });

    // 데이터탭 활성화 시키기
    $scope.$on('show-data-tab', function() {
     vm.activeTab = 1;
     vm.resizeHotTabe();
    });

    // 옵션탭 활성화 시키기
    $scope.$on('show-option-tab', function() {
     vm.activeTab = 0;
    });

    // 데이터 추가 사이드바 열기
    $scope.$on('show-data-searchbar', function() {
     vm.showDataSearchBar = true;
    });

    // 데이터 추가 사이드바 닫기
    $scope.$on('hide-data-searchbar', function() {
     vm.showDataSearchBar = false;
    });

    // 로딩메시지 열기
    $scope.$on('open-loadingbar-at-project-page', function(event, args) {
     if (args.itemId == vm.onEditorItemId) {
       vm.isGettingData = true;
     }
    });

    // 로딩메시지 닫기
    $scope.$on('close-loadingbar-at-project-page', function(event, args) {
     if (args.itemId == vm.onEditorItemId) {
       vm.isGettingData = false;
     }
    });

    // 로딩메시지 열기
    $scope.$on('open-loadingbar', function(event, args) {
     if (args.itemId == vm.onEditorItemId) {
       vm.isLoading = true;
     }
    });

    // 로딩메시지 닫기
    $scope.$on('close-loadingbar', function(event, args) {
     if (args.itemId == vm.onEditorItemId) {
       vm.isLoading = false;
     }
    });

    // 에디터 업데이트시
    $scope.$on('updated-data', function(event, args) {
      if (!args.dontRefreshItems) {
        $rootScope.$broadcast('refresh-items', { itemId: args.itemId });
      }
      $rootScope.$broadcast('refresh-options', { itemId: args.itemId });
    });
  }
})();

/**************************************************************************
 * @Directive
 * 데이터 추가하기 패널
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('vizEditorAddData', [
      '$rootScope',
      '$state',
      'ViztypeRecommendService',
      'EditorDatasStore',
      'EditorActions',

      function (
        $rootScope,
        $state,
        ViztypeRecommendService,
        EditorDatasStore,
        EditorActions) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId',
          editProjectId: '=editProjectId',
          types: '=types'
        },
        link: function ($scope, $elem) {
          // 초기값
          $scope.datas = EditorDatasStore.datas;

          /**
           * 검색 페이지 가기
           */
          $scope.goSearchPage = function() {
            $state.go('search', {
              backProject: true,
              editProjectId: $scope.editProjectId
            });
          };

          /**
           * 데이터 복사 하기
           *
           * @item : 검색결과에서 받는 데이터
           * ----------------------------------
           * @item.data : 검색샘플 데이터
           * @item.title : 데이터 타이틀
           * @item.description : 데이터 디스크랩션
           * @item.id : 검색 아이디 (TODO : 삭제)
           * @item.searchItemId : 검색 아이디
           * @item.link : 검색 링크
           * @item.organization : 기관
           */
          $scope.dataOptionManagerModal = function(data) {
            var item;

            if (data.searchItem && data.searchItem.data) {
              item = data.searchItem;
            } else if (data.originData.length == 0 && data.searchItem && !data.isFile) {
              var localData = EditorDatasStore.findSearchDataById(data.searchItem.searchItemId);
              if (localData.length > 0) {
                item = localData[0]
              } else {
                alert('검색 데이터가 없습니다.');
                return;
              }
            } else if (data.originData.length > 0 && data.isFile) {
              console.log('파일인 경우');
              console.log(data);
            } else {
              alert('검색 데이터가 없습니다.');
              return;
            }

            ViztypeRecommendService.startRecommendPop(item, function(returnItem) {
              $rootScope.$broadcast('hide-data-searchbar');
            }, 'clone');
          };

          /**
           * 파일 업로드
           */
          $scope.uploadFile = function () {
            $rootScope.$broadcast('file-uploader:click', { accept: '.csv, .tsv, .xls, .xlsx, .json' });
            $rootScope.$broadcast('hide-data-searchbar');
          };

          // 스토어에 데이터가 업데이트 되면 새로 로딩.
          $scope.$on('save-data', function() {
            $scope.datas = EditorDatasStore.datas;
          });

        },
        templateUrl: "static/templates/views/editor/add-data-panel.html"
      };
    }]);

})();

/**************************************************************************
 * @Directive
 * 데이터 옵션 패널
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('vizEditorData', [
      '$rootScope',
      '$state',
      '$window',
      '$timeout',
      '$uibModal',
      '$q',
      'AppConstants',
      'ConfirmService',
      'UtilService',
      'DataFilterService',
      'ApiService',
      'EditorFiltersStore',
      'EditorItemsStore',
      'EditorColumnsStore',
      'EditorDatasStore',
      'EditorActions',
      'hotRegisterer',
      'lodash',

      function (
        $rootScope,
        $state,
        $window,
        $timeout,
        $uibModal,
        $q,
        AppConstants,
        ConfirmService,
        UtilService,
        DataFilterService,
        ApiService,
        EditorFiltersStore,
        EditorItemsStore,
        EditorColumnsStore,
        EditorDatasStore,
        EditorActions,
        hotRegisterer,
        _) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId'
        },
        link: function ($scope, $elem) {
          var openedOptionPanelIndex; // 열려있는 옵션 팝업

          $scope.isOpenOptionPanel = false; // 옵션 팝업 열기 기본값
          $scope.isOpen = false; // 옵션 팝업 열림 상태
          $scope.startedDataViewers = []; // 셋팅된 데이터 테이블
          $scope.startedDataViewers.length = 0; // 메모리 삭제
          $scope.items = []; // 전체 아이템
          $scope.items.length = 0; // 메모리 삭제
          $scope.items = EditorItemsStore.items; // 전체 아이템 리스트
          $scope.hotTableSettings = { // 데이터 테이블 셋팅
            renderAllRows: UtilService.detectIE() ? true : false,
            stretchH: "last"
          };

          // 데이터 삭제
          $scope.removeData = function () {
            ConfirmService.open('경고', '데이터를 삭제하시겠습니까? 데이터 삭제시 시각화도 함께 삭제 됩니다.', '삭제', '취소', function () {
              // 활성화되어있는 아이템 & 데이터 삭제
              EditorActions.deleteItem({
                itemId: $scope.onEditorItemId
              });
            });
          };

          // 데이터 테이블 초기 셋팅
          function setDataViewer(item) {
            if (_.includes($scope.startedDataViewers, item.itemId)) { return; }

            $scope.startedDataViewers.push(item.itemId);

            var localData = [], _deep = [];
            var instance = hotRegisterer.getInstance('data-panel-hottable-' + item.itemId);

            _deep.length = 0;
            localData.length = 0;
            localData = item.metadata.link ? EditorDatasStore.findLocalDataById(item.metadata.link) : [];

            if (localData.length == 0 && item.metadata.link) {
              _deep = _.cloneDeep(item.sampleData);
              instance.loadData(_deep.slice(1));
              EditorActions.addLocalData({
                link: item.metadata.link,
                data: item.sampleData
              });
            } else if (localData.length > 0 && item.metadata.link) {
              _deep = _.cloneDeep(localData[0].data);
              instance.loadData(_deep.slice(1));
            } else if (item.isFile && item.originData.length > 0) {
              _deep = _.cloneDeep(item.originData);
              instance.loadData(_deep.slice(1));
            } else if (item.sampleData.length > 0) {
              _deep = _.cloneDeep(item.sampleData);
              instance.loadData(_deep.slice(1));
            } else {
              // TODO..
            }

            // 데이터 인덱싱후 로드 & 렌더링
            DataFilterService.getIndexedTable(_deep).then(function (results) {
              instance.loadData(results.data);
              updateDataViewer(item);

              instance.addHook('afterOnCellMouseDown', afterOnCellMouseDown);
              instance.addHook('afterScrollHorizontally', afterScrollHorizontally);

              instance.render();
            });

            // 서버 데이터라면 Infinite scroll 이벤트 생성
            if (localData.length == 0 && item.metadata.link) {
              instance.addHook('afterRender', function() {
                var renderedRows = instance.rowOffset() + instance.countRenderedRows();
                var instanceData = EditorDatasStore.findLocalDataById(item.metadata.link);

                // 맨 하단으로 스크롤시 데이터가 더 있다면 추가로딩
                if (instanceData.length > 0 && (instanceData[0].data.length - 1) == renderedRows  && item.metadata.rows && item.metadata.rows > instance.countRows()) {
                  $rootScope.$broadcast('open-loadingbar', { itemId: item.itemId });
                  ApiService.PublicData.getItem(item.metadata.link, instanceData[0].data.length - 1, UtilService.getSampleDataLimit()).then(function (results) {

                    var sliced = results.data.slice(1);

                    _.forEach(sliced, function(value) {
                      _deep.push(value);
                    });

                    EditorActions.addLocalData({
                      link: item.metadata.link,
                      data: _deep
                    });

                    sliced = null;

                    // 데이터 인덱싱후 로드 & 렌더링
                    DataFilterService.getIndexedTable(_deep).then(function (results) {
                      instance.loadData(results.data);
                      instance.render();
                      $rootScope.$broadcast('close-loadingbar', { itemId: item.itemId });
                    });

                  });
                }
              });
            }
          }

          // 데이터 테이블 업데이트
          function updateDataViewer (item) {
            var columns = EditorColumnsStore.findColumnsByItemId(item.itemId);
            var filters = EditorFiltersStore.findFilterById(item.itemId);
            var instance = hotRegisterer.getInstance('data-panel-hottable-' + item.itemId);

            if (!instance && columns.length == 0) { return; }

            instance.updateSettings({
              colHeaders: item.sampleData[0]
              // colHeaders: function(index) {
              //
              //   // 필터기능 임시 삭제
              //   // 삭제 금지
              //   var column = _.filter(columns, function (value) {
              //     return value.columnTitle == item.sampleData[0][index];
              //   });
              //   var findFilters = [];
              //   var isFiltered = false;
              //
              //   findFilters.length = 0;
              //
              //   if (filters.length > 0) {
              //     findFilters = _.filter(filters, function (value) {
              //       return value.dataSetName == item.sampleData[0][index];
              //     });
              //   }
              //
              //   if (findFilters.length > 0) {
              //     isFiltered = true
              //   }
              //
              //   return column.length > 0 ? UtilService.hotTableHeaderDesigner(item.itemId, column[0].columnTitle, column[0].isSelected, isFiltered, index) : '';
              // }
            });
          }

          // 데이터 테이블 클릭시
          function afterOnCellMouseDown (el) {
            var dataset = el.realTarget.dataset;

            if (!dataset.index) {
              if (!dataset.isSelected) {
                alert('필터를 편집하려면 해당 변수를 추가해 주세요');
              }
              closeOptionPanel();
              return;
            }

            var column = UtilService.getColumnByTitle(dataset.itemId, dataset.columnTitle);

            openedOptionPanelIndex = dataset.index;
            $scope.optionPanelValue = column[0];
            setAwOffset();
            openOptionPanel();

            $window.addEventListener('resize', setAwOffset);
            $window.addEventListener('click', setPanelOutsideClick);
          }

          // 데이터 테이블 스크롤시
          function afterScrollHorizontally () {
            closeOptionPanel();
          }

          // 옵션 팝업 열기
          function openOptionPanel () {
            $scope.isOpenOptionPanel = true;
            $scope.isOpen = true;
            $scope.$apply();
          }

          // 옵션 팝업 닫기
          function closeOptionPanel () {
            $scope.isOpenOptionPanel = false;
            $scope.isOpen = false;
            // $scope.$apply();
          }

          // 옵션 패널 화살표 표시
          function setAwOffset () {
            if (!openedOptionPanelIndex || !$scope.onEditorItemId) { return; }

            var instance = hotRegisterer.getInstance('data-panel-hottable-' + $scope.onEditorItemId);
            var colWidth = instance.getColWidth(openedOptionPanelIndex);
            var offset = angular.element('.th-col-header-' + openedOptionPanelIndex + '-' + $scope.onEditorItemId).eq(0).offset();
            $scope.optionPanelStyle = {
              'left': (offset.left + (colWidth / 2) - (20 + 15)) + 'px'
            };
            $scope.$apply();
          }

          // 여백 클릭시 옵션 패널 닫기
          function setPanelOutsideClick (event) {
            var etarget = angular.element(event.target).eq(0);
            var findPanel = etarget.parents('.widget-hot-table-option-panel');
            var findHeader = etarget.parents('.widget-hot-table-header');

            if (findPanel.length > 0 || findHeader.length > 0) { return; }

            closeOptionPanel();
            $scope.$apply();
          }

          // 데이터탭이 열렸을때
          $scope.$on('refresh-hot-tabe-at-option-tab', function(event, args) {
            $scope.items = [];
            $scope.items.length = 0;
            $scope.items = EditorItemsStore.findItemById(args.itemId);
            $scope.onEditorItemId = args.itemId;

            if ($scope.items == 0) { return; }

            $scope.item = $scope.items[0];

            $timeout(function () {
              _.forEach($scope.items, function (value) {
                setDataViewer(value);
                updateDataViewer(value);
              });
            }, 20);
          });

          // 필터 옵션 패널 닫기
          $scope.$on('close-option-panel-at-data-tab', function(event, args) {
            if (args.itemId != $scope.onEditorItemId) { return; }
            closeOptionPanel();
          });

          // 필터 해더 새로고침
          $scope.$on('refresh-option-panel-hearder-at-data-tab', function(event, args) {
            if (args.itemId != $scope.onEditorItemId) { return; }

            var item = [];

            item.length = 0;
            item = EditorItemsStore.findItemById(args.itemId);

            if (item.length > 0) {
              updateDataViewer(item);
            }
          });

          // 아이템이 삭제 되면 프로젝트 새로고침
          $scope.$on('delete-item', function() {
            $scope.items.length = 0;
            $scope.items = EditorItemsStore.items;

            // 아이템이 하나도 없는경우 데이터 추가 사이드바 오픈
            // 아이템이 있는경우 첫번째 아이템 활성화
            if ($scope.items.length == 0) {
              $rootScope.$broadcast('show-data-searchbar'); // 아이템 추가 사이드바 열기
              $scope.onEditorItemId = '-1'; // 활성된 아이템 아이디 초기화
            } else {
              $scope.onEditorItemId = $scope.items[0].itemId; // 활성된 아이템 아이디
            }

            $rootScope.$broadcast('refresh-items', { itemId: $scope.onEditorItemId }); // 프로젝트 아이템 목록 새로고침
            $rootScope.$broadcast('refresh-options', { itemId: $scope.onEditorItemId }); // 프로젝트 옵션탭 새로고침
            $rootScope.$broadcast('show-option-tab'); // 프로젝트 옵션탭 활성화시키기

          });
        },
        templateUrl: "static/templates/views/editor/data-panel.html"
      };
    }]);

})();

/**************************************************************************
 * @Directive
 * 아이템 리스트
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('vizEditorItems', [
      '$rootScope',
      '$timeout',
      '$uibModal',
      'UtilService',
      'ViztypeRecommendService',
      'ConfirmService',
      'EditorItemsStore',
      'EditorColumnsStore',
      'EditorActions',

      function (
        $rootScope,
        $timeout,
        $uibModal,
        UtilService,
        ViztypeRecommendService,
        ConfirmService,
        EditorItemsStore,
        EditorColumnsStore,
        EditorActions) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId'
        },
        link: function ($scope, $elem) {
          // 초기값
          $scope.items = EditorItemsStore.items;

          // 데이터명 변경
          $scope.changeDataTitle = function (itemId, $event) {
            console.log(itemId);
            console.log($event);
          }

          // 챠트 이미지 다운로드
          $scope.imgDownload = function (itemId, filename) {
            var svg_thumbnail = angular.element(document.querySelector(".visualize-item-" + itemId + " .NJ-lib-svg"))[0];
            UtilService.getSvgThumbnail(svg_thumbnail).then(function(thumbnail){
              UtilService.downloadImageByDataImage(thumbnail, 'daisy-' + _.snakeCase(filename));
            });
          };

          // 시각화 추천
          $scope.dataOptionManagerModal = function (item, type) {
            item.metadata.isFile = item.isFile;
            ViztypeRecommendService.startRecommendPop(item.metadata, function(returnItem) {
              if(returnItem.state) {
                $scope.items = EditorItemsStore.items;
              }
            }, type, item.itemId);
          };

          // 아이템 삭제
          $scope.deleteItem = function (itemId) {
            ConfirmService.open('경고', '작업중이던 시각화를 삭제합니다. 삭제시 데이터는 남아있습니다.', '삭제', '취소', function () {
              EditorActions.updateItemUseVisualized({
                itemId: itemId,
                state: false
              });
            });
          };

          // 아이템 선택
          $scope.selectItem = function (itemId) {
            if (itemId != $scope.onEditorItemId) {
              $rootScope.$broadcast('show-option-tab', { itemId: itemId });
              $rootScope.$broadcast('updated-data', { itemId: itemId, dontRefreshItems: true });
            }
          };

          // 시각화 변경
          $scope.changeChartModal = function (itemId) {
            $uibModal.open({
              templateUrl: 'static/templates/modals/visualize-chart.html',
              controller: ['$uibModalInstance', function ($uibModalInstance) {
                var modal = this;
                var item = EditorItemsStore.findItemById(itemId);

                modal.vizTypes = $rootScope.vizTypes;
                modal.alias = item[0].alias;
                modal.matchList = _.map(item[0].matchList, function(m) { return m.alias; });
                modal.chartList = _.reduce(['bar','line', 'scatterplot', 'treemap', 'pie', 'parallel-coords', 'map'], function(result, value, key) {
                  result[key] = {
                    name: value,
                    matched: value == 'map' ? true : _.includes(modal.matchList, value)
                  }
                  return result;
                }, []);

                if (item.length == 0) {
                  alert('해당 챠트의 정보를 찾을수 없습니다.');
                  $uibModalInstance.dismiss('cancel');
                  return;
                }

                modal.changeModel = function () {
                  var saveItem = item[0];
                  saveItem.alias = modal.alias;
                  saveItem.useVisualized = true;
                  EditorActions.updateItem(saveItem);
                  $uibModalInstance.dismiss('cancel');
                };

                modal.close = function () { $uibModalInstance.dismiss('cancel'); };
              }],
              controllerAs: 'Modal',
              size: 'md',
              windowClass: 'modal-visualize-chart'
            });
          };

          // 시각화 선택
          $scope.selectChartModal = function (itemId) {
            var columns = EditorColumnsStore.findSelectColumnsByItemId(itemId);
            if (columns.length == 0) {
              ConfirmService.open('경고', '시각화를 위해 변수를 추가 하세요.', '확인', '', function () {
                return;
              });
              return;
            } else {
              $scope.changeChartModal(itemId);
            }
          };

          // 데이터 보기
          $scope.viewDataSidebar = function (itemId) {
            $rootScope.$broadcast('show-data-tab');
          };

          // 아이템리스트 새로고침
          $scope.$on('refresh-items', function(event, args) {
            $scope.onEditorItemId = args.itemId;
            $scope.items = EditorItemsStore.items;

            $timeout(function () {
              $rootScope.$broadcast('refresh-viz', { itemId: args.itemId });
            }, 10);
          });
        },
        templateUrl: "static/templates/views/editor/items-panel.html"
      };
    }]);

})();

/**************************************************************************
 * @Directive
 * 아이템 옵션 패널
 **************************************************************************/

(function () {
'use strict';

  angular.module('daisy.directives')
    .directive('vizEditorOptions', [
      '$rootScope',
      '$sce',
      '$timeout',
      '$uibTooltip',
      'EditorItemsStore',
      'EditorColumnsStore',
      'EditorFiltersStore',
      'EditorActions',

      function (
        $rootScope,
        $sce,
        $timeout,
        $uibTooltip,
        EditorItemsStore,
        EditorColumnsStore,
        EditorFiltersStore,
        EditorActions) {

      return {
        restrict: 'A',
        scope: {
          onEditorItemId: '=onEditorItemId'
        },
        link: function ($scope, $elem) {
          $scope.removedColumns = [];

          /**
           * 컬럼 삭제
           *
           * @itemId: 아이템 아이디
           * @columnTitle: 컬럼 타이틀
           */
          $scope.removeColumn = function(column) {
            EditorActions.removeColumn({
              columnTitle: column.columnTitle,
              dataSetName: column.columnTitle,
              itemId: $scope.onEditorItemId
            });
          };

          /**
           * 컬럼 추가
           *
           * @column: 컬럼
           * @groupSort: 그룹소팅
           */
          $scope.addColumn = function(column, groupSort) {
            EditorActions.selectColumn({
              columnTitle: column.columnTitle,
              groupSort: groupSort,
              itemId: $scope.onEditorItemId
            });
          };

          // 옵션 패널 새로고침
          $scope.$on('refresh-options', function(event, args) {
            $scope.onEditorItemId = args.itemId;
            var columns = EditorColumnsStore.findSelectColumnsByItemId(args.itemId);
            var filters = EditorFiltersStore.findFilterById(args.itemId);

            if (args.itemId == '-1') {
              $scope.columns = [];
              $scope.removedColumns = [];
              return;
            }

            $scope.filterGroups = _.groupBy(filters, 'column.group');
            $scope.columns = columns;
            $scope.removedColumns = EditorColumnsStore.findNotSelectColumnsByItemId(args.itemId);
          });

          // 추가 가능한 컬럼수가 없을경우 팝업 닫기
          $scope.$watch('removedColumns', function(newValue, oldValue) {
            if ($scope.removedColumns.length == 0) {
              var popover = document.getElementsByClassName('popover');
              if (popover[0]) {
                var popoverEl = angular.element(document.querySelector('.popover'));
                popoverEl.remove();
              }
            }
          });
        },
        templateUrl: "static/templates/views/editor/options-panel.html"
      };
    }]);

})();

(function () {

'use strict';

angular.module('daisy.controllers').controller('AppController', [
  '$rootScope',
  '$route',
  'AppConstants',
  'ToastService',
  'UtilService',

  function (
    $rootScope,
    $route,
    AppConstants,
    ToastService,
    UtilService) {

  var self = this;

  self.$route = $route;
  self.constants = AppConstants;
  self.ToastService = ToastService;
  self.util = UtilService;

  self.toggleSidebar = function () {
    self.service.sidebarShown = ! self.service.sidebarShown;
  };
}]);

})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('SearchController', SearchController);

  SearchController.$inject = [
    '$location',
    '$scope',
    '$rootScope',
    '$anchorScroll',
    '$timeout',
    'ApiService',
    'ToastService',
    'ConfirmService',
    'UtilService',
    '$uibModal',
    '$stateParams',
    '$state',
    'hotRegisterer',
    'EditorActions',
    'lodash'];

  function SearchController(
    $location,
    $scope,
    $rootScope,
    $anchorScroll,
    $timeout,
    ApiService,
    ToastService,
    ConfirmService,
    UtilService,
    $uibModal,
    $stateParams,
    $state,
    hotRegisterer,
    EditorActions,
    _) {
    var vm = this;

    /**************************************************************************
     * Init & Setting
     **************************************************************************/
    vm.stateParams = $stateParams;
    vm.keyword = vm.stateParams.keyword;
    vm.searchPage = 1;
    vm.searchItem = null;
    vm.isSearching = false;
    vm.isGettingData = false;
    vm.showbackProject = false;
    vm.searchFocus = false;


    /**************************************************************************
     * Functions
     * 검색 함수
     **************************************************************************/

    /**
     * 검색
     *
     * @keyword
     */
    vm.searchByKeyword = function(keyword) {
      $state.go('search', {keyword: keyword});
    }

    /**
     * 검색 데이터 설정
     *
     * @data: 데이터
     */
    vm.dataSetting = function(data) {
      _.map(data.results, function(result) {
        var colHeaders = result.data[0];

        result.settings = {
          rowHeaders: false,
          renderAllRows: UtilService.detectIE() ? true : false,
          manualColumnResize: true,
          outsideClickDeselects: false,
          minCols: 10,
          minRows: 5,
          readOnly: true,
          colHeaders: colHeaders
        };

        result.data = result.data.slice(1);
      });

      return data;
    }

    /**
     * 검색
     *
     * @keyword : 키워드
     */
    vm.search = function(keyword) {
      vm.keyword = keyword;

      if (keyword === undefined) {
        alert('검색어를 입력하세요');
        return;
      }

      vm.isSearching = true;
      ApiService.PublicData.searchByKeyword(vm.keyword, vm.searchPage).then(function (data) {
        vm.searchResult = vm.dataSetting(data);
      }, function () {
        vm.searchResult = [];
      }).finally(function () {
        vm.isSearching = false;
      });
    }

    /**
     * 검색 페이징
     */
    vm.searchPageChanged = function() {
      $anchorScroll();
      vm.isSearching = true;
      ApiService.PublicData.searchByKeyword(vm.keyword, vm.searchPage).then(function (data) {
        vm.searchResult = vm.dataSetting(data);
      }, function () {
        vm.searchResult = [];
      }).finally(function () {
        vm.isSearching = false;
      });
    }

    /**
     * 검색 + 페이지 번호
     */
    vm.searchPageWithDetailPopup = function() {
      ApiService.PublicData.searchByKeyword(vm.keyword, vm.searchPage).then(function (data) {
        vm.searchResult = vm.dataSetting(data);

        var item = _.filter(data.results, function(r) {
          return r.id == vm.searchItem;
        });
        if (item.length > 0) {
          vm.searchDetailModal(item[0]);
        } else {
          alert('선택한 검색 결과의 정보가 없습니다. 다시 시도해주세요.');
        }

      }, function () {
        vm.searchResult = [];
      }).finally(function () {
        vm.isSearching = false;
      });
    }

    /**
     * 데이터 선택, 프로젝트로 이동
     *
     * @selecedItem
     */
    vm.seleceData = function(selecedItem, makeId) {
      var table = new NJ.Vtr.Table(selecedItem.data);
      var matchList = [];
      try {
        matchList = NJ.Vtr.Match.match(table);
      } catch (e) {}

      if (!matchList.results || matchList.results.length == 0) {
        vm.isGettingData = false;
        ConfirmService.open('경고', '정제가 필요한 데이터 입니다.', '확인', '', function (results) {
          if (results == 'OK') {

          }
        });
        return;
      }

      selecedItem.keyword = vm.keyword;
      selecedItem.page = vm.searchPage;
      selecedItem.searchItemId = selecedItem.id;
      selecedItem.itemId = makeId;

      if (vm.stateParams.editProjectId) {
        $state.go('project-edit', {
          editProjectId: vm.stateParams.editProjectId,
          item: selecedItem
        });
      } else {
        $state.go('project-new', {
          item: selecedItem
        });
      }
    }


    /**************************************************************************
     * Modals
     * 팝업
     **************************************************************************/

    /**
     * 검색 결과 상세
     *
     * @event
     * @item
     */
    vm.searchDetailModal = function(item) {
      vm.isGettingData = true;
      $uibModal.open({
        templateUrl: 'static/templates/modals/search-detail.html',
        controller: ['$uibModalInstance', function ($uibModalInstance) {
          var modal = this;
          var makeId = UtilService.guid(), sampleData = [];

          item.settings.minSpareRows = 0;

          modal.data = [];
          modal.isGettingData = true;
          modal.item = item;
          modal.limit = UtilService.getSampleDataLimit();
          modal.hotTableId = makeId;

          function run(offset) {
            ApiService.PublicData.getItem(item.link, offset, modal.limit).then(function (detailItem) {
              if (offset == 0) {
                modal.data.length = 0;
                modal.data = detailItem.data.slice(1);
              } else {
                _.forEach(detailItem.data, function(value) {
                  modal.data.push(value);
                });
              }

              modal.isGettingData = false;

              // 검색한 데이터 저장
              if (offset == 0) {
                sampleData.length = 0;
                sampleData = detailItem.data.slice(0, modal.limit);

                /**
                 * 검색한 데이터 정보 저장
                 * 매칭 테스트 및 간단한 테스트를 위한 용도
                 *
                 * @itemId: 아이템 고유 아이디
                 * @searchItemId: 검색 데이터 아이디
                 * @dataTitle: 데이터 타이틀
                 * @searchItem: 검색 메타정보
                 * @data: 데이터 !! 삭제
                 * @sampleData: 샘플데이터
                 */
                EditorActions.saveSearchData({
                  itemId: makeId,
                  searchItemId: item.id,
                  dataTitle: item.title,
                  searchItem: item,
                  data: detailItem.data,
                  sampleData: sampleData
                });
              }

              vm.isGettingData = false;

              $timeout(function () {
                var instance = hotRegisterer.getInstance(modal.hotTableId);

                instance.addHook("afterRender", function(isForced) {
                  var renderedRows = instance.rowOffset() + instance.countRenderedRows();
                  var totalRenderedRows = modal.data.length;
                  if (renderedRows == totalRenderedRows && detailItem.rows > totalRenderedRows) {
                    vm.isGettingData = true;
                    run(totalRenderedRows);
                  }
                });

              }, 20);

            }, function (error) {
              alert('데이터 로드 실패');
              modal.isGettingData = false;
              vm.isGettingData = false;
            });
          }

          run(0);

          modal.selectData = function () {
            vm.seleceData(item, makeId);
            $uibModalInstance.dismiss('cancel');
          }

          modal.close = function () {
            $uibModalInstance.dismiss('cancel');
          };
        }],
        controllerAs: 'Modal',
        size: 'lg',
        windowClass: 'modal-search-detail'
      }).result.then(function (data) {
        console.log(data);
      });
    }


    /**************************************************************************
     * Private Functions
     * 내부함수
     **************************************************************************/




    /**************************************************************************
     * Onload & events
     * 페이지 로딩시 실행
     **************************************************************************/

    /**
     * 자동 검색어
     * 메인페이지에서 키워드를 지정하고 들어오는 경우
     */
    if (vm.stateParams.keyword && !vm.stateParams.page) {
      vm.search(vm.stateParams.keyword);
    }

    /**
     * 자동 검색어 - 페이지, 아이템
     * 메인페이지에서 키워드, 페이지번호, 아이템을 지정하고 들어오는 경우
     */
    if (vm.stateParams.keyword && vm.stateParams.page && vm.stateParams.item) {
      vm.searchPage = vm.stateParams.page;
      vm.searchItem = vm.stateParams.item;
      vm.searchPageWithDetailPopup();
    }

    // 검색창 포커스
    if (!vm.stateParams.keyword) {
      vm.searchFocus = true;
    }

    /**
     * 프로젝트 페이지로 돌아가기
     */
    if (vm.stateParams.backProject) {
      vm.showbackProject = true;
    }

  } // SearchController
})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('UserMyroomController', UserMyroomController);

  UserMyroomController.$inject = [
    '$rootScope',
    '$scope',
    '$state',
    'ApiService',
    'UserProfile',
    'Upload',
    '$uibModal',
    '$timeout',
    '$window',
    '$cookies',
    'ConfirmService',
    'ToastService',
    'AuthenticationService'];

  function UserMyroomController(
    $rootScope,
    $scope,
    $state,
    ApiService,
    UserProfile,
    Upload,
    $uibModal,
    $timeout,
    $window,
    $cookies,
    ConfirmService,
    ToastService,
    AuthenticationService) {

    var vm = this;

    /**************************************************************************
     * Init & Setting
     **************************************************************************/
    vm.currentUser  = $rootScope.globals.currentUser;
    vm.userProfile = UserProfile || [];
    vm.userProfileImage = $rootScope.globals.currentUser.profileImage || '/static/images/noimage-userprofile.jpg';
    vm.currentPage  = 1;
    vm.projectList  = [];


    /**************************************************************************
     * Functions
     * 유저 프로젝트
     **************************************************************************/

    /**
     * 유저 프로젝트 페이지
     */
    vm.pageChanged = function() {
      ApiService.Project.getMyProjects(vm.currentPage).then(function (data) {
        vm.projectList = data;
      }, function() {
        vm.projectList = [];
      });
    }

    /**
     * 차트 삭제
     */
    vm.deleteItem = function(itemId) {
      ConfirmService.open('경고', '해당 게시물을 정말 삭제 하시겠습니까?', '삭제', '취소', function () {
        ApiService.Project.deleteItem(itemId).then(function (state) {
          if (state == true) {
            vm.pageChanged();
          }
        });
      });
    }

    /**
     * 차트 수정
     */
    vm.editItem = function(itemId) {
      $state.go('project-edit', {
        editProjectId: itemId
      });
    }


    /**************************************************************************
     * Functions
     * 유저 프로필
     **************************************************************************/

    // 프로필 수정
    vm.editProfile = function (type, editField) {
      if (editField == 'email') {
        alert('아이디변경은 오류가 발생하여 확인중 입니다.');
        return;
      }
      AuthenticationService.EditProfilePopup(type, editField, function(response, params) {});
    }

    // 프로필 이미지 수정
    vm.editProfileImage = function(file) {
      var isModified = vm.userProfileImage != '/static/images/noimage-userprofile.jpg' ? true : false;
      var method = isModified ? 'PUT': 'POST';
      var profileImageId = $rootScope.globals.currentUser.profileImageId;
      var url = isModified ? '/api/profile-image/' + profileImageId : '/api/profile-image';
      var data = {
        user: vm.userProfile.email,
        image: file
      };

      if (isModified) {
        data = {
          id: profileImageId,
          user: vm.userProfile.email,
          image: file
        };
      }

      file.upload = Upload.upload({
        method: method,
        url: url,
        headers: {
          'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
        },
        data: data
      });

      file.upload.then(function (response) {
        $timeout(function () {
          file.result = response.data;
          vm.userProfileImage = response.data.image;
          AuthenticationService.UpdateCredentials();
          ToastService.show({ text: '저장되었습니다.', type: 'info' });
        });
      }, function (response) {
        if (response.status > 0) {
          console.log(response);
          vm.errorMsg = response.status + ': ' + response.data;
        }
      }, function (evt) {});
    }

    /**************************************************************************
     * Onload & events
     * 페이지 로딩시 실행
     **************************************************************************/

    vm.pageChanged();

  } // UserMyroomController
})();

(function () {
  'use strict';

  angular
    .module('daisy.controllers')
    .controller('UserPasswordResetConfirmController', UserPasswordResetConfirmController);

  UserPasswordResetConfirmController.$inject = [
    '$rootScope',
    '$scope',
    '$state',
    '$stateParams',
    'UtilService',
    'ApiService'];

  function UserPasswordResetConfirmController(
    $rootScope,
    $scope,
    $state,
    $stateParams,
    UtilService,
    ApiService) {

    var vm = this;

    /**************************************************************************
     * Init & Setting
     **************************************************************************/

    vm.stateParams = $stateParams;


    /**************************************************************************
     * Functions
     **************************************************************************/

    vm.resetConfirm = function () {
      if (!vm.newPassword) return;

      var params = {
        uid: vm.stateParams.uid,
        token: vm.stateParams.token,
        new_password: vm.newPassword
      }
      ApiService.AuthData.resetPasswordConfirm(params).then(function (response) {
        console.log(response);
        alert('비밀번호가 정상적으로 변경 되었습니다. 홈에서 로그인 해주세요');
        UtilService.navigation.path('/');
      }, function (error) {
        console.log(error);
      });
    };



    /**************************************************************************
     * Onload & events
     * 페이지 로딩시 실행
     **************************************************************************/



  } // UserPasswordResetConfirmController
})();

(function () {
'use strict';

  angular.module('daisy.directives').directive('popoverClose', [
    '$rootScope',
    '$timeout',
    'lodash',

    function (
      $rootScope,
      $timeout,
      _) {

    return {
      scope: {
        excludeClass: '@'
      },
      link: function(scope, element, attrs) {
        var trigger = document.getElementsByClassName('trigger');

        function closeTrigger(i) {
          $timeout(function(){
            angular.element(trigger[i]).triggerHandler('click');
            $timeout(function(){
              angular.element(trigger[i]).removeClass('trigger');
            });
          });
        }

        element.on('click', function(event){
          var etarget = angular.element(event.target);
          var tlength = trigger.length;
          var popover = document.getElementsByClassName('popover');

          if (tlength > 1 && popover.length > 1) {
            _.forEach(trigger, function(value, index) {
              if (value != etarget[0]) {
                closeTrigger(index);
              }
            });
          }

          if(!etarget.hasClass('trigger') && !etarget.hasClass(scope.excludeClass)) {
            if (popover.length > 0) {
              for(var i=0; i<tlength; i++) {
                closeTrigger(i);
              }
            }
          }
        });
      }
    };
  }]);

  angular.module('daisy.directives').directive('popoverElem', [
    '$rootScope',

    function (
      $rootScope) {

    return {
      scope: {
        excludeClass: '@'
      },
      link: function(scope, element, attrs) {
        element.on('click', function(){
          element.addClass('trigger');
        });
      }
    };
  }]);

})();

(function () {
'use strict';

angular.module('daisy.directives').directive('fileUploader', [
  '$rootScope',
  'ToastService',

  function (
    $rootScope,
    ToastService) {
      
  return {
    restrict: 'E',
    link: function (scope, elem) {
      var $input;

      elem[0].style.display = 'none';

      scope.$on('file-uploader:click', function (ev, params) {
        elem.html('');

        params = params || {};

        $input = angular.element('<input type="file"' + (params.accept ? (' accept="' + params.accept + '"') : '') + '>');
        $input.on('change', function (ev) {
          if (! ev.target.files[0]) return;

          var file = ev.target.files[0],
              size = file.size,
              dataType = file.name.match(/([^.]*$)/)[0];

          var reader = new FileReader();

          switch (params.readAs) {
            case 'dataURL':
              reader.onload = onLoad;
              reader.readAsDataURL(file);
              break;

            default:
              if (size > 5 * 1048576)
                return ToastService.show({ text: '파일 업로드는 5MB 이하만 가능합니다.', type: 'warning' });

              if (dataType == "xls" || dataType == "xlsx"){
                reader.onload = handleExcelFile;
                reader.readAsArrayBuffer(file);
              } else if(dataType == "json") {
                reader.onload = onReadAsArrayBuffer;
                reader.readAsArrayBuffer(file);
              } else {
                reader.onload = onReadAsArrayBuffer;
                reader.readAsArrayBuffer(file);
              }
              break;
          }

          function onReadAsArrayBuffer(e) {
            var fileSize = Math.min(size, 512),
                str = String.fromCharCode.apply(null, new Uint8Array(reader.result, 0, fileSize)),
                charset = 'euc-kr',
                detect = jschardet.detect(str);
                if (detect.confidence >= 0.7) {
                  charset = jschardet.detect(str).encoding;
                }

            reader.onload = onLoad;
            reader.readAsText(file, charset.toLowerCase());
          }

          function handleExcelFile(e) {
            var data = e.target.result;
            var arr = fixdata(data);
            var workbook, oXLS;

            oXLS = XLSX;

            workbook = oXLS.read(btoa(arr), {type: 'base64'});

            var Sheet1 = workbook.Sheets[workbook.SheetNames[0]];
            data = oXLS.utils.sheet_to_json(Sheet1, {header:1});
            $rootScope.$broadcast('file-uploader:loaded', data, file.name);
          }

          function fixdata(data) {
            var o = "", l = 0, w = 10240;
            for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));
            o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));
            return o;
          }

          function onLoad() {
            $rootScope.$broadcast('file-uploader:loaded', reader.result, file.name);
          }
        });
        elem.html($input);

        $input.click();
      });
    }
  };
}]);

})();

(function () {
'use strict';

  angular.module('daisy.directives').directive('focusMe', [
    '$parse',
    '$timeout',

    function (
      $parse,
      $timeout) {

    return {
      link: function(scope, element, attrs) {
        var model = $parse(attrs.focusMe);
        scope.$watch(model, function(value) {
          if(value === true) {
            $timeout(function() {
              element[0].focus();
            });
          }
        });
        element.bind('blur', function() {
          scope.$apply(model.assign(scope, false));
        });
      }
    };
  }]);

})();

// 사용 안함.
(function () {

'use strict';

angular.module('daisy.directives').directive('hotTableContainer', [
  'ApiService',
  '$compile',
  '$timeout',
  '$window',
  '$document',

  function (
    ApiService,
    $compile,
    $timeout,
    $window,
    $document) {

  return {
    restrict: 'A',
    link: function (scope, elem, attrs) {
      var $elem = angular.element(elem);

      render();
      scope.$on('hot-table-container:render', render);
      scope.$on('hot-table-container:resize', resize);
      scope.$on('hot-table-resizeParents', resizeParents);

      var fullHeightSelector = attrs.fullHeightSelector,
          bodyOffsetSelector = attrs.bodyOffsetSelector,
          contentOffsetSelector = attrs.contentOffsetSelector;

      if (fullHeightSelector && bodyOffsetSelector) {
        $window.addEventListener('resize', resize);
        $timeout(resize, 0);
      }

      function render(ev, id) {
        if (ev && id && elem[0].id !== id)
          return;

        $timeout(function () {
          var hotTableAttrs = ['hotId', 'settings', 'datarows', 'readOnly'];
          var hotTable = '<hot-table ' + hotTableAttrs.map(function (attr) {
            return attrs[attr] ? attr.replace(/([A-Z])/g, '-$1').toLowerCase() + '="' + attrs[attr] + '"' : '';
          }).join(' ') + '></hot-table>';

          $compile(hotTable)(scope, function (compiled) {
            $elem.html(compiled);
          });
        }, 10);
      }

      function resize() {
        console.log('resize');
        var fullHeight = angular.element(fullHeightSelector).outerHeight(),
            bodyOffset = angular.element(bodyOffsetSelector).outerHeight(),
            contentOffset = contentOffsetSelector.split(',').reduce(function (offset, elem) { offset += angular.element(elem).outerHeight(); return offset; }, 0);

        $elem.height(fullHeight - bodyOffset - contentOffset);
      }

      function resizeParents() {
        $timeout(function () {
          $elem.width($elem.parents().width() + 'px');
          $elem.height($elem.parents().height() + 'px');
        }, 10);
      }
    }
  };
}]);

})();

(function () {
'use strict';

  angular.module('daisy.directives').directive('navbar', [
    '$rootScope',
    '$location',
    '$cookieStore',
    '$http',
    '$state',
    '$uibModal',
    'AuthenticationService',

    function (
      $rootScope,
      $location,
      $cookieStore,
      $http,
      $state,
      $uibModal,
      AuthenticationService) {

    return {
      restrict: 'A',
      link: function (scope, elem) {
        scope.isUser = false;
        scope.username = '';
        if ($rootScope.globals.currentUser) {
          scope.username = $rootScope.globals.currentUser.username;
          scope.isUser = true;
        }

        scope.newProject = function() {
          $uibModal.open({
            templateUrl: 'static/templates/modals/project-new.html',
            controller: ['$uibModalInstance', function ($uibModalInstance) {
              var modal = this;

              // 파일 업로드
              modal.uploadFile = function () {
                if (!$rootScope.globals.currentUser) {
                  scope.login();
                  $uibModalInstance.dismiss('cancel');
                  return;
                }
                $state.go('project-new', {uploadFile: true});
                $rootScope.$broadcast('file-uploader:click', { accept: '.csv, .tsv, .xls, .xlsx, .json' });
                $uibModalInstance.dismiss('cancel');
              };

              modal.goSearch = function () {
                $state.go('search');
                $uibModalInstance.dismiss('cancel');
              }

              modal.close = function () { $uibModalInstance.dismiss('cancel'); };
            }],
            controllerAs: 'Modal',
            size: 'sm'
          }).result.then(function (data) {
            //
          });
        }

        scope.login = function() {
          AuthenticationService.LoginPopup(function(response) {
            if(response.success && response.type == 'login') {
              scope.username = $rootScope.globals.currentUser.username;
              scope.isUser = true;
            }
          });
        }

        scope.logout = function() {
          AuthenticationService.ClearCredentials();
          scope.username = '';
          scope.isUser = false;
          $location.path('/');
        }
      },
      templateUrl: "static/templates/partials/navbar.html"
    };
  }]);

})();

/**************************************************************************
 * @Directive
 * 시각화 그리기
 **************************************************************************/

(function (ng, NJ) {

'use strict';

ng.module('daisy.directives').directive('njVisualization', [
  '$rootScope',
  '$timeout',
  'AppConstants',
  'ApiService',
  'UtilService',
  'EditorActions',
  'DataFilterService',

  function (
    $rootScope,
    $timeout,
    AppConstants,
    ApiService,
    UtilService,
    EditorActions,
    DataFilterService) {

  return {
    restrict: 'E',
    templateNamespace: 'svg',
    scope: {
      alias: '=alias',
      item: '=item',
      viewItem: '=viewItem',
      itemId: '=itemId',
      data: '=data',
      filterData: '=filterData',
      style: '=style'
    },
    link: function ($scope, elem) {
      var goRender, _item;
      var renderDelay = 1200;
      var defaultStyle = { width: 800, height: 600, margin: { top: 70, right: 50, bottom: 70, left: 50 } };

      /**
       * 데이터로 그리기
       */
      function renderByData(data, alias) {
        $rootScope.$broadcast('open-loadingbar', { itemId: $scope.itemId });
        renderNJ(data, alias);
      };

      /**
       * 아이템 데이터로 그리기
       */
      function renderByItem(item) {
        $rootScope.$broadcast('open-loadingbar', { itemId: $scope.itemId });
        DataFilterService.renderData(item).then(function(results) {
          saveVisualizeData(results.data, item.itemId);
          renderNJ(results.data, item.alias);
        });
      };

      /**
       * 시각화 렌더링
       */
      function renderNJ(data, alias) {
        if (data.length <= AppConstants.sampleDataLimit) { renderDelay = 200 };

        $timeout.cancel(goRender);
        goRender = $timeout(function() {
          var table = new NJ.Vtr.Table(data.slice(0, 500));
          var header = NJ.Vtr.Match.getByAlias(alias).getVisualizationHeader(table);
          var model = NJ.Model.findModel(alias);
          var setProperties = angular.copy(model.properties);

          setProperties.header = angular.extend({}, setProperties.header, header);

          // date 타입 검사
          var format = table.columns.filter(function(d) {
            return d.format ? d.format : null;
          });
          format = format.length > 0 ? format[0].format : '';

          setProperties.timeFormat = format;

          if (model.name === 'choropleth-seoul') {
            setProperties.geometryUrl = AppConstants.config.staticUrl + 'geometry-seoul.json';
          }

          DataFilterService.getIndexedTable(data).then(function (results) {
            // 스캐터 차트인경우 radius값 추가
            if (alias == 'scatterplot' && !setProperties.header.radius) {
              setProperties.header.radius = 'radius';
              results.data = _.map(results.data, function (d) {
                d.radius = 1;
                return d;
              });
            }

            // 갤러리에서 집계
            // TODO : 경우의수가 너무 많음, 통일, 정리 필요!!
            if (alias == 'bar' && $scope.viewItem) {
              if ($scope.viewItem.data.metadata.dataStatisticsColumn) {
                var _type = $scope.viewItem.data.metadata.dataStatisticsColumn.dataStatisticsType;
                var _type_text = '';

                if (_type == 'sum') _type_text = '합산';
                if (_type == 'avg') _type_text = '평균';
                if (_type == 'min') _type_text = '최소';
                if (_type == 'max') _type_text = '최대';
                if (_type == 'med') _type_text = '중간값';
                if (_type == 'std') _type_text = '분산';
                if (_type == 'fre') _type_text = '빈도수';

                setProperties.header.x = $scope.viewItem.data.metadata.dataStatisticsColumn.columnTitle;
                setProperties.header.categories = [$scope.viewItem.data.metadata.dataStatisticsColumn.columnTitle + '(' + _type_text + ')'];

              }
            }

            // 집계인경우 & 바차트인경우
            if (alias == 'bar' && $scope.item && $scope.item.dataStatisticsColumn) {
              var _type = $scope.item.dataStatisticsColumn.dataStatisticsType;
              var _type_text = '';

              if (_type == 'sum') _type_text = '합산';
              if (_type == 'avg') _type_text = '평균';
              if (_type == 'min') _type_text = '최소';
              if (_type == 'max') _type_text = '최대';
              if (_type == 'med') _type_text = '중간값';
              if (_type == 'std') _type_text = '분산';
              if (_type == 'fre') _type_text = '빈도수';

              setProperties.header.x = $scope.item.dataStatisticsColumn.columnTitle;
              setProperties.header.categories = [$scope.item.dataStatisticsColumn.columnTitle + '(' + _type_text + ')'];
            }

            $(elem).html('');

            var _style = ng.extend({}, defaultStyle, $scope.style);
            var njv = new NJ.Visualization(elem[0], _style);

            // 비율 맞추기
            var _stageWidth = _style.width;
            var _stageHeight = _style.height;
            var njv_width = njv.width;
            var njv_height = njv.height;

            if(_stageWidth > njv_width){
             njv_width = _stageWidth;
             njv_height = _stageWidth * njv_height/njv_width;
            }

            $(elem).height(njv_height);

            // 렌더링
            njv.bindData('raw', results.data, { dataType: 'json' });
            njv.setModel(alias);
            njv.setProperties(setProperties);
            njv.render();

            $rootScope.$broadcast('close-loadingbar', { itemId: $scope.itemId });
          }, function (error) {
            console.log(error);
            alert(error);

            $rootScope.$broadcast('close-loadingbar', { itemId: $scope.itemId });
            return;
          });
        }, renderDelay);
      };

      /**
       * 데이터 저장
       */
      function saveVisualizeData(data, itemId) {
        EditorActions.updateItemVisualizeData({
          itemId: itemId,
          data: data
        });
      };

      /**
       * 시각화 새로고침
       */
      $scope.$on('refresh-viz', function(event, args) {
        if (args.itemId != $scope.itemId) { return; }
        renderByItem($scope.item);
      });


      // 아이템이 있다면 아이템 데이터로 렌더링
      if ($scope.item) {
        renderByItem($scope.item);
      } else {
        renderByData($scope.data, $scope.alias);
      }

    }
  };
}]);

})(angular, NJ);

(function () {
'use strict';

  angular.module('daisy.directives').directive('stringToNumber', [
    '$rootScope',

    function (
      $rootScope) {

    return {
      require: 'ngModel',
      link: function (scope, element, attrs, ngModel) {
        ngModel.$parsers.push(function(value) {
        return '' + value;
      });
      ngModel.$formatters.push(function(value) {
        return parseFloat(value);
      });
      }
    };
  }]);

})();

this.j$ = this.jStat = (function(Math, undefined) {

// For quick reference.
var concat = Array.prototype.concat;
var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

// Calculate correction for IEEE error
// TODO: This calculation can be improved.
function calcRdx(n, m) {
  var val = n > m ? n : m;
  return Math.pow(10,
                  17 - ~~(Math.log(((val > 0) ? val : -val)) * Math.LOG10E));
}


var isArray = Array.isArray || function isArray(arg) {
  return toString.call(arg) === '[object Array]';
};


function isFunction(arg) {
  return toString.call(arg) === '[object Function]';
}


function isNumber(arg) {
  return typeof arg === 'number' && arg === arg;
}


// Converts the jStat matrix to vector.
function toVector(arr) {
  return concat.apply([], arr);
}


// The one and only jStat constructor.
function jStat() {
  return new jStat._init(arguments);
}


// TODO: Remove after all references in src files have been removed.
jStat.fn = jStat.prototype;


// By separating the initializer from the constructor it's easier to handle
// always returning a new instance whether "new" was used or not.
jStat._init = function _init(args) {
  var i;

  // If first argument is an array, must be vector or matrix.
  if (isArray(args[0])) {
    // Check if matrix.
    if (isArray(args[0][0])) {
      // See if a mapping function was also passed.
      if (isFunction(args[1]))
        args[0] = jStat.map(args[0], args[1]);
      // Iterate over each is faster than this.push.apply(this, args[0].
      for (i = 0; i < args[0].length; i++)
        this[i] = args[0][i];
      this.length = args[0].length;

    // Otherwise must be a vector.
    } else {
      this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];
      this.length = 1;
    }

  // If first argument is number, assume creation of sequence.
  } else if (isNumber(args[0])) {
    this[0] = jStat.seq.apply(null, args);
    this.length = 1;

  // Handle case when jStat object is passed to jStat.
  } else if (args[0] instanceof jStat) {
    // Duplicate the object and pass it back.
    return jStat(args[0].toArray());

  // Unexpected argument value, return empty jStat object.
  // TODO: This is strange behavior. Shouldn't this throw or some such to let
  // the user know they had bad arguments?
  } else {
    this[0] = [];
    this.length = 1;
  }

  return this;
};
jStat._init.prototype = jStat.prototype;
jStat._init.constructor = jStat;


// Utility functions.
// TODO: for internal use only?
jStat.utils = {
  calcRdx: calcRdx,
  isArray: isArray,
  isFunction: isFunction,
  isNumber: isNumber,
  toVector: toVector
};


// Easily extend the jStat object.
// TODO: is this seriously necessary?
jStat.extend = function extend(obj) {
  var i, j;

  if (arguments.length === 1) {
    for (j in obj)
      jStat[j] = obj[j];
    return this;
  }

  for (i = 1; i < arguments.length; i++) {
    for (j in arguments[i])
      obj[j] = arguments[i][j];
  }

  return obj;
};


// Returns the number of rows in the matrix.
jStat.rows = function rows(arr) {
  return arr.length || 1;
};


// Returns the number of columns in the matrix.
jStat.cols = function cols(arr) {
  return arr[0].length || 1;
};


// Returns the dimensions of the object { rows: i, cols: j }
jStat.dimensions = function dimensions(arr) {
  return {
    rows: jStat.rows(arr),
    cols: jStat.cols(arr)
  };
};


// Returns a specified row as a vector
jStat.row = function row(arr, index) {
  return arr[index];
};


// Returns the specified column as a vector
jStat.col = function cols(arr, index) {
  var column = new Array(arr.length);
  for (var i = 0; i < arr.length; i++)
    column[i] = [arr[i][index]];
  return column;
};


// Returns the diagonal of the matrix
jStat.diag = function diag(arr) {
  var nrow = jStat.rows(arr);
  var res = new Array(nrow);
  for (var row = 0; row < nrow; row++)
    res[row] = [arr[row][row]];
  return res;
};


// Returns the anti-diagonal of the matrix
jStat.antidiag = function antidiag(arr) {
  var nrow = jStat.rows(arr) - 1;
  var res = new Array(nrow);
  for (var i = 0; nrow >= 0; nrow--, i++)
    res[i] = [arr[i][nrow]];
  return res;
};

// Transpose a matrix or array.
jStat.transpose = function transpose(arr) {
  var obj = [];
  var objArr, rows, cols, j, i;

  // Make sure arr is in matrix format.
  if (!isArray(arr[0]))
    arr = [arr];

  rows = arr.length;
  cols = arr[0].length;

  for (i = 0; i < cols; i++) {
    objArr = new Array(rows);
    for (j = 0; j < rows; j++)
      objArr[j] = arr[j][i];
    obj.push(objArr);
  }

  // If obj is vector, return only single array.
  return obj.length === 1 ? obj[0] : obj;
};


// Map a function to an array or array of arrays.
// "toAlter" is an internal variable.
jStat.map = function map(arr, func, toAlter) {
  var row, nrow, ncol, res, col;

  if (!isArray(arr[0]))
    arr = [arr];

  nrow = arr.length;
  ncol = arr[0].length;
  res = toAlter ? arr : new Array(nrow);

  for (row = 0; row < nrow; row++) {
    // if the row doesn't exist, create it
    if (!res[row])
      res[row] = new Array(ncol);
    for (col = 0; col < ncol; col++)
      res[row][col] = func(arr[row][col], row, col);
  }

  return res.length === 1 ? res[0] : res;
};


// Cumulatively combine the elements of an array or array of arrays using a function.
jStat.cumreduce = function cumreduce(arr, func, toAlter) {
  var row, nrow, ncol, res, col;

  if (!isArray(arr[0]))
    arr = [arr];

  nrow = arr.length;
  ncol = arr[0].length;
  res = toAlter ? arr : new Array(nrow);

  for (row = 0; row < nrow; row++) {
    // if the row doesn't exist, create it
    if (!res[row])
      res[row] = new Array(ncol);
    if (ncol > 0)
      res[row][0] = arr[row][0];
    for (col = 1; col < ncol; col++)
      res[row][col] = func(res[row][col-1], arr[row][col]);
  }
  return res.length === 1 ? res[0] : res;
};


// Destructively alter an array.
jStat.alter = function alter(arr, func) {
  return jStat.map(arr, func, true);
};


// Generate a rows x cols matrix according to the supplied function.
jStat.create = function  create(rows, cols, func) {
  var res = new Array(rows);
  var i, j;

  if (isFunction(cols)) {
    func = cols;
    cols = rows;
  }

  for (i = 0; i < rows; i++) {
    res[i] = new Array(cols);
    for (j = 0; j < cols; j++)
      res[i][j] = func(i, j);
  }

  return res;
};


function retZero() { return 0; }


// Generate a rows x cols matrix of zeros.
jStat.zeros = function zeros(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retZero);
};


function retOne() { return 1; }


// Generate a rows x cols matrix of ones.
jStat.ones = function ones(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retOne);
};


// Generate a rows x cols matrix of uniformly random numbers.
jStat.rand = function rand(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, Math.random);
};


function retIdent(i, j) { return i === j ? 1 : 0; }


// Generate an identity matrix of size row x cols.
jStat.identity = function identity(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retIdent);
};


// Tests whether a matrix is symmetric
jStat.symmetric = function symmetric(arr) {
  var issymmetric = true;
  var size = arr.length;
  var row, col;

  if (arr.length !== arr[0].length)
    return false;

  for (row = 0; row < size; row++) {
    for (col = 0; col < size; col++)
      if (arr[col][row] !== arr[row][col])
        return false;
  }

  return true;
};


// Set all values to zero.
jStat.clear = function clear(arr) {
  return jStat.alter(arr, retZero);
};


// Generate sequence.
jStat.seq = function seq(min, max, length, func) {
  if (!isFunction(func))
    func = false;

  var arr = [];
  var hival = calcRdx(min, max);
  var step = (max * hival - min * hival) / ((length - 1) * hival);
  var current = min;
  var cnt;

  // Current is assigned using a technique to compensate for IEEE error.
  // TODO: Needs better implementation.
  for (cnt = 0;
       current <= max;
       cnt++, current = (min * hival + step * hival * cnt) / hival) {
    arr.push((func ? func(current, cnt) : current));
  }

  return arr;
};


// TODO: Go over this entire implementation. Seems a tragic waste of resources
// doing all this work. Instead, and while ugly, use new Function() to generate
// a custom function for each static method.

// Quick reference.
var jProto = jStat.prototype;

// Default length.
jProto.length = 0;

// For internal use only.
// TODO: Check if they're actually used, and if they are then rename them
// to _*
jProto.push = Array.prototype.push;
jProto.sort = Array.prototype.sort;
jProto.splice = Array.prototype.splice;
jProto.slice = Array.prototype.slice;


// Return a clean array.
jProto.toArray = function toArray() {
  return this.length > 1 ? slice.call(this) : slice.call(this)[0];
};


// Map a function to a matrix or vector.
jProto.map = function map(func, toAlter) {
  return jStat(jStat.map(this, func, toAlter));
};


// Cumulatively combine the elements of a matrix or vector using a function.
jProto.cumreduce = function cumreduce(func, toAlter) {
  return jStat(jStat.cumreduce(this, func, toAlter));
};


// Destructively alter an array.
jProto.alter = function alter(func) {
  jStat.alter(this, func);
  return this;
};


// Extend prototype with methods that have no argument.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function(func) {
      var self = this,
      results;
      // Check for callback.
      if (func) {
        setTimeout(function() {
          func.call(self, jProto[passfunc].call(self));
        });
        return this;
      }
      results = jStat[passfunc](this);
      return isArray(results) ? jStat(results) : results;
    };
  })(funcs[i]);
})('transpose clear symmetric rows cols dimensions diag antidiag'.split(' '));


// Extend prototype with methods that have one argument.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function(index, func) {
      var self = this;
      // check for callback
      if (func) {
        setTimeout(function() {
          func.call(self, jProto[passfunc].call(self, index));
        });
        return this;
      }
      return jStat(jStat[passfunc](this, index));
    };
  })(funcs[i]);
})('row col'.split(' '));


// Extend prototype with simple shortcut methods.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = new Function(
        'return jStat(jStat.' + passfunc + '.apply(null, arguments));');
  })(funcs[i]);
})('create zeros ones rand identity'.split(' '));


// Exposing jStat.
return jStat;

}(Math));
(function(jStat, Math) {

var isFunction = jStat.utils.isFunction;

// Ascending functions for sort
function ascNum(a, b) { return a - b; }

function clip(arg, min, max) {
  return Math.max(min, Math.min(arg, max));
}


// sum of an array
jStat.sum = function sum(arr) {
  var sum = 0;
  var i = arr.length;
  var tmp;
  while (--i >= 0)
    sum += arr[i];
  return sum;
};


// sum squared
jStat.sumsqrd = function sumsqrd(arr) {
  var sum = 0;
  var i = arr.length;
  while (--i >= 0)
    sum += arr[i] * arr[i];
  return sum;
};


// sum of squared errors of prediction (SSE)
jStat.sumsqerr = function sumsqerr(arr) {
  var mean = jStat.mean(arr);
  var sum = 0;
  var i = arr.length;
  var tmp;
  while (--i >= 0) {
    tmp = arr[i] - mean;
    sum += tmp * tmp;
  }
  return sum;
};


// product of an array
jStat.product = function product(arr) {
  var prod = 1;
  var i = arr.length;
  while (--i >= 0)
    prod *= arr[i];
  return prod;
};


// minimum value of an array
jStat.min = function min(arr) {
  var low = arr[0];
  var i = 0;
  while (++i < arr.length)
    if (arr[i] < low)
      low = arr[i];
  return low;
};


// maximum value of an array
jStat.max = function max(arr) {
  var high = arr[0];
  var i = 0;
  while (++i < arr.length)
    if (arr[i] > high)
      high = arr[i];
  return high;
};


// mean value of an array
jStat.mean = function mean(arr) {
  return jStat.sum(arr) / arr.length;
};


// mean squared error (MSE)
jStat.meansqerr = function meansqerr(arr) {
  return jStat.sumsqerr(arr) / arr.length;
};


// geometric mean of an array
jStat.geomean = function geomean(arr) {
  return Math.pow(jStat.product(arr), 1 / arr.length);
};


// median of an array
jStat.median = function median(arr) {
  var arrlen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  // check if array is even or odd, then return the appropriate
  return !(arrlen & 1)
    ? (_arr[(arrlen / 2) - 1 ] + _arr[(arrlen / 2)]) / 2
    : _arr[(arrlen / 2) | 0 ];
};


// cumulative sum of an array
jStat.cumsum = function cumsum(arr) {
  return jStat.cumreduce(arr, function (a, b) { return a + b; });
};


// cumulative product of an array
jStat.cumprod = function cumprod(arr) {
  return jStat.cumreduce(arr, function (a, b) { return a * b; });
};


// successive differences of a sequence
jStat.diff = function diff(arr) {
  var diffs = [];
  var arrLen = arr.length;
  var i;
  for (i = 1; i < arrLen; i++)
    diffs.push(arr[i] - arr[i - 1]);
  return diffs;
};


// mode of an array
// if there are multiple modes of an array, return all of them
// is this the appropriate way of handling it?
jStat.mode = function mode(arr) {
  var arrLen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  var count = 1;
  var maxCount = 0;
  var numMaxCount = 0;
  var mode_arr = [];
  var i;

  for (i = 0; i < arrLen; i++) {
    if (_arr[i] === _arr[i + 1]) {
      count++;
    } else {
      if (count > maxCount) {
        mode_arr = [_arr[i]];
        maxCount = count;
        numMaxCount = 0;
      }
      // are there multiple max counts
      else if (count === maxCount) {
        mode_arr.push(_arr[i]);
        numMaxCount++;
      }
      // resetting count for new value in array
      count = 1;
    }
  }

  return numMaxCount === 0 ? mode_arr[0] : mode_arr;
};


// range of an array
jStat.range = function range(arr) {
  return jStat.max(arr) - jStat.min(arr);
};

// variance of an array
// flag = true indicates sample instead of population
jStat.variance = function variance(arr, flag) {
  return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
};


// standard deviation of an array
// flag = true indicates sample instead of population
jStat.stdev = function stdev(arr, flag) {
  return Math.sqrt(jStat.variance(arr, flag));
};


// mean deviation (mean absolute deviation) of an array
jStat.meandev = function meandev(arr) {
  var devSum = 0;
  var mean = jStat.mean(arr);
  var i;
  for (i = arr.length - 1; i >= 0; i--)
    devSum += Math.abs(arr[i] - mean);
  return devSum / arr.length;
};


// median deviation (median absolute deviation) of an array
jStat.meddev = function meddev(arr) {
  var devSum = 0;
  var median = jStat.median(arr);
  var i;
  for (i = arr.length - 1; i >= 0; i--)
    devSum += Math.abs(arr[i] - median);
  return devSum / arr.length;
};


// coefficient of variation
jStat.coeffvar = function coeffvar(arr) {
  return jStat.stdev(arr) / jStat.mean(arr);
};


// quartiles of an array
jStat.quartiles = function quartiles(arr) {
  var arrlen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  return [
    _arr[ Math.round((arrlen) / 4) - 1 ],
    _arr[ Math.round((arrlen) / 2) - 1 ],
    _arr[ Math.round((arrlen) * 3 / 4) - 1 ]
  ];
};


// Arbitary quantiles of an array. Direct port of the scipy.stats
// implementation by Pierre GF Gerard-Marchant.
jStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {
  var sortedArray = arr.slice().sort(ascNum);
  var quantileVals = [quantilesArray.length];
  var n = arr.length;
  var i, p, m, aleph, k, gamma;

  if (typeof alphap === 'undefined')
    alphap = 3 / 8;
  if (typeof betap === 'undefined')
    betap = 3 / 8;

  for (i = 0; i < quantilesArray.length; i++) {
    p = quantilesArray[i];
    m = alphap + p * (1 - alphap - betap);
    aleph = n * p + m;
    k = Math.floor(clip(aleph, 1, n - 1));
    gamma = clip(aleph - k, 0, 1);
    quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];
  }

  return quantileVals;
};


// The percentile rank of score in a given array. Returns the percentage
// of all values in the input array that are less than (kind='strict') or
// less or equal than (kind='weak') score. Default is weak.
jStat.percentileOfScore = function percentileOfScore(arr, score, kind) {
  var counter = 0;
  var len = arr.length;
  var strict = false;
  var value, i;

  if (kind === 'strict')
    strict = true;

  for (i = 0; i < len; i++) {
    value = arr[i];
    if ((strict && value < score) ||
        (!strict && value <= score)) {
      counter++;
    }
  }

  return counter / len;
};


// Histogram (bin count) data
jStat.histogram = function histogram(arr, bins) {
  var first = jStat.min(arr);
  var binCnt = bins || 4;
  var binWidth = (jStat.max(arr) - first) / binCnt;
  var len = arr.length;
  var bins = [];
  var i;

  for (i = 0; i < binCnt; i++)
    bins[i] = 0;
  for (i = 0; i < len; i++)
    bins[Math.min(Math.floor(((arr[i] - first) / binWidth)), binCnt - 1)] += 1;

  return bins;
};


// covariance of two arrays
jStat.covariance = function covariance(arr1, arr2) {
  var u = jStat.mean(arr1);
  var v = jStat.mean(arr2);
  var arr1Len = arr1.length;
  var sq_dev = new Array(arr1Len);
  var i;

  for (i = 0; i < arr1Len; i++)
    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);

  return jStat.sum(sq_dev) / (arr1Len - 1);
};


// (pearson's) population correlation coefficient, rho
jStat.corrcoeff = function corrcoeff(arr1, arr2) {
  return jStat.covariance(arr1, arr2) /
      jStat.stdev(arr1, 1) /
      jStat.stdev(arr2, 1);
};

// statistical standardized moments (general form of skew/kurt)
jStat.stanMoment = function stanMoment(arr, n) {
  var mu = jStat.mean(arr);
  var sigma = jStat.stdev(arr);
  var len = arr.length;
  var skewSum = 0;

  for (i = 0; i < len; i++)
    skewSum += Math.pow((arr[i] - mu) / sigma, n);

  return skewSum / arr.length;
};

// (pearson's) moment coefficient of skewness
jStat.skewness = function skewness(arr) {
  return jStat.stanMoment(arr, 3);
};

// (pearson's) (excess) kurtosis
jStat.kurtosis = function kurtosis(arr) {
  return jStat.stanMoment(arr, 4) - 3;
};


var jProto = jStat.prototype;


// Extend jProto with method for calculating cumulative sums and products.
// This differs from the similar extension below as cumsum and cumprod should
// not be run again in the case fullbool === true.
// If a matrix is passed, automatically assume operation should be done on the
// columns.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    // If a matrix is passed, automatically assume operation should be done on
    // the columns.
    jProto[passfunc] = function(fullbool, func) {
      var arr = [];
      var i = 0;
      var tmpthis = this;
      // Assignment reassignation depending on how parameters were passed in.
      if (isFunction(fullbool)) {
        func = fullbool;
        fullbool = false;
      }
      // Check if a callback was passed with the function.
      if (func) {
        setTimeout(function() {
          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
        });
        return this;
      }
      // Check if matrix and run calculations.
      if (this.length > 1) {
        tmpthis = fullbool === true ? this : this.transpose();
        for (; i < tmpthis.length; i++)
          arr[i] = jStat[passfunc](tmpthis[i]);
        return arr;
      }
      // Pass fullbool if only vector, not a matrix. for variance and stdev.
      return jStat[passfunc](this[0], fullbool);
    };
  })(funcs[i]);
})(('cumsum cumprod').split(' '));


// Extend jProto with methods which don't require arguments and work on columns.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    // If a matrix is passed, automatically assume operation should be done on
    // the columns.
    jProto[passfunc] = function(fullbool, func) {
      var arr = [];
      var i = 0;
      var tmpthis = this;
      // Assignment reassignation depending on how parameters were passed in.
      if (isFunction(fullbool)) {
        func = fullbool;
        fullbool = false;
      }
      // Check if a callback was passed with the function.
      if (func) {
        setTimeout(function() {
          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
        });
        return this;
      }
      // Check if matrix and run calculations.
      if (this.length > 1) {
        tmpthis = fullbool === true ? this : this.transpose();
        for (; i < tmpthis.length; i++)
          arr[i] = jStat[passfunc](tmpthis[i]);
        return fullbool === true
            ? jStat[passfunc](jStat.utils.toVector(arr))
            : arr;
      }
      // Pass fullbool if only vector, not a matrix. for variance and stdev.
      return jStat[passfunc](this[0], fullbool);
    };
  })(funcs[i]);
})(('sum sumsqrd sumsqerr product min max mean meansqerr geomean median diff ' +
    'mode range variance stdev meandev meddev coeffvar quartiles histogram ' +
    'skewness kurtosis').split(' '));


// Extend jProto with functions that take arguments. Operations on matrices are
// done on columns.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function() {
      var arr = [];
      var i = 0;
      var tmpthis = this;
      var args = Array.prototype.slice.call(arguments);

      // If the last argument is a function, we assume it's a callback; we
      // strip the callback out and call the function again.
      if (isFunction(args[args.length - 1])) {
        var callbackFunction = args[args.length - 1];
        var argsToPass = args.slice(0, args.length - 1);

        setTimeout(function() {
          callbackFunction.call(tmpthis,
                                jProto[passfunc].apply(tmpthis, argsToPass));
        });
        return this;

      // Otherwise we curry the function args and call normally.
      } else {
        var callbackFunction = undefined;
        var curriedFunction = function curriedFunction(vector) {
          return jStat[passfunc].apply(tmpthis, [vector].concat(args));
        }
      }

      // If this is a matrix, run column-by-column.
      if (this.length > 1) {
        tmpthis = tmpthis.transpose();
        for (; i < tmpthis.length; i++)
          arr[i] = curriedFunction(tmpthis[i]);
        return arr;
      }

      // Otherwise run on the vector.
      return curriedFunction(this[0]);
    };
  })(funcs[i]);
})('quantiles percentileOfScore'.split(' '));

}(this.jStat, Math));
// Special functions //
(function(jStat, Math) {

// Log-gamma function
jStat.gammaln = function gammaln(x) {
  var j = 0;
  var cof = [
    76.18009172947146, -86.50532032941677, 24.01409824083091,
    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5
  ];
  var ser = 1.000000000190015;
  var xx, y, tmp;
  tmp = (y = xx = x) + 5.5;
  tmp -= (xx + 0.5) * Math.log(tmp);
  for (; j < 6; j++)
    ser += cof[j] / ++y;
  return Math.log(2.5066282746310005 * ser / xx) - tmp;
};


// gamma of x
jStat.gammafn = function gammafn(x) {
  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563,
           629.3311553128184, 866.9662027904133, -31451.272968848367,
           -36144.413418691176, 66456.14382024054
  ];
  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192,
           -3107.771671572311, 22538.118420980151, 4755.8462775278811,
           -134659.9598649693, -115132.2596755535];
  var fact = false;
  var n = 0;
  var xden = 0;
  var xnum = 0;
  var y = x;
  var i, z, yi, res, sum, ysq;
  if (y <= 0) {
    res = y % 1 + 3.6e-16;
    if (res) {
      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
      y = 1 - y;
    } else {
      return Infinity;
    }
  }
  yi = y;
  if (y < 1) {
    z = y++;
  } else {
    z = (y -= n = (y | 0) - 1) - 1;
  }
  for (i = 0; i < 8; ++i) {
    xnum = (xnum + p[i]) * z;
    xden = xden * z + q[i];
  }
  res = xnum / xden + 1;
  if (yi < y) {
    res /= yi;
  } else if (yi > y) {
    for (i = 0; i < n; ++i) {
      res *= y;
      y++;
    }
  }
  if (fact) {
    res = fact / res;
  }
  return res;
};


// lower incomplete gamma function, which is usually typeset with a
// lower-case greek gamma as the function symbol
jStat.gammap = function gammap(a, x) {
  return jStat.lowRegGamma(a, x) * jStat.gammafn(a);
};


// The lower regularized incomplete gamma function, usually written P(a,x)
jStat.lowRegGamma = function lowRegGamma(a, x) {
  var aln = jStat.gammaln(a);
  var ap = a;
  var sum = 1 / a;
  var del = sum;
  var b = x + 1 - a;
  var c = 1 / 1.0e-30;
  var d = 1 / b;
  var h = d;
  var i = 1;
  // calculate maximum number of itterations required for a
  var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);
  var an, endval;

  if (x < 0 || a <= 0) {
    return NaN;
  } else if (x < a + 1) {
    for (; i <= ITMAX; i++) {
      sum += del *= x / ++ap;
    }
    return (sum * Math.exp(-x + a * Math.log(x) - (aln)));
  }

  for (; i <= ITMAX; i++) {
    an = -i * (i - a);
    b += 2;
    d = an * d + b;
    c = b + an / c;
    d = 1 / d;
    h *= d * c;
  }

  return (1 - h * Math.exp(-x + a * Math.log(x) - (aln)));
};

// natural log factorial of n
jStat.factorialln = function factorialln(n) {
  return n < 0 ? NaN : jStat.gammaln(n + 1);
};

// factorial of n
jStat.factorial = function factorial(n) {
  return n < 0 ? NaN : jStat.gammafn(n + 1);
};

// combinations of n, m
jStat.combination = function combination(n, m) {
  // make sure n or m don't exceed the upper limit of usable values
  return (n > 170 || m > 170)
      ? Math.exp(jStat.combinationln(n, m))
      : (jStat.factorial(n) / jStat.factorial(m)) / jStat.factorial(n - m);
};


jStat.combinationln = function combinationln(n, m){
  return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);
};


// permutations of n, m
jStat.permutation = function permutation(n, m) {
  return jStat.factorial(n) / jStat.factorial(n - m);
};


// beta function
jStat.betafn = function betafn(x, y) {
  // ensure arguments are positive
  if (x <= 0 || y <= 0)
    return undefined;
  // make sure x + y doesn't exceed the upper limit of usable values
  return (x + y > 170)
      ? Math.exp(jStat.betaln(x, y))
      : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);
};


// natural logarithm of beta function
jStat.betaln = function betaln(x, y) {
  return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);
};


// Evaluates the continued fraction for incomplete beta function by modified
// Lentz's method.
jStat.betacf = function betacf(x, a, b) {
  var fpmin = 1e-30;
  var m = 1;
  var qab = a + b;
  var qap = a + 1;
  var qam = a - 1;
  var c = 1;
  var d = 1 - qab * x / qap;
  var m2, aa, del, h;

  // These q's will be used in factors that occur in the coefficients
  if (Math.abs(d) < fpmin)
    d = fpmin;
  d = 1 / d;
  h = d;

  for (; m <= 100; m++) {
    m2 = 2 * m;
    aa = m * (b - m) * x / ((qam + m2) * (a + m2));
    // One step (the even one) of the recurrence
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin)
      c = fpmin;
    d = 1 / d;
    h *= d * c;
    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));
    // Next step of the recurrence (the odd one)
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin)
      c = fpmin;
    d = 1 / d;
    del = d * c;
    h *= del;
    if (Math.abs(del - 1.0) < 3e-7)
      break;
  }

  return h;
};


// Returns the inverse of the lower regularized inomplete gamma function
jStat.gammapinv = function gammapinv(p, a) {
  var j = 0;
  var a1 = a - 1;
  var EPS = 1e-8;
  var gln = jStat.gammaln(a);
  var x, err, t, u, pp, lna1, afac;

  if (p >= 1)
    return Math.max(100, a + 100 * Math.sqrt(a));
  if (p <= 0)
    return 0;
  if (a > 1) {
    lna1 = Math.log(a1);
    afac = Math.exp(a1 * (lna1 - 1) - gln);
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
    if (p < 0.5)
      x = -x;
    x = Math.max(1e-3,
                 a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
  } else {
    t = 1 - a * (0.253 + a * 0.12);
    if (p < t)
      x = Math.pow(p / t, 1 / a);
    else
      x = 1 - Math.log(1 - (p - t) / (1 - t));
  }

  for(; j < 12; j++) {
    if (x <= 0)
      return 0;
    err = jStat.lowRegGamma(a, x) - p;
    if (a > 1)
      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));
    else
      t = Math.exp(-x + a1 * Math.log(x) - gln);
    u = err / t;
    x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));
    if (x <= 0)
      x = 0.5 * (x + t);
    if (Math.abs(t) < EPS * x)
      break;
  }

  return x;
};


// Returns the error function erf(x)
jStat.erf = function erf(x) {
  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2,
             -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,
             4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,
             1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,
             6.529054439e-9, 5.059343495e-9, -9.91364156e-10,
             -2.27365122e-10, 9.6467911e-11, 2.394038e-12,
             -6.886027e-12, 8.94487e-13, 3.13092e-13,
             -1.12708e-13, 3.81e-16, 7.106e-15,
             -1.523e-15, -9.4e-17, 1.21e-16,
             -2.8e-17];
  var j = cof.length - 1;
  var isneg = false;
  var d = 0;
  var dd = 0;
  var t, ty, tmp, res;

  if (x < 0) {
    x = -x;
    isneg = true;
  }

  t = 2 / (2 + x);
  ty = 4 * t - 2;

  for(; j > 0; j--) {
    tmp = d;
    d = ty * d - dd + cof[j];
    dd = tmp;
  }

  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
  return isneg ? res - 1 : 1 - res;
};


// Returns the complmentary error function erfc(x)
jStat.erfc = function erfc(x) {
  return 1 - jStat.erf(x);
};


// Returns the inverse of the complementary error function
jStat.erfcinv = function erfcinv(p) {
  var j = 0;
  var x, err, t, pp;
  if (p >= 2)
    return -100;
  if (p <= 0)
    return 100;
  pp = (p < 1) ? p : 2 - p;
  t = Math.sqrt(-2 * Math.log(pp / 2));
  x = -0.70711 * ((2.30753 + t * 0.27061) /
                  (1 + t * (0.99229 + t * 0.04481)) - t);
  for (; j < 2; j++) {
    err = jStat.erfc(x) - pp;
    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
  }
  return (p < 1) ? x : -x;
};


// Returns the inverse of the incomplete beta function
jStat.ibetainv = function ibetainv(p, a, b) {
  var EPS = 1e-8;
  var a1 = a - 1;
  var b1 = b - 1;
  var j = 0;
  var lna, lnb, pp, t, u, err, x, al, h, w, afac;
  if (p <= 0)
    return 0;
  if (p >= 1)
    return 1;
  if (a >= 1 && b >= 1) {
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;
    if (p < 0.5)
      x = -x;
    al = (x * x - 3) / 6;
    h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));
    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) *
        (al + 5 / 6 - 2 / (3 * h));
    x = a / (a + b * Math.exp(2 * w));
  } else {
    lna = Math.log(a / (a + b));
    lnb = Math.log(b / (a + b));
    t = Math.exp(a * lna) / a;
    u = Math.exp(b * lnb) / b;
    w = t + u;
    if (p < t / w)
      x = Math.pow(a * w * p, 1 / a);
    else
      x = 1 - Math.pow(b * w * (1 - p), 1 / b);
  }
  afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);
  for(; j < 10; j++) {
    if (x === 0 || x === 1)
      return x;
    err = jStat.ibeta(x, a, b) - p;
    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
    u = err / t;
    x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));
    if (x <= 0)
      x = 0.5 * (x + t);
    if (x >= 1)
      x = 0.5 * (x + t + 1);
    if (Math.abs(t) < EPS * x && j > 0)
      break;
  }
  return x;
};


// Returns the incomplete beta function I_x(a,b)
jStat.ibeta = function ibeta(x, a, b) {
  // Factors in front of the continued fraction.
  var bt = (x === 0 || x === 1) ?  0 :
    Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) -
             jStat.gammaln(b) + a * Math.log(x) + b *
             Math.log(1 - x));
  if (x < 0 || x > 1)
    return false;
  if (x < (a + 1) / (a + b + 2))
    // Use continued fraction directly.
    return bt * jStat.betacf(x, a, b) / a;
  // else use continued fraction after making the symmetry transformation.
  return 1 - bt * jStat.betacf(1 - x, b, a) / b;
};


// Returns a normal deviate (mu=0, sigma=1).
// If n and m are specified it returns a object of normal deviates.
jStat.randn = function randn(n, m) {
  var u, v, x, y, q, mat;
  if (!m)
    m = n;
  if (n)
    return jStat.create(n, m, function() { return jStat.randn(); });
  do {
    u = Math.random();
    v = 1.7156 * (Math.random() - 0.5);
    x = u - 0.449871;
    y = Math.abs(v) + 0.386595;
    q = x * x + y * (0.19600 * y - 0.25472 * x);
  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));
  return v / u;
};


// Returns a gamma deviate by the method of Marsaglia and Tsang.
jStat.randg = function randg(shape, n, m) {
  var oalph = shape;
  var a1, a2, u, v, x, mat;
  if (!m)
    m = n;
  if (!shape)
    shape = 1;
  if (n) {
    mat = jStat.zeros(n,m);
    mat.alter(function() { return jStat.randg(shape); });
    return mat;
  }
  if (shape < 1)
    shape += 1;
  a1 = shape - 1 / 3;
  a2 = 1 / Math.sqrt(9 * a1);
  do {
    do {
      x = jStat.randn();
      v = 1 + a2 * x;
    } while(v <= 0);
    v = v * v * v;
    u = Math.random();
  } while(u > 1 - 0.331 * Math.pow(x, 4) &&
          Math.log(u) > 0.5 * x*x + a1 * (1 - v + Math.log(v)));
  // alpha > 1
  if (shape == oalph)
    return a1 * v;
  // alpha < 1
  do {
    u = Math.random();
  } while(u === 0);
  return Math.pow(u, 1 / oalph) * a1 * v;
};


// making use of static methods on the instance
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function() {
      return jStat(
          jStat.map(this, function(value) { return jStat[passfunc](value); }));
    }
  })(funcs[i]);
})('gammaln gammafn factorial factorialln'.split(' '));


(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function() {
      return jStat(jStat[passfunc].apply(null, arguments));
    };
  })(funcs[i]);
})('randn'.split(' '));

}(this.jStat, Math));
(function(jStat, Math) {

// generate all distribution instance methods
(function(list) {
  for (var i = 0; i < list.length; i++) (function(func) {
    // distribution instance method
    jStat[func] = function(a, b, c) {
      if (!(this instanceof arguments.callee))
        return new arguments.callee(a, b, c);
      this._a = a;
      this._b = b;
      this._c = c;
      return this;
    };
    // distribution method to be used on a jStat instance
    jStat.fn[func] = function(a, b, c) {
      var newthis = jStat[func](a, b, c);
      newthis.data = this;
      return newthis;
    };
    // sample instance method
    jStat[func].prototype.sample = function(arr) {
      var a = this._a;
      var b = this._b;
      var c = this._c;
      if (arr)
        return jStat.alter(arr, function() {
          return jStat[func].sample(a, b, c);
        });
      else
        return jStat[func].sample(a, b, c);
    };
    // generate the pdf, cdf and inv instance methods
    (function(vals) {
      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
        jStat[func].prototype[fnfunc] = function(x) {
          var a = this._a;
          var b = this._b;
          var c = this._c;
          if (!x && x !== 0)
            x = this.data;
          if (typeof x !== 'number') {
            return jStat.fn.map.call(x, function(x) {
              return jStat[func][fnfunc](x, a, b, c);
            });
          }
          return jStat[func][fnfunc](x, a, b, c);
        };
      })(vals[i]);
    })('pdf cdf inv'.split(' '));
    // generate the mean, median, mode and variance instance methods
    (function(vals) {
      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
        jStat[func].prototype[fnfunc] = function() {
          return jStat[func][fnfunc](this._a, this._b, this._c);
        };
      })(vals[i]);
    })('mean median mode variance'.split(' '));
  })(list[i]);
})((
  'beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' +
  'lognormal noncentralt normal pareto studentt weibull uniform  binomial ' +
  'negbin hypgeom poisson triangular'
).split(' '));



// extend beta function with static methods
jStat.extend(jStat.beta, {
  pdf: function pdf(x, alpha, beta) {
    // PDF is zero outside the support
    if (x > 1 || x < 0)
      return 0;
    // PDF is one for the uniform case
    if (alpha == 1 && beta == 1)
      return 1;

    if (alpha < 512 || beta < 512) {
      return (Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1)) /
          jStat.betafn(alpha, beta);
    } else {
      return Math.exp((alpha - 1) * Math.log(x) +
                      (beta - 1) * Math.log(1 - x) -
                      jStat.betaln(alpha, beta));
    }
  },

  cdf: function cdf(x, alpha, beta) {
    return (x > 1 || x < 0) ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);
  },

  inv: function inv(x, alpha, beta) {
    return jStat.ibetainv(x, alpha, beta);
  },

  mean: function mean(alpha, beta) {
    return alpha / (alpha + beta);
  },

  median: function median(alpha, beta) {
    throw new Error('median not yet implemented');
  },

  mode: function mode(alpha, beta) {
    return (alpha - 1 ) / ( alpha + beta - 2);
  },

  // return a random sample
  sample: function sample(alpha, beta) {
    var u = jStat.randg(alpha);
    return u / (u + jStat.randg(beta));
  },

  variance: function variance(alpha, beta) {
    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
  }
});

// extend F function with static methods
jStat.extend(jStat.centralF, {
  // This implementation of the pdf function avoids float overflow
  // See the way that R calculates this value:
  // https://svn.r-project.org/R/trunk/src/nmath/df.c
  pdf: function pdf(x, df1, df2) {
    var p, q, f;

    if (x < 0)
      return undefined;

    if (df1 <= 2) {
      if (df1 === 1 && df2 === 1) {
        return Infinity;
      }
      if (df1 === 2 && df2 === 1) {
        return 1;
      }
      return Math.sqrt((Math.pow(df1 * x, df1) * Math.pow(df2, df2)) /
                       (Math.pow(df1 * x + df2, df1 + df2))) /
                       (x * jStat.betafn(df1/2, df2/2));
    }

    p = (df1 * x) / (df2 + x * df1);
    q = df2 / (df2 + x * df1);
    f = df1 * q / 2.0;
    return f * jStat.binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);
  },

  cdf: function cdf(x, df1, df2) {
    return jStat.ibeta((df1 * x) / (df1 * x + df2), df1 / 2, df2 / 2);
  },

  inv: function inv(x, df1, df2) {
    return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));
  },

  mean: function mean(df1, df2) {
    return (df2 > 2) ? df2 / (df2 - 2) : undefined;
  },

  mode: function mode(df1, df2) {
    return (df1 > 2) ? (df2 * (df1 - 2)) / (df1 * (df2 + 2)) : undefined;
  },

  // return a random sample
  sample: function sample(df1, df2) {
    var x1 = jStat.randg(df1 / 2) * 2;
    var x2 = jStat.randg(df2 / 2) * 2;
    return (x1 / df1) / (x2 / df2);
  },

  variance: function variance(df1, df2) {
    if (df2 <= 4)
      return undefined;
    return 2 * df2 * df2 * (df1 + df2 - 2) /
        (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));
  }
});


// extend cauchy function with static methods
jStat.extend(jStat.cauchy, {
  pdf: function pdf(x, local, scale) {
    return (scale / (Math.pow(x - local, 2) + Math.pow(scale, 2))) / Math.PI;
  },

  cdf: function cdf(x, local, scale) {
    return Math.atan((x - local) / scale) / Math.PI + 0.5;
  },

  inv: function(p, local, scale) {
    return local + scale * Math.tan(Math.PI * (p - 0.5));
  },

  median: function median(local, scale) {
    return local;
  },

  mode: function mode(local, scale) {
    return local;
  },

  sample: function sample(local, scale) {
    return jStat.randn() *
        Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;
  }
});



// extend chisquare function with static methods
jStat.extend(jStat.chisquare, {
  pdf: function pdf(x, dof) {
    return x === 0 ? 0 :
        Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - (dof / 2) *
                 Math.log(2) - jStat.gammaln(dof / 2));
  },

  cdf: function cdf(x, dof) {
    return jStat.lowRegGamma(dof / 2, x / 2);
  },

  inv: function(p, dof) {
    return 2 * jStat.gammapinv(p, 0.5 * dof);
  },

  mean : function(dof) {
    return dof;
  },

  // TODO: this is an approximation (is there a better way?)
  median: function median(dof) {
    return dof * Math.pow(1 - (2 / (9 * dof)), 3);
  },

  mode: function mode(dof) {
    return (dof - 2 > 0) ? dof - 2 : 0;
  },

  sample: function sample(dof) {
    return jStat.randg(dof / 2) * 2;
  },

  variance: function variance(dof) {
    return 2 * dof;
  }
});



// extend exponential function with static methods
jStat.extend(jStat.exponential, {
  pdf: function pdf(x, rate) {
    return x < 0 ? 0 : rate * Math.exp(-rate * x);
  },

  cdf: function cdf(x, rate) {
    return x < 0 ? 0 : 1 - Math.exp(-rate * x);
  },

  inv: function(p, rate) {
    return -Math.log(1 - p) / rate;
  },

  mean : function(rate) {
    return 1 / rate;
  },

  median: function (rate) {
    return (1 / rate) * Math.log(2);
  },

  mode: function mode(rate) {
    return 0;
  },

  sample: function sample(rate) {
    return -1 / rate * Math.log(Math.random());
  },

  variance : function(rate) {
    return Math.pow(rate, -2);
  }
});



// extend gamma function with static methods
jStat.extend(jStat.gamma, {
  pdf: function pdf(x, shape, scale) {
    return Math.exp((shape - 1) * Math.log(x) - x / scale -
                    jStat.gammaln(shape) - shape * Math.log(scale));
  },

  cdf: function cdf(x, shape, scale) {
    return jStat.lowRegGamma(shape, x / scale);
  },

  inv: function(p, shape, scale) {
    return jStat.gammapinv(p, shape) * scale;
  },

  mean : function(shape, scale) {
    return shape * scale;
  },

  mode: function mode(shape, scale) {
    if(shape > 1) return (shape - 1) * scale;
    return undefined;
  },

  sample: function sample(shape, scale) {
    return jStat.randg(shape) * scale;
  },

  variance: function variance(shape, scale) {
    return shape * scale * scale;
  }
});

// extend inverse gamma function with static methods
jStat.extend(jStat.invgamma, {
  pdf: function pdf(x, shape, scale) {
    return Math.exp(-(shape + 1) * Math.log(x) - scale / x -
                    jStat.gammaln(shape) + shape * Math.log(scale));
  },

  cdf: function cdf(x, shape, scale) {
    return 1 - jStat.lowRegGamma(shape, scale / x);
  },

  inv: function(p, shape, scale) {
    return scale / jStat.gammapinv(1 - p, shape);
  },

  mean : function(shape, scale) {
    return (shape > 1) ? scale / (shape - 1) : undefined;
  },

  mode: function mode(shape, scale) {
    return scale / (shape + 1);
  },

  sample: function sample(shape, scale) {
    return scale / jStat.randg(shape);
  },

  variance: function variance(shape, scale) {
    if (shape <= 2)
      return undefined;
    return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));
  }
});


// extend kumaraswamy function with static methods
jStat.extend(jStat.kumaraswamy, {
  pdf: function pdf(x, alpha, beta) {
    return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) *
                    Math.log(x) + (beta - 1) *
                    Math.log(1 - Math.pow(x, alpha)));
  },

  cdf: function cdf(x, alpha, beta) {
    return (1 - Math.pow(1 - Math.pow(x, alpha), beta));
  },

  mean : function(alpha, beta) {
    return (beta * jStat.gammafn(1 + 1 / alpha) *
            jStat.gammafn(beta)) / (jStat.gammafn(1 + 1 / alpha + beta));
  },

  median: function median(alpha, beta) {
    return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);
  },

  mode: function mode(alpha, beta) {
    if (!(alpha >= 1 && beta >= 1 && (alpha !== 1 && beta !== 1)))
      return undefined;
    return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);
  },

  variance: function variance(alpha, beta) {
    throw new Error('variance not yet implemented');
    // TODO: complete this
  }
});



// extend lognormal function with static methods
jStat.extend(jStat.lognormal, {
  pdf: function pdf(x, mu, sigma) {
    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) -
                    Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) /
                    (2 * sigma * sigma));
  },

  cdf: function cdf(x, mu, sigma) {
    return 0.5 +
        (0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma)));
  },

  inv: function(p, mu, sigma) {
    return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);
  },

  mean: function mean(mu, sigma) {
    return Math.exp(mu + sigma * sigma / 2);
  },

  median: function median(mu, sigma) {
    return Math.exp(mu);
  },

  mode: function mode(mu, sigma) {
    return Math.exp(mu - sigma * sigma);
  },

  sample: function sample(mu, sigma) {
    return Math.exp(jStat.randn() * sigma + mu);
  },

  variance: function variance(mu, sigma) {
    return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);
  }
});



// extend noncentralt function with static methods
jStat.extend(jStat.noncentralt, {
  pdf: function pdf(x, dof, ncp) {
    var tol = 1e-14;
    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t
      return jStat.studentt.pdf(x, dof)

    if (Math.abs(x) < tol) {  // different formula for x == 0
      return Math.exp(jStat.gammaln((dof + 1) / 2) - ncp * ncp / 2 -
                      0.5 * Math.log(Math.PI * dof) - jStat.gammaln(dof / 2));
    }

    // formula for x != 0
    return dof / x *
        (jStat.noncentralt.cdf(x * Math.sqrt(1 + 2 / dof), dof+2, ncp) -
         jStat.noncentralt.cdf(x, dof, ncp));
  },

  cdf: function cdf(x, dof, ncp) {
    var tol = 1e-14;
    var min_iterations = 200;

    if (Math.abs(ncp) < tol)  // ncp approx 0; use student-t
      return jStat.studentt.cdf(x, dof);

    // turn negative x into positive and flip result afterwards
    var flip = false;
    if (x < 0) {
      flip = true;
      ncp = -ncp;
    }

    var prob = jStat.normal.cdf(-ncp, 0, 1);
    var value = tol + 1;
    // use value at last two steps to determine convergence
    var lastvalue = value;
    var y = x * x / (x * x + dof);
    var j = 0;
    var p = Math.exp(-ncp * ncp / 2);
    var q = Math.exp(-ncp * ncp / 2 - 0.5 * Math.log(2) -
                     jStat.gammaln(3 / 2)) * ncp;
    while (j < min_iterations || lastvalue > tol || value > tol) {
      lastvalue = value;
      if (j > 0) {
        p *= (ncp * ncp) / (2 * j);
        q *= (ncp * ncp) / (2 * (j + 1 / 2));
      }
      value = p * jStat.beta.cdf(y, j + 0.5, dof / 2) +
          q * jStat.beta.cdf(y, j+1, dof/2);
      prob += 0.5 * value;
      j++;
    }

    return flip ? (1 - prob) : prob;
  }
});


// extend normal function with static methods
jStat.extend(jStat.normal, {
  pdf: function pdf(x, mean, std) {
    return Math.exp(-0.5 * Math.log(2 * Math.PI) -
                    Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
  },

  cdf: function cdf(x, mean, std) {
    return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));
  },

  inv: function(p, mean, std) {
    return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;
  },

  mean : function(mean, std) {
    return mean;
  },

  median: function median(mean, std) {
    return mean;
  },

  mode: function (mean, std) {
    return mean;
  },

  sample: function sample(mean, std) {
    return jStat.randn() * std + mean;
  },

  variance : function(mean, std) {
    return std * std;
  }
});



// extend pareto function with static methods
jStat.extend(jStat.pareto, {
  pdf: function pdf(x, scale, shape) {
    if (x < scale)
      return undefined;
    return (shape * Math.pow(scale, shape)) / Math.pow(x, shape + 1);
  },

  cdf: function cdf(x, scale, shape) {
    return 1 - Math.pow(scale / x, shape);
  },

  mean: function mean(scale, shape) {
    if (shape <= 1)
      return undefined;
    return (shape * Math.pow(scale, shape)) / (shape - 1);
  },

  median: function median(scale, shape) {
    return scale * (shape * Math.SQRT2);
  },

  mode: function mode(scale, shape) {
    return scale;
  },

  variance : function(scale, shape) {
    if (shape <= 2)
      return undefined;
    return (scale*scale * shape) / (Math.pow(shape - 1, 2) * (shape - 2));
  }
});



// extend studentt function with static methods
jStat.extend(jStat.studentt, {
  pdf: function pdf(x, dof) {
    dof = dof > 1e100 ? 1e100 : dof;
    return (1/(Math.sqrt(dof) * jStat.betafn(0.5, dof/2))) *
        Math.pow(1 + ((x * x) / dof), -((dof + 1) / 2));
  },

  cdf: function cdf(x, dof) {
    var dof2 = dof / 2;
    return jStat.ibeta((x + Math.sqrt(x * x + dof)) /
                       (2 * Math.sqrt(x * x + dof)), dof2, dof2);
  },

  inv: function(p, dof) {
    var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
    x = Math.sqrt(dof * (1 - x) / x);
    return (p > 0.5) ? x : -x;
  },

  mean: function mean(dof) {
    return (dof > 1) ? 0 : undefined;
  },

  median: function median(dof) {
    return 0;
  },

  mode: function mode(dof) {
    return 0;
  },

  sample: function sample(dof) {
    return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));
  },

  variance: function variance(dof) {
    return (dof  > 2) ? dof / (dof - 2) : (dof > 1) ? Infinity : undefined;
  }
});



// extend weibull function with static methods
jStat.extend(jStat.weibull, {
  pdf: function pdf(x, scale, shape) {
    if (x < 0)
      return 0;
    return (shape / scale) * Math.pow((x / scale), (shape - 1)) *
        Math.exp(-(Math.pow((x / scale), shape)));
  },

  cdf: function cdf(x, scale, shape) {
    return x < 0 ? 0 : 1 - Math.exp(-Math.pow((x / scale), shape));
  },

  inv: function(p, scale, shape) {
    return scale * Math.pow(-Math.log(1 - p), 1 / shape);
  },

  mean : function(scale, shape) {
    return scale * jStat.gammafn(1 + 1 / shape);
  },

  median: function median(scale, shape) {
    return scale * Math.pow(Math.log(2), 1 / shape);
  },

  mode: function mode(scale, shape) {
    if (shape <= 1)
      return undefined;
    return scale * Math.pow((shape - 1) / shape, 1 / shape);
  },

  sample: function sample(scale, shape) {
    return scale * Math.pow(-Math.log(Math.random()), 1 / shape);
  },

  variance: function variance(scale, shape) {
    return scale * scale * jStat.gammafn(1 + 2 / shape) -
        Math.pow(this.mean(scale, shape), 2);
  }
});



// extend uniform function with static methods
jStat.extend(jStat.uniform, {
  pdf: function pdf(x, a, b) {
    return (x < a || x > b) ? 0 : 1 / (b - a);
  },

  cdf: function cdf(x, a, b) {
    if (x < a)
      return 0;
    else if (x < b)
      return (x - a) / (b - a);
    return 1;
  },

  inv: function(p, a, b) {
    return a + (p * (b - a));
  },

  mean: function mean(a, b) {
    return 0.5 * (a + b);
  },

  median: function median(a, b) {
    return jStat.mean(a, b);
  },

  mode: function mode(a, b) {
    throw new Error('mode is not yet implemented');
  },

  sample: function sample(a, b) {
    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * Math.random() - 1);
  },

  variance: function variance(a, b) {
    return Math.pow(b - a, 2) / 12;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.binomial, {
  pdf: function pdf(k, n, p) {
    return (p === 0 || p === 1) ?
      ((n * p) === k ? 1 : 0) :
      jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
  },

  cdf: function cdf(x, n, p) {
    var binomarr = [],
    k = 0;
    if (x < 0) {
      return 0;
    }
    if (x < n) {
      for (; k <= x; k++) {
        binomarr[ k ] = jStat.binomial.pdf(k, n, p);
      }
      return jStat.sum(binomarr);
    }
    return 1;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.negbin, {
  pdf: function pdf(k, r, p) {
    return k !== k | 0
      ? false
      : k < 0
        ? 0
        : jStat.combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);
  },

  cdf: function cdf(x, r, p) {
    var sum = 0,
    k = 0;
    if (x < 0) return 0;
    for (; k <= x; k++) {
      sum += jStat.negbin.pdf(k, r, p);
    }
    return sum;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.hypgeom, {
  pdf: function pdf(k, N, m, n) {
    // Hypergeometric PDF.

    // A simplification of the CDF algorithm below.

    // k = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population

    if(k !== k | 0) {
      return false;
    } else if(k < 0 || k < m - (N - n)) {
      // It's impossible to have this few successes drawn.
      return 0;
    } else if(k > n || k > m) {
      // It's impossible to have this many successes drawn.
      return 0;
    } else if (m * 2 > N) {
      // More than half the population is successes.

      if(n * 2 > N) {
        // More than half the population is sampled.

        return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n)
      } else {
        // Half or less of the population is sampled.

        return jStat.hypgeom.pdf(n - k, N, N - m, n);
      }

    } else if(n * 2 > N) {
      // Half or less is successes.

      return jStat.hypgeom.pdf(m - k, N, m, N - n);

    } else if(m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return jStat.hypgeom.pdf(k, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.

      // The basic premise of the algorithm is that we partially normalize our
      // intermediate product to keep it in a numerically good region, and then
      // finish the normalization at the end.

      // This variable holds the scaled probability of the current number of
      // successes.
      var scaledPDF = 1;

      // This keeps track of how much we have normalized.
      var samplesDone = 0;

      for(var i = 0; i < k; i++) {
        // For every possible number of successes up to that observed...

        while(scaledPDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.

          scaledPDF *= 1 - (m / (N - samplesDone));

          // Say we've normalized by this sample already.
          samplesDone++;
        }

        // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes
        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
      }

      for(; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledPDF *= 1 - (m / (N - samplesDone));
      }

      // Bound answer sanely before returning.
      return Math.min(1, Math.max(0, scaledPDF));
    }
  },

  cdf: function cdf(x, N, m, n) {
    // Hypergeometric CDF.

    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
    // and comes from his hypergeometric test calculator at
    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.

    // x = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population

    if(x < 0 || x < m - (N - n)) {
      // It's impossible to have this few successes drawn or fewer.
      return 0;
    } else if(x >= n || x >= m) {
      // We will always have this many successes or fewer.
      return 1;
    } else if (m * 2 > N) {
      // More than half the population is successes.

      if(n * 2 > N) {
        // More than half the population is sampled.

        return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n)
      } else {
        // Half or less of the population is sampled.

        return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);
      }

    } else if(n * 2 > N) {
      // Half or less is successes.

      return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);

    } else if(m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return jStat.hypgeom.cdf(x, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.

      // The basic premise of the algorithm is that we partially normalize our
      // intermediate sum to keep it in a numerically good region, and then
      // finish the normalization at the end.

      // Holds the intermediate, scaled total CDF.
      var scaledCDF = 1;

      // This variable holds the scaled probability of the current number of
      // successes.
      var scaledPDF = 1;

      // This keeps track of how much we have normalized.
      var samplesDone = 0;

      for(var i = 0; i < x; i++) {
        // For every possible number of successes up to that observed...

        while(scaledCDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.

          var factor = 1 - (m / (N - samplesDone));

          scaledPDF *= factor;
          scaledCDF *= factor;

          // Say we've normalized by this sample already.
          samplesDone++;
        }

        // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes
        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));

        // Add to the CDF answer.
        scaledCDF += scaledPDF;
      }

      for(; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledCDF *= 1 - (m / (N - samplesDone));
      }

      // Bound answer sanely before returning.
      return Math.min(1, Math.max(0, scaledCDF));
    }
  }
});



// extend uniform function with static methods
jStat.extend(jStat.poisson, {
  pdf: function pdf(k, l) {
    return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);
  },

  cdf: function cdf(x, l) {
    var sumarr = [],
    k = 0;
    if (x < 0) return 0;
    for (; k <= x; k++) {
      sumarr.push(jStat.poisson.pdf(k, l));
    }
    return jStat.sum(sumarr);
  },

  mean : function(l) {
    return l;
  },

  variance : function(l) {
    return l;
  },

  sample: function sample(l) {
    var p = 1, k = 0, L = Math.exp(-l);
    do {
      k++;
      p *= Math.random();
    } while (p > L);
    return k - 1;
  }
});

// extend triangular function with static methods
jStat.extend(jStat.triangular, {
  pdf: function pdf(x, a, b, c) {
    if (b <= a || c < a || c > b) {
      return undefined;
    } else {
      if (x < a || x > b) {
        return 0;
      } else {
        if (x <= c) {
          if ( c === a)
            return 1;
          else
            return (2 * (x - a)) / ((b - a) * (c - a));
        } else {
          if (c === b)
            return 1;
          else
            return (2 * (b - x)) / ((b - a) * (b - c));
        }
      }
    }
  },

  cdf: function cdf(x, a, b, c) {
    if (b <= a || c < a || c > b)
      return undefined;
    if (x < a) {
      return 0;
    } else {
      if (x <= c)
        return Math.pow(x - a, 2) / ((b - a) * (c - a));
      return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));
    }
    // never reach this
    return 1;
  },

  mean: function mean(a, b, c) {
    return (a + b + c) / 3;
  },

  median: function median(a, b, c) {
    if (c <= (a + b) / 2) {
      return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);
    } else if (c > (a + b) / 2) {
      return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);
    }
  },

  mode: function mode(a, b, c) {
    return c;
  },

  sample: function sample(a, b, c) {
    var u = Math.random();
    if (u < ((c - a) / (b - a)))
      return a + Math.sqrt(u * (b - a) * (c - a))
    return b - Math.sqrt((1 - u) * (b - a) * (b - c));
  },

  variance: function variance(a, b, c) {
    return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
  }
});

}(this.jStat, Math));
/* Provides functions for the solution of linear system of equations, integration, extrapolation,
 * interpolation, eigenvalue problems, differential equations and PCA analysis. */

(function(jStat, Math) {

var push = Array.prototype.push;
var isArray = jStat.utils.isArray;

jStat.extend({

  // add a vector/matrix to a vector/matrix or scalar
  add: function add(arr, arg) {
    // check if arg is a vector or scalar
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.map(arr, function(value, row, col) {
        return value + arg[row][col];
      });
    }
    return jStat.map(arr, function(value) { return value + arg; });
  },

  // subtract a vector or scalar from the vector
  subtract: function subtract(arr, arg) {
    // check if arg is a vector or scalar
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.map(arr, function(value, row, col) {
        return value - arg[row][col] || 0;
      });
    }
    return jStat.map(arr, function(value) { return value - arg; });
  },

  // matrix division
  divide: function divide(arr, arg) {
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.multiply(arr, jStat.inv(arg));
    }
    return jStat.map(arr, function(value) { return value / arg; });
  },

  // matrix multiplication
  multiply: function multiply(arr, arg) {
    var row, col, nrescols, sum,
    nrow = arr.length,
    ncol = arr[0].length,
    res = jStat.zeros(nrow, nrescols = (isArray(arg)) ? arg[0].length : ncol),
    rescols = 0;
    if (isArray(arg)) {
      for (; rescols < nrescols; rescols++) {
        for (row = 0; row < nrow; row++) {
          sum = 0;
          for (col = 0; col < ncol; col++)
          sum += arr[row][col] * arg[col][rescols];
          res[row][rescols] = sum;
        }
      }
      return (nrow === 1 && rescols === 1) ? res[0][0] : res;
    }
    return jStat.map(arr, function(value) { return value * arg; });
  },

  // Returns the dot product of two matricies
  dot: function dot(arr, arg) {
    if (!isArray(arr[0])) arr = [ arr ];
    if (!isArray(arg[0])) arg = [ arg ];
    // convert column to row vector
    var left = (arr[0].length === 1 && arr.length !== 1) ? jStat.transpose(arr) : arr,
    right = (arg[0].length === 1 && arg.length !== 1) ? jStat.transpose(arg) : arg,
    res = [],
    row = 0,
    nrow = left.length,
    ncol = left[0].length,
    sum, col;
    for (; row < nrow; row++) {
      res[row] = [];
      sum = 0;
      for (col = 0; col < ncol; col++)
      sum += left[row][col] * right[row][col];
      res[row] = sum;
    }
    return (res.length === 1) ? res[0] : res;
  },

  // raise every element by a scalar
  pow: function pow(arr, arg) {
    return jStat.map(arr, function(value) { return Math.pow(value, arg); });
  },

  // exponentiate every element
  exp: function exp(arr) {
    return jStat.map(arr, function(value) { return Math.exp(value); });
  },

  // generate the natural log of every element
  log: function exp(arr) {
    return jStat.map(arr, function(value) { return Math.log(value); });
  },

  // generate the absolute values of the vector
  abs: function abs(arr) {
    return jStat.map(arr, function(value) { return Math.abs(value); });
  },

  // computes the p-norm of the vector
  // In the case that a matrix is passed, uses the first row as the vector
  norm: function norm(arr, p) {
    var nnorm = 0,
    i = 0;
    // check the p-value of the norm, and set for most common case
    if (isNaN(p)) p = 2;
    // check if multi-dimensional array, and make vector correction
    if (isArray(arr[0])) arr = arr[0];
    // vector norm
    for (; i < arr.length; i++) {
      nnorm += Math.pow(Math.abs(arr[i]), p);
    }
    return Math.pow(nnorm, 1 / p);
  },

  // computes the angle between two vectors in rads
  // In case a matrix is passed, this uses the first row as the vector
  angle: function angle(arr, arg) {
    return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));
  },

  // augment one matrix by another
  // Note: this function returns a matrix, not a jStat object
  aug: function aug(a, b) {
    var newarr = a.slice(),
    i = 0;
    for (; i < newarr.length; i++) {
      push.apply(newarr[i], b[i]);
    }
    return newarr;
  },

  // The inv() function calculates the inverse of a matrix
  // Create the inverse by augmenting the matrix by the identity matrix of the
  // appropriate size, and then use G-J elimination on the augmented matrix.
  inv: function inv(a) {
    var rows = a.length;
    var cols = a[0].length;
    var b = jStat.identity(rows, cols);
    var c = jStat.gauss_jordan(a, b);
    var result = [];
    var i = 0;
    var j;

    //We need to copy the inverse portion to a new matrix to rid G-J artifacts
    for (; i < rows; i++) {
      result[i] = [];
      for (j = cols; j < c[0].length; j++)
        result[i][j - cols] = c[i][j];
    }
    return result;
  },

  // calculate the determinant of a matrix
  det: function det(a) {
    var alen = a.length,
    alend = alen * 2,
    vals = new Array(alend),
    rowshift = alen - 1,
    colshift = alend - 1,
    mrow = rowshift - alen + 1,
    mcol = colshift,
    i = 0,
    result = 0,
    j;
    // check for special 2x2 case
    if (alen === 2) {
      return a[0][0] * a[1][1] - a[0][1] * a[1][0];
    }
    for (; i < alend; i++) {
      vals[i] = 1;
    }
    for (i = 0; i < alen; i++) {
      for (j = 0; j < alen; j++) {
        vals[(mrow < 0) ? mrow + alen : mrow ] *= a[i][j];
        vals[(mcol < alen) ? mcol + alen : mcol ] *= a[i][j];
        mrow++;
        mcol--;
      }
      mrow = --rowshift - alen + 1;
      mcol = --colshift;
    }
    for (i = 0; i < alen; i++) {
      result += vals[i];
    }
    for (; i < alend; i++) {
      result -= vals[i];
    }
    return result;
  },

  gauss_elimination: function gauss_elimination(a, b) {
    var i = 0,
    j = 0,
    n = a.length,
    m = a[0].length,
    factor = 1,
    sum = 0,
    x = [],
    maug, pivot, temp, k;
    a = jStat.aug(a, b);
    maug = a[0].length;
    for(i = 0; i < n; i++) {
      pivot = a[i][i];
      j = i;
      for (k = i + 1; k < m; k++) {
        if (pivot < Math.abs(a[k][i])) {
          pivot = a[k][i];
          j = k;
        }
      }
      if (j != i) {
        for(k = 0; k < maug; k++) {
          temp = a[i][k];
          a[i][k] = a[j][k];
          a[j][k] = temp;
        }
      }
      for (j = i + 1; j < n; j++) {
        factor = a[j][i] / a[i][i];
        for(k = i; k < maug; k++) {
          a[j][k] = a[j][k] - factor * a[i][k];
        }
      }
    }
    for (i = n - 1; i >= 0; i--) {
      sum = 0;
      for (j = i + 1; j<= n - 1; j++) {
        sum = sum + x[j] * a[i][j];
      }
      x[i] =(a[i][maug - 1] - sum) / a[i][i];
    }
    return x;
  },

  gauss_jordan: function gauss_jordan(a, b) {
    var m = jStat.aug(a, b),
    h = m.length,
    w = m[0].length;
    // find max pivot
    for (var y = 0; y < h; y++) {
      var maxrow = y;
      for (var y2 = y+1; y2 < h; y2++) {
        if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y]))
          maxrow = y2;
      }
      var tmp = m[y];
      m[y] = m[maxrow];
      m[maxrow] = tmp
      for (var y2 = y+1; y2 < h; y2++) {
        c = m[y2][y] / m[y][y];
        for (var x = y; x < w; x++) {
          m[y2][x] -= m[y][x] * c;
        }
      }
    }
    // backsubstitute
    for (var y = h-1; y >= 0; y--) {
      c = m[y][y];
      for (var y2 = 0; y2 < y; y2++) {
        for (var x = w-1; x > y-1; x--) {
          m[y2][x] -= m[y][x] * m[y2][y] / c;
        }
      }
      m[y][y] /= c;
      for (var x = h; x < w; x++) {
        m[y][x] /= c;
      }
    }
    return m;
  },

  lu: function lu(a, b) {
    throw new Error('lu not yet implemented');
  },

  cholesky: function cholesky(a, b) {
    throw new Error('cholesky not yet implemented');
  },

  gauss_jacobi: function gauss_jacobi(a, b, x, r) {
    var i = 0;
    var j = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);
    c = jStat.multiply(jStat.inv(d), b);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk,xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i++;
    }
    return xk;
  },

  gauss_seidel: function gauss_seidel(a, b, x, r) {
    var i = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var j, xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);
    c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i = i + 1;
    }
    return xk;
  },

  SOR: function SOR(a, b, x, r, w) {
    var i = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var j, xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))),
                       jStat.subtract(jStat.multiply(d, 1 - w),
                                      jStat.multiply(u, w)));
    c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d,
        jStat.multiply(l, w))), b), w);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i++;
    }
    return xk;
  },

  householder: function householder(a) {
    var m = a.length;
    var n = a[0].length;
    var i = 0;
    var w = [];
    var p = [];
    var alpha, r, k, j, factor;
    for (; i < m - 1; i++) {
      alpha = 0;
      for (j = i + 1; j < n; j++)
      alpha += (a[j][i] * a[j][i]);
      factor = (a[i + 1][i] > 0) ? -1 : 1;
      alpha = factor * Math.sqrt(alpha);
      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));
      w = jStat.zeros(m, 1);
      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);
      for (k = i + 2; k < m; k++) w[k][0] = a[k][i] / (2 * r);
      p = jStat.subtract(jStat.identity(m, n),
          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
      a = jStat.multiply(p, jStat.multiply(a, p));
    }
    return a;
  },

  // TODO: not working properly.
  QR: function QR(a, b) {
    var m = a.length;
    var n = a[0].length;
    var i = 0;
    var w = [];
    var p = [];
    var x = [];
    var j, alpha, r, k, factor, sum;
    for (; i < m - 1; i++) {
      alpha = 0;
      for (j = i + 1; j < n; j++)
        alpha += (a[j][i] * a[j][i]);
      factor = (a[i + 1][i] > 0) ? -1 : 1;
      alpha = factor * Math.sqrt(alpha);
      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));
      w = jStat.zeros(m, 1);
      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);
      for (k = i + 2; k < m; k++)
        w[k][0] = a[k][i] / (2 * r);
      p = jStat.subtract(jStat.identity(m, n),
          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
      a = jStat.multiply(p, a);
      b = jStat.multiply(p, b);
    }
    for (i = m - 1; i >= 0; i--) {
      sum = 0;
      for (j = i + 1; j <= n - 1; j++)
      sum = x[j] * a[i][j];
      x[i] = b[i][0] / a[i][i];
    }
    return x;
  },

  jacobi: function jacobi(a) {
    var condition = 1;
    var count = 0;
    var n = a.length;
    var e = jStat.identity(n, n);
    var ev = [];
    var b, i, j, p, q, maxim, theta, s;
    // condition === 1 only if tolerance is not reached
    while (condition === 1) {
      count++;
      maxim = a[0][1];
      p = 0;
      q = 1;
      for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
          if (i != j) {
            if (maxim < Math.abs(a[i][j])) {
              maxim = Math.abs(a[i][j]);
              p = i;
              q = j;
            }
          }
        }
      }
      if (a[p][p] === a[q][q])
        theta = (a[p][q] > 0) ? Math.PI / 4 : -Math.PI / 4;
      else
        theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;
      s = jStat.identity(n, n);
      s[p][p] = Math.cos(theta);
      s[p][q] = -Math.sin(theta);
      s[q][p] = Math.sin(theta);
      s[q][q] = Math.cos(theta);
      // eigen vector matrix
      e = jStat.multiply(e, s);
      b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);
      a = b;
      condition = 0;
      for (i = 1; i < n; i++) {
        for (j = 1; j < n; j++) {
          if (i != j && Math.abs(a[i][j]) > 0.001) {
            condition = 1;
          }
        }
      }
    }
    for (i = 0; i < n; i++) ev.push(a[i][i]);
    //returns both the eigenvalue and eigenmatrix
    return [e, ev];
  },

  rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {
    var k1, k2, u_j1, k3, k4;
    if (order === 2) {
      while (t_j <= p) {
        k1 = h * f(t_j, u_j);
        k2 = h * f(t_j + h, u_j + k1);
        u_j1 = u_j + (k1 + k2) / 2;
        u_j = u_j1;
        t_j = t_j + h;
      }
    }
    if (order === 4) {
      while (t_j <= p) {
        k1 = h * f(t_j, u_j);
        k2 = h * f(t_j + h / 2, u_j + k1 / 2);
        k3 = h * f(t_j + h / 2, u_j + k2 / 2);
        k4 = h * f(t_j +h, u_j + k3);
        u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
        u_j = u_j1;
        t_j = t_j + h;
      }
    }
    return u_j;
  },

  romberg: function romberg(f, a, b, order) {
    var i = 0;
    var h = (b - a) / 2;
    var x = [];
    var h1 = [];
    var g = [];
    var m, a1, j, k, I, d;
    while (i < order / 2) {
      I = f(a);
      for (j = a, k = 0; j <= b; j = j + h, k++) x[k] = j;
      m = x.length;
      for (j = 1; j < m - 1; j++) {
        I += (((j % 2) !== 0) ? 4 : 2) * f(x[j]);
      }
      I = (h / 3) * (I + f(b));
      g[i] = I;
      h /= 2;
      i++;
    }
    a1 = g.length;
    m = 1;
    while (a1 !== 1) {
      for (j = 0; j < a1 - 1; j++)
      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
      a1 = h1.length;
      g = h1;
      h1 = [];
      m++;
    }
    return g;
  },

  richardson: function richardson(X, f, x, h) {
    function pos(X, x) {
      var i = 0;
      var n = X.length;
      var p;
      for (; i < n; i++)
        if (X[i] === x) p = i;
      return p;
    }
    var n = X.length,
    h_min = Math.abs(x - X[pos(X, x) + 1]),
    i = 0,
    g = [],
    h1 = [],
    y1, y2, m, a, j;
    while (h >= h_min) {
      y1 = pos(X, x + h);
      y2 = pos(X, x);
      g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);
      h /= 2;
      i++;
    }
    a = g.length;
    m = 1;
    while (a != 1) {
      for (j = 0; j < a - 1; j++)
      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
      a = h1.length;
      g = h1;
      h1 = [];
      m++;
    }
    return g;
  },

  simpson: function simpson(f, a, b, n) {
    var h = (b - a) / n;
    var I = f(a);
    var x = [];
    var j = a;
    var k = 0;
    var i = 1;
    var m;
    for (; j <= b; j = j + h, k++)
      x[k] = j;
    m = x.length;
    for (; i < m - 1; i++) {
      I += ((i % 2 !== 0) ? 4 : 2) * f(x[i]);
    }
    return (h / 3) * (I + f(b));
  },

  hermite: function hermite(X, F, dF, value) {
    var n = X.length;
    var p = 0;
    var i = 0;
    var l = [];
    var dl = [];
    var A = [];
    var B = [];
    var j;
    for (; i < n; i++) {
      l[i] = 1;
      for (j = 0; j < n; j++) {
        if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);
      }
      dl[i] = 0;
      for (j = 0; j < n; j++) {
        if (i != j) dl[i] += 1 / (X [i] - X[j]);
      }
      A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);
      B[i] = (value - X[i]) * (l[i] * l[i]);
      p += (A[i] * F[i] + B[i] * dF[i]);
    }
    return p;
  },

  lagrange: function lagrange(X, F, value) {
    var p = 0;
    var i = 0;
    var j, l;
    var n = X.length;
    for (; i < n; i++) {
      l = F[i];
      for (j = 0; j < n; j++) {
        // calculating the lagrange polynomial L_i
        if (i != j) l *= (value - X[j]) / (X[i] - X[j]);
      }
      // adding the lagrange polynomials found above
      p += l;
    }
    return p;
  },

  cubic_spline: function cubic_spline(X, F, value) {
    var n = X.length;
    var i = 0, j;
    var A = [];
    var B = [];
    var alpha = [];
    var c = [];
    var h = [];
    var b = [];
    var d = [];
    for (; i < n - 1; i++)
      h[i] = X[i + 1] - X[i];
    alpha[0] = 0;
    for (i = 1; i < n - 1; i++) {
      alpha[i] = (3 / h[i]) * (F[i + 1] - F[i]) -
          (3 / h[i-1]) * (F[i] - F[i-1]);
    }
    for (i = 1; i < n - 1; i++) {
      A[i] = [];
      B[i] = [];
      A[i][i-1] = h[i-1];
      A[i][i] = 2 * (h[i - 1] + h[i]);
      A[i][i+1] = h[i];
      B[i][0] = alpha[i];
    }
    c = jStat.multiply(jStat.inv(A), B);
    for (j = 0; j < n - 1; j++) {
      b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;
      d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);
    }
    for (j = 0; j < n; j++) {
      if (X[j] > value) break;
    }
    j -= 1;
    return F[j] + (value - X[j]) * b[j] + jStat.sq(value-X[j]) *
        c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];
  },

  gauss_quadrature: function gauss_quadrature() {
    throw new Error('gauss_quadrature not yet implemented');
  },

  PCA: function PCA(X) {
    var m = X.length;
    var n = X[0].length;
    var flag = false;
    var i = 0;
    var j, temp1;
    var u = [];
    var D = [];
    var result = [];
    var temp2 = [];
    var Y = [];
    var Bt = [];
    var B = [];
    var C = [];
    var V = [];
    var Vt = [];
    for (i = 0; i < m; i++) {
      u[i] = jStat.sum(X[i]) / n;
    }
    for (i = 0; i < n; i++) {
      B[i] = [];
      for(j = 0; j < m; j++) {
        B[i][j] = X[j][i] - u[j];
      }
    }
    B = jStat.transpose(B);
    for (i = 0; i < m; i++) {
      C[i] = [];
      for (j = 0; j < m; j++) {
        C[i][j] = (jStat.dot([B[i]], [B[j]])) / (n - 1);
      }
    }
    result = jStat.jacobi(C);
    V = result[0];
    D = result[1];
    Vt = jStat.transpose(V);
    for (i = 0; i < D.length; i++) {
      for (j = i; j < D.length; j++) {
        if(D[i] < D[j])  {
          temp1 = D[i];
          D[i] = D[j];
          D[j] = temp1;
          temp2 = Vt[i];
          Vt[i] = Vt[j];
          Vt[j] = temp2;
        }
      }
    }
    Bt = jStat.transpose(B);
    for (i = 0; i < m; i++) {
      Y[i] = [];
      for (j = 0; j < Bt.length; j++) {
        Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);
      }
    }
    return [X, D, Vt, Y];
  }
});

// extend jStat.fn with methods that require one argument
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function(arg, func) {
      var tmpthis = this;
      // check for callback
      if (func) {
        setTimeout(function() {
          func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));
        }, 15);
        return this;
      }
      if (typeof jStat[passfunc](this, arg) === 'number')
        return jStat[passfunc](this, arg);
      else
        return jStat(jStat[passfunc](this, arg));
    };
  }(funcs[i]));
}('add divide multiply subtract dot pow exp log abs norm angle'.split(' ')));

}(this.jStat, Math));
(function(jStat, Math) {

var slice = [].slice;
var isNumber = jStat.utils.isNumber;

// flag==true denotes use of sample standard deviation
// Z Statistics
jStat.extend({
  // 2 different parameter lists:
  // (value, mean, sd)
  // (value, array, flag)
  zscore: function zscore() {
    var args = slice.call(arguments);
    if (isNumber(args[1])) {
      return (args[0] - args[1]) / args[2];
    }
    return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);
  },

  // 3 different paramter lists:
  // (value, mean, sd, sides)
  // (zscore, sides)
  // (value, array, sides, flag)
  ztest: function ztest() {
    var args = slice.call(arguments);
    if (args.length === 4) {
      if(isNumber(args[1])) {
        var z = jStat.zscore(args[0],args[1],args[2])
        return (args[3] === 1) ?
          (jStat.normal.cdf(-Math.abs(z),0,1)) :
          (jStat.normal.cdf(-Math.abs(z),0,1)* 2);
      }
      var z = args[0]
      return (args[2] === 1) ?
        (jStat.normal.cdf(-Math.abs(z),0,1)) :
        (jStat.normal.cdf(-Math.abs(z),0,1)*2);
    }
    var z = jStat.zscore(args[0],args[1],args[3])
    return (args[1] === 1) ?
      (jStat.normal.cdf(-Math.abs(z), 0, 1)) :
      (jStat.normal.cdf(-Math.abs(z), 0, 1)*2);
  }
});

jStat.extend(jStat.fn, {
  zscore: function zscore(value, flag) {
    return (value - this.mean()) / this.stdev(flag);
  },

  ztest: function ztest(value, sides, flag) {
    var zscore = Math.abs(this.zscore(value, flag));
    return (sides === 1) ?
      (jStat.normal.cdf(-zscore, 0, 1)) :
      (jStat.normal.cdf(-zscore, 0, 1) * 2);
  }
});

// T Statistics
jStat.extend({
  // 2 parameter lists
  // (value, mean, sd, n)
  // (value, array)
  tscore: function tscore() {
    var args = slice.call(arguments);
    return (args.length === 4) ?
      ((args[0] - args[1]) / (args[2] / Math.sqrt(args[3]))) :
      ((args[0] - jStat.mean(args[1])) /
       (jStat.stdev(args[1], true) / Math.sqrt(args[1].length)));
  },

  // 3 different paramter lists:
  // (value, mean, sd, n, sides)
  // (tscore, n, sides)
  // (value, array, sides)
  ttest: function ttest() {
    var args = slice.call(arguments);
    var tscore;
    if (args.length === 5) {
      tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));
      return (args[4] === 1) ?
        (jStat.studentt.cdf(-tscore, args[3]-1)) :
        (jStat.studentt.cdf(-tscore, args[3]-1)*2);
    }
    if (isNumber(args[1])) {
      tscore = Math.abs(args[0])
      return (args[2] == 1) ?
        (jStat.studentt.cdf(-tscore, args[1]-1)) :
        (jStat.studentt.cdf(-tscore, args[1]-1) * 2);
    }
    tscore = Math.abs(jStat.tscore(args[0], args[1]))
    return (args[2] == 1) ?
      (jStat.studentt.cdf(-tscore, args[1].length-1)) :
      (jStat.studentt.cdf(-tscore, args[1].length-1) * 2);
  }
});

jStat.extend(jStat.fn, {
  tscore: function tscore(value) {
    return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));
  },

  ttest: function ttest(value, sides) {
    return (sides === 1) ?
      (1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols()-1)) :
      (jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols()-1)*2);
  }
});

// F Statistics
jStat.extend({
  // Paramter list is as follows:
  // (array1, array2, array3, ...)
  // or it is an array of arrays
  // array of arrays conversion
  anovafscore: function anovafscore() {
    var args = slice.call(arguments),
    expVar, sample, sampMean, sampSampMean, tmpargs, unexpVar, i, j;
    if (args.length === 1) {
      tmpargs = new Array(args[0].length);
      for (i = 0; i < args[0].length; i++) {
        tmpargs[i] = args[0][i];
      }
      args = tmpargs;
    }
    // 2 sample case
    if (args.length === 2) {
      return jStat.variance(args[0]) / jStat.variance(args[1]);
    }
    // Builds sample array
    sample = new Array();
    for (i = 0; i < args.length; i++) {
      sample = sample.concat(args[i]);
    }
    sampMean = jStat.mean(sample);
    // Computes the explained variance
    expVar = 0;
    for (i = 0; i < args.length; i++) {
      expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);
    }
    expVar /= (args.length - 1);
    // Computes unexplained variance
    unexpVar = 0;
    for (i = 0; i < args.length; i++) {
      sampSampMean = jStat.mean(args[i]);
      for (j = 0; j < args[i].length; j++) {
        unexpVar += Math.pow(args[i][j] - sampSampMean, 2);
      }
    }
    unexpVar /= (sample.length - args.length);
    return expVar / unexpVar;
  },

  // 2 different paramter setups
  // (array1, array2, array3, ...)
  // (anovafscore, df1, df2)
  anovaftest: function anovaftest() {
    var args = slice.call(arguments),
    df1, df2, n, i;
    if (isNumber(args[0])) {
      return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);
    }
    anovafscore = jStat.anovafscore(args);
    df1 = args.length - 1;
    n = 0;
    for (i = 0; i < args.length; i++) {
      n = n + args[i].length;
    }
    df2 = n - df1 - 1;
    return 1 - jStat.centralF.cdf(anovafscore, df1, df2);
  },

  ftest: function ftest(fscore, df1, df2) {
    return 1 - jStat.centralF.cdf(fscore, df1, df2);
  }
});

jStat.extend(jStat.fn, {
  anovafscore: function anovafscore() {
    return jStat.anovafscore(this.toArray());
  },

  anovaftes: function anovaftes() {
    var n = 0;
    var i;
    for (i = 0; i < this.length; i++) {
      n = n + this[i].length;
    }
    return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);
  }
});

// Error Bounds
jStat.extend({
  // 2 different parameter setups
  // (value, alpha, sd, n)
  // (value, alpha, array)
  normalci: function normalci() {
    var args = slice.call(arguments),
    ans = new Array(2),
    change;
    if (args.length === 4) {
      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
                        args[2] / Math.sqrt(args[3]));
    } else {
      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
                        jStat.stdev(args[2]) / Math.sqrt(args[2].length));
    }
    ans[0] = args[0] - change;
    ans[1] = args[0] + change;
    return ans;
  },

  // 2 different parameter setups
  // (value, alpha, sd, n)
  // (value, alpha, array)
  tci: function tci() {
    var args = slice.call(arguments),
    ans = new Array(2),
    change;
    if (args.length === 4) {
      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) *
                        args[2] / Math.sqrt(args[3]));
    } else {
      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) *
                        jStat.stdev(args[2], true) / Math.sqrt(args[2].length));
    }
    ans[0] = args[0] - change;
    ans[1] = args[0] + change;
    return ans;
  },

  significant: function significant(pvalue, alpha) {
    return pvalue < alpha;
  }
});

jStat.extend(jStat.fn, {
  normalci: function normalci(value, alpha) {
    return jStat.normalci(value, alpha, this.toArray());
  },

  tci: function tci(value, alpha) {
    return jStat.tci(value, alpha, this.toArray());
  }
});

}(this.jStat, Math));

// //! moment.js
// //! version : 2.10.6
// //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
// //! license : MIT
// //! momentjs.com
// !function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow<0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=j(b)),"undefined"!=typeof b._locale&&(a._locale=b._locale),Jc.length>0)for(c in Jc)d=Jc[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&&(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&&null!=a._isAMomentObject}function p(a){return 0>a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&q(a[d])!==q(b[d]))&&g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace("_","-"):a}function u(a){for(var b,c,d,e,f=0;f<a.length;){for(e=t(a[f]).split("-"),b=e.length,c=t(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=v(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&r(e,c,!0)>=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=Ic._abbr,require("./locale/"+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&&(c="undefined"==typeof b?y(a):x(a,b),c&&(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+"s"]=Mc[b]=a}function A(a){return"string"==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&&(b=A(c),b&&(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function E(a,b,c){return a._d["set"+(a._isUTC?"UTC":"")+b](c)}function F(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),"function"==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Qc[a]=e),b&&(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&&(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c>b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d>=0&&Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return"function"==typeof a&&"[object Function]"===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&&c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Q(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=q(a)}),c=0;c<a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&&f(ed,a)&&ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function X(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,"Month")}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[gd]<0||c[gd]>11?gd:c[hd]<1||c[hd]>T(c[fd],c[gd])?hd:c[id]<0||c[id]>24||24===c[id]&&(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]<0||c[jd]>59?jd:c[kd]<0||c[kd]>59?kd:c[ld]<0||c[ld]>999?ld:-1,j(a)._overflowDayOfYear&&(fd>b||b>hd)&&(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function aa(a,b){var c=!0;return g(function(){return c&&(_(a+"\n"+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c>b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c>b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||" ")+rd[b][0];break}d.match(ad)&&(a._f+="Z"),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&&a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=Da(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e>i&&(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f>0?a:a-1,dayOfYear:f>0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&&null==a._a[hd]&&null==a._a[gd]&&ua(a),a._dayOfYear&&(e=ra(a._a[fd],d[fd]),a._dayOfYear>ga(e)&&(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&&0===a._a[jd]&&0===a._a[kd]&&0===a._a[ld]&&(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f>e&&++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[id]<=12&&b._a[id]>0&&(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&&""===b?l({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):"string"==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):"object"==typeof f?ya(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e<b.length;++e)(!b[e].isValid()||b[e][a](d))&&(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea("isBefore",a)}function Ga(){var a=[].slice.call(arguments,0);return Ea("isAfter",a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||"").match(ad)||[],c=b[b.length-1]||[],d=(c+"").match(xd)||["-",0,0],e=+(60*d[1])+q(d[2]);return"+"===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?("string"==typeof b&&(b=Ka(b)),Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?bb(this,Ya(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Ma(this),"m")),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ua(){if("undefined"!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&&r(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&&0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c="-"===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function Za(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&E(b,"Date",D(b,"Date")+g*d),h&&X(b,D(b,"Month")+h*d),e&&a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf("day"),e=this.diff(d,"days",!0),f=-6>e?"sameElse":-1>e?"lastWeek":0>e?"lastDay":1>e?"sameDay":2>e?"nextDay":7>e?"nextWeek":"sameElse";return this.format(b&&b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Da(a),+this>+a):(c=o(a)?+a:+Da(a),c<+this.clone().startOf(b))}function fb(a,b){var c;return b=A("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=o(a)?a:Da(a),+a>+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)<c)}function gb(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||"millisecond"),"millisecond"===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),"year"===b||"month"===b||"quarter"===b?(e=jb(this,f),"quarter"===b?e/=3:"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function lb(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):K(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&&(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,"y")}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7>b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,"d")):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return"p"===(a+"").toLowerCase().charAt(0)}function Vb(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Wb(a,b){b[ld]=q(1e3*("0."+a))}function Xb(){return this._isUTC?"UTC":""}function Yb(){return this._isUTC?"Coordinated Universal Time":""}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return"function"==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace("%d",a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,"months",12,"month")}function kc(a,b){return ic(a,b,"monthsShort",12,"month")}function lc(a,b){return ic(a,b,"weekdays",7,"day")}function mc(a,b){return ic(a,b,"weekdaysShort",7,"day")}function nc(a,b){return ic(a,b,"weekdaysMin",7,"day")}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0>a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+uc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+"s"]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as("s")),f=ke(d.as("m")),g=ke(d.as("h")),h=ke(d.as("d")),i=ke(d.as("M")),j=ke(d.as("y")),k=e<le.s&&["s",e]||1===f&&["m"]||f<le.m&&["mm",f]||1===g&&["h"]||g<le.h&&["hh",g]||1===h&&["d"]||h<le.d&&["dd",h]||1===i&&["M"]||i<le.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H("M",["MM",2],"Mo",function(){return this.month()+1}),H("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),H("MMMM",0,0,function(a){return this.localeData().months(this,a)}),z("month","M"),N("M",Wc),N("MM",Wc,Sc),N("MMM",cd),N("MMMM",cd),Q(["M","MM"],function(a,b){b[gd]=q(a)-1}),Q(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),nd="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],rd=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),H(0,["YY",2],0,function(){return this.year()%100}),H(0,["YYYY",4],0,"year"),H(0,["YYYYY",5],0,"year"),H(0,["YYYYYY",6,!0],0,"year"),z("year","y"),N("Y",_c),N("YY",Wc,Sc),N("YYYY",Yc,Uc),N("YYYYY",Zc,Vc),N("YYYYYY",Zc,Vc),Q(["YYYYY","YYYYYY"],fd),Q("YYYY",function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q("YY",function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)>68?1900:2e3)};var td=C("FullYear",!1);H("w",["ww",2],"wo","week"),H("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),N("w",Wc),N("ww",Wc,Sc),N("W",Wc),N("WW",Wc,Sc),R(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),N("DDD",Xc),N("DDDD",Tc),Q(["DDD","DDDD"],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Da.apply(null,arguments);return this>a?this:a}),wd=aa("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Da.apply(null,arguments);return a>this?this:a});Ja("Z",":"),Ja("ZZ",""),N("Z",ad),N("ZZ",ad),Q(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,"add"),Bd=ab(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Cd=aa("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});H(0,["gg",2],0,function(){return this.weekYear()%100}),H(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Db("gggg","weekYear"),Db("ggggg","weekYear"),Db("GGGG","isoWeekYear"),Db("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),N("G",_c),N("g",_c),N("GG",Wc,Sc),N("gg",Wc,Sc),N("GGGG",Yc,Uc),N("gggg",Yc,Uc),N("GGGGG",Zc,Vc),N("ggggg",Zc,Vc),R(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H("Q",0,0,"quarter"),z("quarter","Q"),N("Q",Rc),Q("Q",function(a,b){b[gd]=3*(q(a)-1)}),H("D",["DD",2],"Do","date"),z("date","D"),N("D",Wc),N("DD",Wc,Sc),N("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q(["D","DD"],hd),Q("Do",function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C("Date",!0);H("d",0,"do","day"),H("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),H("e",0,0,"weekday"),H("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),N("d",Wc),N("e",Wc),N("E",Wc),N("dd",cd),N("ddd",cd),N("dddd",cd),R(["dd","ddd","dddd"],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R(["d","e","E"],function(a,b,c,d){b[d]=q(a)});var Ed="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Fd="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Gd="Su_Mo_Tu_We_Th_Fr_Sa".split("_");H("H",["HH",2],0,"hour"),H("h",["hh",2],0,function(){return this.hours()%12||12}),Sb("a",!0),Sb("A",!1),z("hour","h"),N("a",Tb),N("A",Tb),N("H",Wc),N("h",Wc),N("HH",Wc,Sc),N("hh",Wc,Sc),Q(["H","HH"],id),Q(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q(["h","hh"],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C("Hours",!0);H("m",["mm",2],0,"minute"),z("minute","m"),N("m",Wc),N("mm",Wc,Sc),Q(["m","mm"],jd);var Jd=C("Minutes",!1);H("s",["ss",2],0,"second"),z("second","s"),N("s",Wc),N("ss",Wc,Sc),Q(["s","ss"],kd);var Kd=C("Seconds",!1);H("S",0,0,function(){return~~(this.millisecond()/100)}),H(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),H(0,["SSS",3],0,"millisecond"),H(0,["SSSS",4],0,function(){return 10*this.millisecond()}),H(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),H(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),H(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),H(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),H(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),z("millisecond","ms"),N("S",Xc,Rc),N("SS",Xc,Sc),N("SSS",Xc,Tc);var Ld;for(Ld="SSSS";Ld.length<=9;Ld+="S")N(Ld,$c);for(Ld="S";Ld.length<=9;Ld+="S")Q(Ld,Wb);var Md=C("Milliseconds",!1);H("z",0,0,"zoneAbbr"),H("zz",0,0,"zoneName");var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
// Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa("dates accessor is deprecated. Use date instead.",Dd),Nd.months=aa("months accessor is deprecated. Use month instead",Y),Nd.years=aa("years accessor is deprecated. Use year instead",td),Nd.zone=aa("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Oa);var Od=Nd,Pd={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Qd={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Rd="Invalid date",Sd="%d",Td=/\d{1,2}/,Ud={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=aa("moment.lang is deprecated. Use moment.locale instead.",w),a.langData=aa("moment.langData is deprecated. Use moment.localeData instead.",y);var Wd=Math.abs,Xd=yc("ms"),Yd=yc("s"),Zd=yc("m"),$d=yc("h"),_d=yc("d"),ae=yc("w"),be=yc("M"),ce=yc("y"),de=Ac("milliseconds"),ee=Ac("seconds"),fe=Ac("minutes"),ge=Ac("hours"),he=Ac("days"),ie=Ac("months"),je=Ac("years"),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Gc),ne.lang=Cd,H("X",0,0,"unix"),H("x",0,0,"valueOf"),N("x",_c),N("X",bd),Q("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q("x",function(a,b,c){c._d=new Date(q(a))}),a.version="2.10.6",b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});

//! moment.js
//! version : 2.15.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
;(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'?module.exports=factory():typeof define==='function'&&define.amd?define(factory):global.moment=factory()}(this,function(){'use strict';var hookCallback;function utils_hooks__hooks(){return hookCallback.apply(null,arguments)}function setHookCallback(callback){hookCallback=callback}function isArray(input){return input instanceof Array||Object.prototype.toString.call(input)==='[object Array]'}function isObject(input){return input!=null&&Object.prototype.toString.call(input)==='[object Object]'}function isObjectEmpty(obj){var k;for(k in obj){return false}return true}function isDate(input){return input instanceof Date||Object.prototype.toString.call(input)==='[object Date]'}function map(arr,fn){var res=[],i;for(i=0;i<arr.length;++i){res.push(fn(arr[i],i))}return res}function hasOwnProp(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function extend(a,b){for(var i in b){if(hasOwnProp(b,i)){a[i]=b[i]}}if(hasOwnProp(b,'toString')){a.toString=b.toString}if(hasOwnProp(b,'valueOf')){a.valueOf=b.valueOf}return a}function create_utc__createUTC(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,true).utc()}function defaultParsingFlags(){return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],meridiem:null}}function getParsingFlags(m){if(m._pf==null){m._pf=defaultParsingFlags()}return m._pf}var some;if(Array.prototype.some){some=Array.prototype.some}else{some=function(fun){var t=Object(this);var len=t.length>>>0;for(var i=0;i<len;i++){if(i in t&&fun.call(this,t[i],i,t)){return true}}return false}}function valid__isValid(m){if(m._isValid==null){var flags=getParsingFlags(m);var parsedParts=some.call(flags.parsedDateParts,function(i){return i!=null});var isNowValid=!isNaN(m._d.getTime())&&flags.overflow<0&&!flags.empty&&!flags.invalidMonth&&!flags.invalidWeekday&&!flags.nullInput&&!flags.invalidFormat&&!flags.userInvalidated&&(!flags.meridiem||(flags.meridiem&&parsedParts));if(m._strict){isNowValid=isNowValid&&flags.charsLeftOver===0&&flags.unusedTokens.length===0&&flags.bigHour===undefined}if(Object.isFrozen==null||!Object.isFrozen(m)){m._isValid=isNowValid}else{return isNowValid}}return m._isValid}function valid__createInvalid(flags){var m=create_utc__createUTC(NaN);if(flags!=null){extend(getParsingFlags(m),flags)}else{getParsingFlags(m).userInvalidated=true}return m}function isUndefined(input){return input===void 0}var momentProperties=utils_hooks__hooks.momentProperties=[];function copyConfig(to,from){var i,prop,val;if(!isUndefined(from._isAMomentObject)){to._isAMomentObject=from._isAMomentObject}if(!isUndefined(from._i)){to._i=from._i}if(!isUndefined(from._f)){to._f=from._f}if(!isUndefined(from._l)){to._l=from._l}if(!isUndefined(from._strict)){to._strict=from._strict}if(!isUndefined(from._tzm)){to._tzm=from._tzm}if(!isUndefined(from._isUTC)){to._isUTC=from._isUTC}if(!isUndefined(from._offset)){to._offset=from._offset}if(!isUndefined(from._pf)){to._pf=getParsingFlags(from)}if(!isUndefined(from._locale)){to._locale=from._locale}if(momentProperties.length>0){for(i in momentProperties){prop=momentProperties[i];val=from[prop];if(!isUndefined(val)){to[prop]=val}}}return to}var updateInProgress=false;function Moment(config){copyConfig(this,config);this._d=new Date(config._d!=null?config._d.getTime():NaN);if(updateInProgress===false){updateInProgress=true;utils_hooks__hooks.updateOffset(this);updateInProgress=false}}function isMoment(obj){return obj instanceof Moment||(obj!=null&&obj._isAMomentObject!=null)}function absFloor(number){if(number<0){return Math.ceil(number)||0}else{return Math.floor(number)}}function toInt(argumentForCoercion){var coercedNumber=+argumentForCoercion,value=0;if(coercedNumber!==0&&isFinite(coercedNumber)){value=absFloor(coercedNumber)}return value}function compareArrays(array1,array2,dontConvert){var len=Math.min(array1.length,array2.length),lengthDiff=Math.abs(array1.length-array2.length),diffs=0,i;for(i=0;i<len;i++){if((dontConvert&&array1[i]!==array2[i])||(!dontConvert&&toInt(array1[i])!==toInt(array2[i]))){diffs++}}return diffs+lengthDiff}function warn(msg){if(utils_hooks__hooks.suppressDeprecationWarnings===false&&(typeof console!=='undefined')&&console.warn){console.warn('Deprecation warning: '+msg)}}function deprecate(msg,fn){var firstTime=true;return extend(function(){if(utils_hooks__hooks.deprecationHandler!=null){utils_hooks__hooks.deprecationHandler(null,msg)}if(firstTime){var args=[];var arg;for(var i=0;i<arguments.length;i++){arg='';if(typeof arguments[i]==='object'){arg+='\n['+i+'] ';for(var key in arguments[0]){arg+=key+': '+arguments[0][key]+', '}arg=arg.slice(0,-2)}else{arg=arguments[i]}args.push(arg)}warn(msg+'\nArguments: '+Array.prototype.slice.call(args).join('')+'\n'+(new Error()).stack);firstTime=false}return fn.apply(this,arguments)},fn)}var deprecations={};function deprecateSimple(name,msg){if(utils_hooks__hooks.deprecationHandler!=null){utils_hooks__hooks.deprecationHandler(name,msg)}if(!deprecations[name]){warn(msg);deprecations[name]=true}}utils_hooks__hooks.suppressDeprecationWarnings=false;utils_hooks__hooks.deprecationHandler=null;function isFunction(input){return input instanceof Function||Object.prototype.toString.call(input)==='[object Function]'}function locale_set__set(config){var prop,i;for(i in config){prop=config[i];if(isFunction(prop)){this[i]=prop}else{this['_'+i]=prop}}this._config=config;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+'|'+(/\d{1,2}/).source)}function mergeConfigs(parentConfig,childConfig){var res=extend({},parentConfig),prop;for(prop in childConfig){if(hasOwnProp(childConfig,prop)){if(isObject(parentConfig[prop])&&isObject(childConfig[prop])){res[prop]={};extend(res[prop],parentConfig[prop]);extend(res[prop],childConfig[prop])}else if(childConfig[prop]!=null){res[prop]=childConfig[prop]}else{delete res[prop]}}}for(prop in parentConfig){if(hasOwnProp(parentConfig,prop)&&!hasOwnProp(childConfig,prop)&&isObject(parentConfig[prop])){res[prop]=extend({},res[prop])}}return res}function Locale(config){if(config!=null){this.set(config)}}var keys;if(Object.keys){keys=Object.keys}else{keys=function(obj){var i,res=[];for(i in obj){if(hasOwnProp(obj,i)){res.push(i)}}return res}}var defaultCalendar={sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'};function locale_calendar__calendar(key,mom,now){var output=this._calendar[key]||this._calendar['sameElse'];return isFunction(output)?output.call(mom,now):output}var defaultLongDateFormat={LTS:'h:mm:ss A',LT:'h:mm A',L:'MM/DD/YYYY',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY h:mm A',LLLL:'dddd, MMMM D, YYYY h:mm A'};function longDateFormat(key){var format=this._longDateFormat[key],formatUpper=this._longDateFormat[key.toUpperCase()];if(format||!formatUpper){return format}this._longDateFormat[key]=formatUpper.replace(/MMMM|MM|DD|dddd/g,function(val){return val.slice(1)});return this._longDateFormat[key]}var defaultInvalidDate='Invalid date';function invalidDate(){return this._invalidDate}var defaultOrdinal='%d';var defaultOrdinalParse=/\d{1,2}/;function ordinal(number){return this._ordinal.replace('%d',number)}var defaultRelativeTime={future:'in %s',past:'%s ago',s:'a few seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'};function relative__relativeTime(number,withoutSuffix,string,isFuture){var output=this._relativeTime[string];return(isFunction(output))?output(number,withoutSuffix,string,isFuture):output.replace(/%d/i,number)}function pastFuture(diff,output){var format=this._relativeTime[diff>0?'future':'past'];return isFunction(format)?format(output):format.replace(/%s/i,output)}var aliases={};function addUnitAlias(unit,shorthand){var lowerCase=unit.toLowerCase();aliases[lowerCase]=aliases[lowerCase+'s']=aliases[shorthand]=unit}function normalizeUnits(units){return typeof units==='string'?aliases[units]||aliases[units.toLowerCase()]:undefined}function normalizeObjectUnits(inputObject){var normalizedInput={},normalizedProp,prop;for(prop in inputObject){if(hasOwnProp(inputObject,prop)){normalizedProp=normalizeUnits(prop);if(normalizedProp){normalizedInput[normalizedProp]=inputObject[prop]}}}return normalizedInput}var priorities={};function addUnitPriority(unit,priority){priorities[unit]=priority}function getPrioritizedUnits(unitsObj){var units=[];for(var u in unitsObj){units.push({unit:u,priority:priorities[u]})}units.sort(function(a,b){return a.priority-b.priority});return units}function makeGetSet(unit,keepTime){return function(value){if(value!=null){get_set__set(this,unit,value);utils_hooks__hooks.updateOffset(this,keepTime);return this}else{return get_set__get(this,unit)}}}function get_set__get(mom,unit){return mom.isValid()?mom._d['get'+(mom._isUTC?'UTC':'')+unit]():NaN}function get_set__set(mom,unit,value){if(mom.isValid()){mom._d['set'+(mom._isUTC?'UTC':'')+unit](value)}}function stringGet(units){units=normalizeUnits(units);if(isFunction(this[units])){return this[units]()}return this}function stringSet(units,value){if(typeof units==='object'){units=normalizeObjectUnits(units);var prioritized=getPrioritizedUnits(units);for(var i=0;i<prioritized.length;i++){this[prioritized[i].unit](units[prioritized[i].unit])}}else{units=normalizeUnits(units);if(isFunction(this[units])){return this[units](value)}}return this}function zeroFill(number,targetLength,forceSign){var absNumber=''+Math.abs(number),zerosToFill=targetLength-absNumber.length,sign=number>=0;return(sign?(forceSign?'+':''):'-')+Math.pow(10,Math.max(0,zerosToFill)).toString().substr(1)+absNumber}var formattingTokens=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var localFormattingTokens=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;var formatFunctions={};var formatTokenFunctions={};function addFormatToken(token,padded,ordinal,callback){var func=callback;if(typeof callback==='string'){func=function(){return this[callback]()}}if(token){formatTokenFunctions[token]=func}if(padded){formatTokenFunctions[padded[0]]=function(){return zeroFill(func.apply(this,arguments),padded[1],padded[2])}}if(ordinal){formatTokenFunctions[ordinal]=function(){return this.localeData().ordinal(func.apply(this,arguments),token)}}}function removeFormattingTokens(input){if(input.match(/\[[\s\S]/)){return input.replace(/^\[|\]$/g,'')}return input.replace(/\\/g,'')}function makeFormatFunction(format){var array=format.match(formattingTokens),i,length;for(i=0,length=array.length;i<length;i++){if(formatTokenFunctions[array[i]]){array[i]=formatTokenFunctions[array[i]]}else{array[i]=removeFormattingTokens(array[i])}}return function(mom){var output='',i;for(i=0;i<length;i++){output+=array[i]instanceof Function?array[i].call(mom,format):array[i]}return output}}function formatMoment(m,format){if(!m.isValid()){return m.localeData().invalidDate()}format=expandFormat(format,m.localeData());formatFunctions[format]=formatFunctions[format]||makeFormatFunction(format);return formatFunctions[format](m)}function expandFormat(format,locale){var i=5;function replaceLongDateFormatTokens(input){return locale.longDateFormat(input)||input}localFormattingTokens.lastIndex=0;while(i>=0&&localFormattingTokens.test(format)){format=format.replace(localFormattingTokens,replaceLongDateFormatTokens);localFormattingTokens.lastIndex=0;i-=1}return format}var match1=/\d/;var match2=/\d\d/;var match3=/\d{3}/;var match4=/\d{4}/;var match6=/[+-]?\d{6}/;var match1to2=/\d\d?/;var match3to4=/\d\d\d\d?/;var match5to6=/\d\d\d\d\d\d?/;var match1to3=/\d{1,3}/;var match1to4=/\d{1,4}/;var match1to6=/[+-]?\d{1,6}/;var matchUnsigned=/\d+/;var matchSigned=/[+-]?\d+/;var matchOffset=/Z|[+-]\d\d:?\d\d/gi;var matchShortOffset=/Z|[+-]\d\d(?::?\d\d)?/gi;var matchTimestamp=/[+-]?\d+(\.\d{1,3})?/;var matchWord=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;var regexes={};function addRegexToken(token,regex,strictRegex){regexes[token]=isFunction(regex)?regex:function(isStrict,localeData){return(isStrict&&strictRegex)?strictRegex:regex}}function getParseRegexForToken(token,config){if(!hasOwnProp(regexes,token)){return new RegExp(unescapeFormat(token))}return regexes[token](config._strict,config._locale)}function unescapeFormat(s){return regexEscape(s.replace('\\','').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(matched,p1,p2,p3,p4){return p1||p2||p3||p4}))}function regexEscape(s){return s.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&')}var tokens={};function addParseToken(token,callback){var i,func=callback;if(typeof token==='string'){token=[token]}if(typeof callback==='number'){func=function(input,array){array[callback]=toInt(input)}}for(i=0;i<token.length;i++){tokens[token[i]]=func}}function addWeekParseToken(token,callback){addParseToken(token,function(input,array,config,token){config._w=config._w||{};callback(input,config._w,config,token)})}function addTimeToArrayFromToken(token,input,config){if(input!=null&&hasOwnProp(tokens,token)){tokens[token](input,config._a,config,token)}}var YEAR=0;var MONTH=1;var DATE=2;var HOUR=3;var MINUTE=4;var SECOND=5;var MILLISECOND=6;var WEEK=7;var WEEKDAY=8;var indexOf;if(Array.prototype.indexOf){indexOf=Array.prototype.indexOf}else{indexOf=function(o){var i;for(i=0;i<this.length;++i){if(this[i]===o){return i}}return-1}}function daysInMonth(year,month){return new Date(Date.UTC(year,month+1,0)).getUTCDate()}addFormatToken('M',['MM',2],'Mo',function(){return this.month()+1});addFormatToken('MMM',0,0,function(format){return this.localeData().monthsShort(this,format)});addFormatToken('MMMM',0,0,function(format){return this.localeData().months(this,format)});addUnitAlias('month','M');addUnitPriority('month',8);addRegexToken('M',match1to2);addRegexToken('MM',match1to2,match2);addRegexToken('MMM',function(isStrict,locale){return locale.monthsShortRegex(isStrict)});addRegexToken('MMMM',function(isStrict,locale){return locale.monthsRegex(isStrict)});addParseToken(['M','MM'],function(input,array){array[MONTH]=toInt(input)-1});addParseToken(['MMM','MMMM'],function(input,array,config,token){var month=config._locale.monthsParse(input,token,config._strict);if(month!=null){array[MONTH]=month}else{getParsingFlags(config).invalidMonth=input}});var MONTHS_IN_FORMAT=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;var defaultLocaleMonths='January_February_March_April_May_June_July_August_September_October_November_December'.split('_');function localeMonths(m,format){if(!m){return this._months}return isArray(this._months)?this._months[m.month()]:this._months[(this._months.isFormat||MONTHS_IN_FORMAT).test(format)?'format':'standalone'][m.month()]}var defaultLocaleMonthsShort='Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');function localeMonthsShort(m,format){if(!m){return this._monthsShort}return isArray(this._monthsShort)?this._monthsShort[m.month()]:this._monthsShort[MONTHS_IN_FORMAT.test(format)?'format':'standalone'][m.month()]}function units_month__handleStrictParse(monthName,format,strict){var i,ii,mom,llc=monthName.toLocaleLowerCase();if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(i=0;i<12;++i){mom=create_utc__createUTC([2000,i]);this._shortMonthsParse[i]=this.monthsShort(mom,'').toLocaleLowerCase();this._longMonthsParse[i]=this.months(mom,'').toLocaleLowerCase()}}if(strict){if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null}else{ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null}}else{if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null}else{ii=indexOf.call(this._longMonthsParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null}}}function localeMonthsParse(monthName,format,strict){var i,mom,regex;if(this._monthsParseExact){return units_month__handleStrictParse.call(this,monthName,format,strict)}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[]}for(i=0;i<12;i++){mom=create_utc__createUTC([2000,i]);if(strict&&!this._longMonthsParse[i]){this._longMonthsParse[i]=new RegExp('^'+this.months(mom,'').replace('.','')+'$','i');this._shortMonthsParse[i]=new RegExp('^'+this.monthsShort(mom,'').replace('.','')+'$','i')}if(!strict&&!this._monthsParse[i]){regex='^'+this.months(mom,'')+'|^'+this.monthsShort(mom,'');this._monthsParse[i]=new RegExp(regex.replace('.',''),'i')}if(strict&&format==='MMMM'&&this._longMonthsParse[i].test(monthName)){return i}else if(strict&&format==='MMM'&&this._shortMonthsParse[i].test(monthName)){return i}else if(!strict&&this._monthsParse[i].test(monthName)){return i}}}function setMonth(mom,value){var dayOfMonth;if(!mom.isValid()){return mom}if(typeof value==='string'){if(/^\d+$/.test(value)){value=toInt(value)}else{value=mom.localeData().monthsParse(value);if(typeof value!=='number'){return mom}}}dayOfMonth=Math.min(mom.date(),daysInMonth(mom.year(),value));mom._d['set'+(mom._isUTC?'UTC':'')+'Month'](value,dayOfMonth);return mom}function getSetMonth(value){if(value!=null){setMonth(this,value);utils_hooks__hooks.updateOffset(this,true);return this}else{return get_set__get(this,'Month')}}function getDaysInMonth(){return daysInMonth(this.year(),this.month())}var defaultMonthsShortRegex=matchWord;function monthsShortRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this)}if(isStrict){return this._monthsShortStrictRegex}else{return this._monthsShortRegex}}else{if(!hasOwnProp(this,'_monthsShortRegex')){this._monthsShortRegex=defaultMonthsShortRegex}return this._monthsShortStrictRegex&&isStrict?this._monthsShortStrictRegex:this._monthsShortRegex}}var defaultMonthsRegex=matchWord;function monthsRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this)}if(isStrict){return this._monthsStrictRegex}else{return this._monthsRegex}}else{if(!hasOwnProp(this,'_monthsRegex')){this._monthsRegex=defaultMonthsRegex}return this._monthsStrictRegex&&isStrict?this._monthsStrictRegex:this._monthsRegex}}function computeMonthsParse(){function cmpLenRev(a,b){return b.length-a.length}var shortPieces=[],longPieces=[],mixedPieces=[],i,mom;for(i=0;i<12;i++){mom=create_utc__createUTC([2000,i]);shortPieces.push(this.monthsShort(mom,''));longPieces.push(this.months(mom,''));mixedPieces.push(this.months(mom,''));mixedPieces.push(this.monthsShort(mom,''))}shortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);for(i=0;i<12;i++){shortPieces[i]=regexEscape(shortPieces[i]);longPieces[i]=regexEscape(longPieces[i])}for(i=0;i<24;i++){mixedPieces[i]=regexEscape(mixedPieces[i])}this._monthsRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._monthsShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i')}addFormatToken('Y',0,0,function(){var y=this.year();return y<=9999?''+y:'+'+y});addFormatToken(0,['YY',2],0,function(){return this.year()%100});addFormatToken(0,['YYYY',4],0,'year');addFormatToken(0,['YYYYY',5],0,'year');addFormatToken(0,['YYYYYY',6,true],0,'year');addUnitAlias('year','y');addUnitPriority('year',1);addRegexToken('Y',matchSigned);addRegexToken('YY',match1to2,match2);addRegexToken('YYYY',match1to4,match4);addRegexToken('YYYYY',match1to6,match6);addRegexToken('YYYYYY',match1to6,match6);addParseToken(['YYYYY','YYYYYY'],YEAR);addParseToken('YYYY',function(input,array){array[YEAR]=input.length===2?utils_hooks__hooks.parseTwoDigitYear(input):toInt(input)});addParseToken('YY',function(input,array){array[YEAR]=utils_hooks__hooks.parseTwoDigitYear(input)});addParseToken('Y',function(input,array){array[YEAR]=parseInt(input,10)});function daysInYear(year){return isLeapYear(year)?366:365}function isLeapYear(year){return(year%4===0&&year%100!==0)||year%400===0}utils_hooks__hooks.parseTwoDigitYear=function(input){return toInt(input)+(toInt(input)>68?1900:2000)};var getSetYear=makeGetSet('FullYear',true);function getIsLeapYear(){return isLeapYear(this.year())}function createDate(y,m,d,h,M,s,ms){var date=new Date(y,m,d,h,M,s,ms);if(y<100&&y>=0&&isFinite(date.getFullYear())){date.setFullYear(y)}return date}function createUTCDate(y){var date=new Date(Date.UTC.apply(null,arguments));if(y<100&&y>=0&&isFinite(date.getUTCFullYear())){date.setUTCFullYear(y)}return date}function firstWeekOffset(year,dow,doy){var fwd=7+dow-doy,fwdlw=(7+createUTCDate(year,0,fwd).getUTCDay()-dow)%7;return-fwdlw+fwd-1}function dayOfYearFromWeeks(year,week,weekday,dow,doy){var localWeekday=(7+weekday-dow)%7,weekOffset=firstWeekOffset(year,dow,doy),dayOfYear=1+7*(week-1)+localWeekday+weekOffset,resYear,resDayOfYear;if(dayOfYear<=0){resYear=year-1;resDayOfYear=daysInYear(resYear)+dayOfYear}else if(dayOfYear>daysInYear(year)){resYear=year+1;resDayOfYear=dayOfYear-daysInYear(year)}else{resYear=year;resDayOfYear=dayOfYear}return{year:resYear,dayOfYear:resDayOfYear}}function weekOfYear(mom,dow,doy){var weekOffset=firstWeekOffset(mom.year(),dow,doy),week=Math.floor((mom.dayOfYear()-weekOffset-1)/7)+1,resWeek,resYear;if(week<1){resYear=mom.year()-1;resWeek=week+weeksInYear(resYear,dow,doy)}else if(week>weeksInYear(mom.year(),dow,doy)){resWeek=week-weeksInYear(mom.year(),dow,doy);resYear=mom.year()+1}else{resYear=mom.year();resWeek=week}return{week:resWeek,year:resYear}}function weeksInYear(year,dow,doy){var weekOffset=firstWeekOffset(year,dow,doy),weekOffsetNext=firstWeekOffset(year+1,dow,doy);return(daysInYear(year)-weekOffset+weekOffsetNext)/7}addFormatToken('w',['ww',2],'wo','week');addFormatToken('W',['WW',2],'Wo','isoWeek');addUnitAlias('week','w');addUnitAlias('isoWeek','W');addUnitPriority('week',5);addUnitPriority('isoWeek',5);addRegexToken('w',match1to2);addRegexToken('ww',match1to2,match2);addRegexToken('W',match1to2);addRegexToken('WW',match1to2,match2);addWeekParseToken(['w','ww','W','WW'],function(input,week,config,token){week[token.substr(0,1)]=toInt(input)});function localeWeek(mom){return weekOfYear(mom,this._week.dow,this._week.doy).week}var defaultLocaleWeek={dow:0,doy:6};function localeFirstDayOfWeek(){return this._week.dow}function localeFirstDayOfYear(){return this._week.doy}function getSetWeek(input){var week=this.localeData().week(this);return input==null?week:this.add((input-week)*7,'d')}function getSetISOWeek(input){var week=weekOfYear(this,1,4).week;return input==null?week:this.add((input-week)*7,'d')}addFormatToken('d',0,'do','day');addFormatToken('dd',0,0,function(format){return this.localeData().weekdaysMin(this,format)});addFormatToken('ddd',0,0,function(format){return this.localeData().weekdaysShort(this,format)});addFormatToken('dddd',0,0,function(format){return this.localeData().weekdays(this,format)});addFormatToken('e',0,0,'weekday');addFormatToken('E',0,0,'isoWeekday');addUnitAlias('day','d');addUnitAlias('weekday','e');addUnitAlias('isoWeekday','E');addUnitPriority('day',11);addUnitPriority('weekday',11);addUnitPriority('isoWeekday',11);addRegexToken('d',match1to2);addRegexToken('e',match1to2);addRegexToken('E',match1to2);addRegexToken('dd',function(isStrict,locale){return locale.weekdaysMinRegex(isStrict)});addRegexToken('ddd',function(isStrict,locale){return locale.weekdaysShortRegex(isStrict)});addRegexToken('dddd',function(isStrict,locale){return locale.weekdaysRegex(isStrict)});addWeekParseToken(['dd','ddd','dddd'],function(input,week,config,token){var weekday=config._locale.weekdaysParse(input,token,config._strict);if(weekday!=null){week.d=weekday}else{getParsingFlags(config).invalidWeekday=input}});addWeekParseToken(['d','e','E'],function(input,week,config,token){week[token]=toInt(input)});function parseWeekday(input,locale){if(typeof input!=='string'){return input}if(!isNaN(input)){return parseInt(input,10)}input=locale.weekdaysParse(input);if(typeof input==='number'){return input}return null}function parseIsoWeekday(input,locale){if(typeof input==='string'){return locale.weekdaysParse(input)%7||7}return isNaN(input)?null:input}var defaultLocaleWeekdays='Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');function localeWeekdays(m,format){if(!m){return this._weekdays}return isArray(this._weekdays)?this._weekdays[m.day()]:this._weekdays[this._weekdays.isFormat.test(format)?'format':'standalone'][m.day()]}var defaultLocaleWeekdaysShort='Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');function localeWeekdaysShort(m){return(m)?this._weekdaysShort[m.day()]:this._weekdaysShort}var defaultLocaleWeekdaysMin='Su_Mo_Tu_We_Th_Fr_Sa'.split('_');function localeWeekdaysMin(m){return(m)?this._weekdaysMin[m.day()]:this._weekdaysMin}function day_of_week__handleStrictParse(weekdayName,format,strict){var i,ii,mom,llc=weekdayName.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(i=0;i<7;++i){mom=create_utc__createUTC([2000,1]).day(i);this._minWeekdaysParse[i]=this.weekdaysMin(mom,'').toLocaleLowerCase();this._shortWeekdaysParse[i]=this.weekdaysShort(mom,'').toLocaleLowerCase();this._weekdaysParse[i]=this.weekdays(mom,'').toLocaleLowerCase()}}if(strict){if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);return ii!==-1?ii:null}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null}else{ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null}}else{if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null}else{ii=indexOf.call(this._minWeekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii}ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null}}}function localeWeekdaysParse(weekdayName,format,strict){var i,mom,regex;if(this._weekdaysParseExact){return day_of_week__handleStrictParse.call(this,weekdayName,format,strict)}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[]}for(i=0;i<7;i++){mom=create_utc__createUTC([2000,1]).day(i);if(strict&&!this._fullWeekdaysParse[i]){this._fullWeekdaysParse[i]=new RegExp('^'+this.weekdays(mom,'').replace('.','\.?')+'$','i');this._shortWeekdaysParse[i]=new RegExp('^'+this.weekdaysShort(mom,'').replace('.','\.?')+'$','i');this._minWeekdaysParse[i]=new RegExp('^'+this.weekdaysMin(mom,'').replace('.','\.?')+'$','i')}if(!this._weekdaysParse[i]){regex='^'+this.weekdays(mom,'')+'|^'+this.weekdaysShort(mom,'')+'|^'+this.weekdaysMin(mom,'');this._weekdaysParse[i]=new RegExp(regex.replace('.',''),'i')}if(strict&&format==='dddd'&&this._fullWeekdaysParse[i].test(weekdayName)){return i}else if(strict&&format==='ddd'&&this._shortWeekdaysParse[i].test(weekdayName)){return i}else if(strict&&format==='dd'&&this._minWeekdaysParse[i].test(weekdayName)){return i}else if(!strict&&this._weekdaysParse[i].test(weekdayName)){return i}}}function getSetDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN}var day=this._isUTC?this._d.getUTCDay():this._d.getDay();if(input!=null){input=parseWeekday(input,this.localeData());return this.add(input-day,'d')}else{return day}}function getSetLocaleDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN}var weekday=(this.day()+7-this.localeData()._week.dow)%7;return input==null?weekday:this.add(input-weekday,'d')}function getSetISODayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN}if(input!=null){var weekday=parseIsoWeekday(input,this.localeData());return this.day(this.day()%7?weekday:weekday-7)}else{return this.day()||7}}var defaultWeekdaysRegex=matchWord;function weekdaysRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this)}if(isStrict){return this._weekdaysStrictRegex}else{return this._weekdaysRegex}}else{if(!hasOwnProp(this,'_weekdaysRegex')){this._weekdaysRegex=defaultWeekdaysRegex}return this._weekdaysStrictRegex&&isStrict?this._weekdaysStrictRegex:this._weekdaysRegex}}var defaultWeekdaysShortRegex=matchWord;function weekdaysShortRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this)}if(isStrict){return this._weekdaysShortStrictRegex}else{return this._weekdaysShortRegex}}else{if(!hasOwnProp(this,'_weekdaysShortRegex')){this._weekdaysShortRegex=defaultWeekdaysShortRegex}return this._weekdaysShortStrictRegex&&isStrict?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}}var defaultWeekdaysMinRegex=matchWord;function weekdaysMinRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this)}if(isStrict){return this._weekdaysMinStrictRegex}else{return this._weekdaysMinRegex}}else{if(!hasOwnProp(this,'_weekdaysMinRegex')){this._weekdaysMinRegex=defaultWeekdaysMinRegex}return this._weekdaysMinStrictRegex&&isStrict?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}}function computeWeekdaysParse(){function cmpLenRev(a,b){return b.length-a.length}var minPieces=[],shortPieces=[],longPieces=[],mixedPieces=[],i,mom,minp,shortp,longp;for(i=0;i<7;i++){mom=create_utc__createUTC([2000,1]).day(i);minp=this.weekdaysMin(mom,'');shortp=this.weekdaysShort(mom,'');longp=this.weekdays(mom,'');minPieces.push(minp);shortPieces.push(shortp);longPieces.push(longp);mixedPieces.push(minp);mixedPieces.push(shortp);mixedPieces.push(longp)}minPieces.sort(cmpLenRev);shortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);for(i=0;i<7;i++){shortPieces[i]=regexEscape(shortPieces[i]);longPieces[i]=regexEscape(longPieces[i]);mixedPieces[i]=regexEscape(mixedPieces[i])}this._weekdaysRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._weekdaysShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i');this._weekdaysMinStrictRegex=new RegExp('^('+minPieces.join('|')+')','i')}function hFormat(){return this.hours()%12||12}function kFormat(){return this.hours()||24}addFormatToken('H',['HH',2],0,'hour');addFormatToken('h',['hh',2],0,hFormat);addFormatToken('k',['kk',2],0,kFormat);addFormatToken('hmm',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2)});addFormatToken('hmmss',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2)});addFormatToken('Hmm',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2)});addFormatToken('Hmmss',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2)});function meridiem(token,lowercase){addFormatToken(token,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),lowercase)})}meridiem('a',true);meridiem('A',false);addUnitAlias('hour','h');addUnitPriority('hour',13);function matchMeridiem(isStrict,locale){return locale._meridiemParse}addRegexToken('a',matchMeridiem);addRegexToken('A',matchMeridiem);addRegexToken('H',match1to2);addRegexToken('h',match1to2);addRegexToken('HH',match1to2,match2);addRegexToken('hh',match1to2,match2);addRegexToken('hmm',match3to4);addRegexToken('hmmss',match5to6);addRegexToken('Hmm',match3to4);addRegexToken('Hmmss',match5to6);addParseToken(['H','HH'],HOUR);addParseToken(['a','A'],function(input,array,config){config._isPm=config._locale.isPM(input);config._meridiem=input});addParseToken(['h','hh'],function(input,array,config){array[HOUR]=toInt(input);getParsingFlags(config).bigHour=true});addParseToken('hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos));getParsingFlags(config).bigHour=true});addParseToken('hmmss',function(input,array,config){var pos1=input.length-4;var pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2));getParsingFlags(config).bigHour=true});addParseToken('Hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos))});addParseToken('Hmmss',function(input,array,config){var pos1=input.length-4;var pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2))});function localeIsPM(input){return((input+'').toLowerCase().charAt(0)==='p')}var defaultLocaleMeridiemParse=/[ap]\.?m?\.?/i;function localeMeridiem(hours,minutes,isLower){if(hours>11){return isLower?'pm':'PM'}else{return isLower?'am':'AM'}}var getSetHour=makeGetSet('Hours',true);var baseConfig={calendar:defaultCalendar,longDateFormat:defaultLongDateFormat,invalidDate:defaultInvalidDate,ordinal:defaultOrdinal,ordinalParse:defaultOrdinalParse,relativeTime:defaultRelativeTime,months:defaultLocaleMonths,monthsShort:defaultLocaleMonthsShort,week:defaultLocaleWeek,weekdays:defaultLocaleWeekdays,weekdaysMin:defaultLocaleWeekdaysMin,weekdaysShort:defaultLocaleWeekdaysShort,meridiemParse:defaultLocaleMeridiemParse};var locales={};var globalLocale;function normalizeLocale(key){return key?key.toLowerCase().replace('_','-'):key}function chooseLocale(names){var i=0,j,next,locale,split;while(i<names.length){split=normalizeLocale(names[i]).split('-');j=split.length;next=normalizeLocale(names[i+1]);next=next?next.split('-'):null;while(j>0){locale=loadLocale(split.slice(0,j).join('-'));if(locale){return locale}if(next&&next.length>=j&&compareArrays(split,next,true)>=j-1){break}j--}i++}return null}function loadLocale(name){var oldLocale=null;if(!locales[name]&&(typeof module!=='undefined')&&module&&module.exports){try{oldLocale=globalLocale._abbr;require('./locale/'+name);locale_locales__getSetGlobalLocale(oldLocale)}catch(e){}}return locales[name]}function locale_locales__getSetGlobalLocale(key,values){var data;if(key){if(isUndefined(values)){data=locale_locales__getLocale(key)}else{data=defineLocale(key,values)}if(data){globalLocale=data}}return globalLocale._abbr}function defineLocale(name,config){if(config!==null){var parentConfig=baseConfig;config.abbr=name;if(locales[name]!=null){deprecateSimple('defineLocaleOverride','use moment.updateLocale(localeName, config) to change '+'an existing locale. moment.defineLocale(localeName, '+'config) should only be used for creating a new locale '+'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');parentConfig=locales[name]._config}else if(config.parentLocale!=null){if(locales[config.parentLocale]!=null){parentConfig=locales[config.parentLocale]._config}else{deprecateSimple('parentLocaleUndefined','specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/')}}locales[name]=new Locale(mergeConfigs(parentConfig,config));locale_locales__getSetGlobalLocale(name);return locales[name]}else{delete locales[name];return null}}function updateLocale(name,config){if(config!=null){var locale,parentConfig=baseConfig;if(locales[name]!=null){parentConfig=locales[name]._config}config=mergeConfigs(parentConfig,config);locale=new Locale(config);locale.parentLocale=locales[name];locales[name]=locale;locale_locales__getSetGlobalLocale(name)}else{if(locales[name]!=null){if(locales[name].parentLocale!=null){locales[name]=locales[name].parentLocale}else if(locales[name]!=null){delete locales[name]}}}return locales[name]}function locale_locales__getLocale(key){var locale;if(key&&key._locale&&key._locale._abbr){key=key._locale._abbr}if(!key){return globalLocale}if(!isArray(key)){locale=loadLocale(key);if(locale){return locale}key=[key]}return chooseLocale(key)}function locale_locales__listLocales(){return keys(locales)}function checkOverflow(m){var overflow;var a=m._a;if(a&&getParsingFlags(m).overflow===-2){overflow=a[MONTH]<0||a[MONTH]>11?MONTH:a[DATE]<1||a[DATE]>daysInMonth(a[YEAR],a[MONTH])?DATE:a[HOUR]<0||a[HOUR]>24||(a[HOUR]===24&&(a[MINUTE]!==0||a[SECOND]!==0||a[MILLISECOND]!==0))?HOUR:a[MINUTE]<0||a[MINUTE]>59?MINUTE:a[SECOND]<0||a[SECOND]>59?SECOND:a[MILLISECOND]<0||a[MILLISECOND]>999?MILLISECOND:-1;if(getParsingFlags(m)._overflowDayOfYear&&(overflow<YEAR||overflow>DATE)){overflow=DATE}if(getParsingFlags(m)._overflowWeeks&&overflow===-1){overflow=WEEK}if(getParsingFlags(m)._overflowWeekday&&overflow===-1){overflow=WEEKDAY}getParsingFlags(m).overflow=overflow}return m}var extendedIsoRegex=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;var basicIsoRegex=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;var tzRegex=/Z|[+-]\d\d(?::?\d\d)?/;var isoDates=[['YYYYYY-MM-DD',/[+-]\d{6}-\d\d-\d\d/],['YYYY-MM-DD',/\d{4}-\d\d-\d\d/],['GGGG-[W]WW-E',/\d{4}-W\d\d-\d/],['GGGG-[W]WW',/\d{4}-W\d\d/,false],['YYYY-DDD',/\d{4}-\d{3}/],['YYYY-MM',/\d{4}-\d\d/,false],['YYYYYYMMDD',/[+-]\d{10}/],['YYYYMMDD',/\d{8}/],['GGGG[W]WWE',/\d{4}W\d{3}/],['GGGG[W]WW',/\d{4}W\d{2}/,false],['YYYYDDD',/\d{7}/]];var isoTimes=[['HH:mm:ss.SSSS',/\d\d:\d\d:\d\d\.\d+/],['HH:mm:ss,SSSS',/\d\d:\d\d:\d\d,\d+/],['HH:mm:ss',/\d\d:\d\d:\d\d/],['HH:mm',/\d\d:\d\d/],['HHmmss.SSSS',/\d\d\d\d\d\d\.\d+/],['HHmmss,SSSS',/\d\d\d\d\d\d,\d+/],['HHmmss',/\d\d\d\d\d\d/],['HHmm',/\d\d\d\d/],['HH',/\d\d/]];var aspNetJsonRegex=/^\/?Date\((\-?\d+)/i;function configFromISO(config){var i,l,string=config._i,match=extendedIsoRegex.exec(string)||basicIsoRegex.exec(string),allowTime,dateFormat,timeFormat,tzFormat;if(match){getParsingFlags(config).iso=true;for(i=0,l=isoDates.length;i<l;i++){if(isoDates[i][1].exec(match[1])){dateFormat=isoDates[i][0];allowTime=isoDates[i][2]!==false;break}}if(dateFormat==null){config._isValid=false;return}if(match[3]){for(i=0,l=isoTimes.length;i<l;i++){if(isoTimes[i][1].exec(match[3])){timeFormat=(match[2]||' ')+isoTimes[i][0];break}}if(timeFormat==null){config._isValid=false;return}}if(!allowTime&&timeFormat!=null){config._isValid=false;return}if(match[4]){if(tzRegex.exec(match[4])){tzFormat='Z'}else{config._isValid=false;return}}config._f=dateFormat+(timeFormat||'')+(tzFormat||'');configFromStringAndFormat(config)}else{config._isValid=false}}function configFromString(config){var matched=aspNetJsonRegex.exec(config._i);if(matched!==null){config._d=new Date(+matched[1]);return}configFromISO(config);if(config._isValid===false){delete config._isValid;utils_hooks__hooks.createFromInputFallback(config)}}utils_hooks__hooks.createFromInputFallback=deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), '+'which is not reliable across all browsers and versions. Non ISO date formats are '+'discouraged and will be removed in an upcoming major release. Please refer to '+'http://momentjs.com/guides/#/warnings/js-date/ for more info.',function(config){config._d=new Date(config._i+(config._useUTC?' UTC':''))});function defaults(a,b,c){if(a!=null){return a}if(b!=null){return b}return c}function currentDateArray(config){var nowValue=new Date(utils_hooks__hooks.now());if(config._useUTC){return[nowValue.getUTCFullYear(),nowValue.getUTCMonth(),nowValue.getUTCDate()]}return[nowValue.getFullYear(),nowValue.getMonth(),nowValue.getDate()]}function configFromArray(config){var i,date,input=[],currentDate,yearToUse;if(config._d){return}currentDate=currentDateArray(config);if(config._w&&config._a[DATE]==null&&config._a[MONTH]==null){dayOfYearFromWeekInfo(config)}if(config._dayOfYear){yearToUse=defaults(config._a[YEAR],currentDate[YEAR]);if(config._dayOfYear>daysInYear(yearToUse)){getParsingFlags(config)._overflowDayOfYear=true}date=createUTCDate(yearToUse,0,config._dayOfYear);config._a[MONTH]=date.getUTCMonth();config._a[DATE]=date.getUTCDate()}for(i=0;i<3&&config._a[i]==null;++i){config._a[i]=input[i]=currentDate[i]}for(;i<7;i++){config._a[i]=input[i]=(config._a[i]==null)?(i===2?1:0):config._a[i]}if(config._a[HOUR]===24&&config._a[MINUTE]===0&&config._a[SECOND]===0&&config._a[MILLISECOND]===0){config._nextDay=true;config._a[HOUR]=0}config._d=(config._useUTC?createUTCDate:createDate).apply(null,input);if(config._tzm!=null){config._d.setUTCMinutes(config._d.getUTCMinutes()-config._tzm)}if(config._nextDay){config._a[HOUR]=24}}function dayOfYearFromWeekInfo(config){var w,weekYear,week,weekday,dow,doy,temp,weekdayOverflow;w=config._w;if(w.GG!=null||w.W!=null||w.E!=null){dow=1;doy=4;weekYear=defaults(w.GG,config._a[YEAR],weekOfYear(local__createLocal(),1,4).year);week=defaults(w.W,1);weekday=defaults(w.E,1);if(weekday<1||weekday>7){weekdayOverflow=true}}else{dow=config._locale._week.dow;doy=config._locale._week.doy;weekYear=defaults(w.gg,config._a[YEAR],weekOfYear(local__createLocal(),dow,doy).year);week=defaults(w.w,1);if(w.d!=null){weekday=w.d;if(weekday<0||weekday>6){weekdayOverflow=true}}else if(w.e!=null){weekday=w.e+dow;if(w.e<0||w.e>6){weekdayOverflow=true}}else{weekday=dow}}if(week<1||week>weeksInYear(weekYear,dow,doy)){getParsingFlags(config)._overflowWeeks=true}else if(weekdayOverflow!=null){getParsingFlags(config)._overflowWeekday=true}else{temp=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy);config._a[YEAR]=temp.year;config._dayOfYear=temp.dayOfYear}}utils_hooks__hooks.ISO_8601=function(){};function configFromStringAndFormat(config){if(config._f===utils_hooks__hooks.ISO_8601){configFromISO(config);return}config._a=[];getParsingFlags(config).empty=true;var string=''+config._i,i,parsedInput,tokens,token,skipped,stringLength=string.length,totalParsedInputLength=0;tokens=expandFormat(config._f,config._locale).match(formattingTokens)||[];for(i=0;i<tokens.length;i++){token=tokens[i];parsedInput=(string.match(getParseRegexForToken(token,config))||[])[0];if(parsedInput){skipped=string.substr(0,string.indexOf(parsedInput));if(skipped.length>0){getParsingFlags(config).unusedInput.push(skipped)}string=string.slice(string.indexOf(parsedInput)+parsedInput.length);totalParsedInputLength+=parsedInput.length}if(formatTokenFunctions[token]){if(parsedInput){getParsingFlags(config).empty=false}else{getParsingFlags(config).unusedTokens.push(token)}addTimeToArrayFromToken(token,parsedInput,config)}else if(config._strict&&!parsedInput){getParsingFlags(config).unusedTokens.push(token)}}getParsingFlags(config).charsLeftOver=stringLength-totalParsedInputLength;if(string.length>0){getParsingFlags(config).unusedInput.push(string)}if(config._a[HOUR]<=12&&getParsingFlags(config).bigHour===true&&config._a[HOUR]>0){getParsingFlags(config).bigHour=undefined}getParsingFlags(config).parsedDateParts=config._a.slice(0);getParsingFlags(config).meridiem=config._meridiem;config._a[HOUR]=meridiemFixWrap(config._locale,config._a[HOUR],config._meridiem);configFromArray(config);checkOverflow(config)}function meridiemFixWrap(locale,hour,meridiem){var isPm;if(meridiem==null){return hour}if(locale.meridiemHour!=null){return locale.meridiemHour(hour,meridiem)}else if(locale.isPM!=null){isPm=locale.isPM(meridiem);if(isPm&&hour<12){hour+=12}if(!isPm&&hour===12){hour=0}return hour}else{return hour}}function configFromStringAndArray(config){var tempConfig,bestMoment,scoreToBeat,i,currentScore;if(config._f.length===0){getParsingFlags(config).invalidFormat=true;config._d=new Date(NaN);return}for(i=0;i<config._f.length;i++){currentScore=0;tempConfig=copyConfig({},config);if(config._useUTC!=null){tempConfig._useUTC=config._useUTC}tempConfig._f=config._f[i];configFromStringAndFormat(tempConfig);if(!valid__isValid(tempConfig)){continue}currentScore+=getParsingFlags(tempConfig).charsLeftOver;currentScore+=getParsingFlags(tempConfig).unusedTokens.length*10;getParsingFlags(tempConfig).score=currentScore;if(scoreToBeat==null||currentScore<scoreToBeat){scoreToBeat=currentScore;bestMoment=tempConfig}}extend(config,bestMoment||tempConfig)}function configFromObject(config){if(config._d){return}var i=normalizeObjectUnits(config._i);config._a=map([i.year,i.month,i.day||i.date,i.hour,i.minute,i.second,i.millisecond],function(obj){return obj&&parseInt(obj,10)});configFromArray(config)}function createFromConfig(config){var res=new Moment(checkOverflow(prepareConfig(config)));if(res._nextDay){res.add(1,'d');res._nextDay=undefined}return res}function prepareConfig(config){var input=config._i,format=config._f;config._locale=config._locale||locale_locales__getLocale(config._l);if(input===null||(format===undefined&&input==='')){return valid__createInvalid({nullInput:true})}if(typeof input==='string'){config._i=input=config._locale.preparse(input)}if(isMoment(input)){return new Moment(checkOverflow(input))}else if(isArray(format)){configFromStringAndArray(config)}else if(isDate(input)){config._d=input}else if(format){configFromStringAndFormat(config)}else{configFromInput(config)}if(!valid__isValid(config)){config._d=null}return config}function configFromInput(config){var input=config._i;if(input===undefined){config._d=new Date(utils_hooks__hooks.now())}else if(isDate(input)){config._d=new Date(input.valueOf())}else if(typeof input==='string'){configFromString(config)}else if(isArray(input)){config._a=map(input.slice(0),function(obj){return parseInt(obj,10)});configFromArray(config)}else if(typeof(input)==='object'){configFromObject(config)}else if(typeof(input)==='number'){config._d=new Date(input)}else{utils_hooks__hooks.createFromInputFallback(config)}}function createLocalOrUTC(input,format,locale,strict,isUTC){var c={};if(typeof(locale)==='boolean'){strict=locale;locale=undefined}if((isObject(input)&&isObjectEmpty(input))||(isArray(input)&&input.length===0)){input=undefined}c._isAMomentObject=true;c._useUTC=c._isUTC=isUTC;c._l=locale;c._i=input;c._f=format;c._strict=strict;return createFromConfig(c)}function local__createLocal(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,false)}var prototypeMin=deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=local__createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other<this?this:other}else{return valid__createInvalid()}});var prototypeMax=deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=local__createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other>this?this:other}else{return valid__createInvalid()}});function pickBy(fn,moments){var res,i;if(moments.length===1&&isArray(moments[0])){moments=moments[0]}if(!moments.length){return local__createLocal()}res=moments[0];for(i=1;i<moments.length;++i){if(!moments[i].isValid()||moments[i][fn](res)){res=moments[i]}}return res}function min(){var args=[].slice.call(arguments,0);return pickBy('isBefore',args)}function max(){var args=[].slice.call(arguments,0);return pickBy('isAfter',args)}var now=function(){return Date.now?Date.now():+(new Date())};function Duration(duration){var normalizedInput=normalizeObjectUnits(duration),years=normalizedInput.year||0,quarters=normalizedInput.quarter||0,months=normalizedInput.month||0,weeks=normalizedInput.week||0,days=normalizedInput.day||0,hours=normalizedInput.hour||0,minutes=normalizedInput.minute||0,seconds=normalizedInput.second||0,milliseconds=normalizedInput.millisecond||0;this._milliseconds=+milliseconds+seconds*1e3+minutes*6e4+hours*1000*60*60;this._days=+days+weeks*7;this._months=+months+quarters*3+years*12;this._data={};this._locale=locale_locales__getLocale();this._bubble()}function isDuration(obj){return obj instanceof Duration}function absRound(number){if(number<0){return Math.round(-1*number)*-1}else{return Math.round(number)}}function offset(token,separator){addFormatToken(token,0,0,function(){var offset=this.utcOffset();var sign='+';if(offset<0){offset=-offset;sign='-'}return sign+zeroFill(~~(offset/60),2)+separator+zeroFill(~~(offset)%60,2)})}offset('Z',':');offset('ZZ','');addRegexToken('Z',matchShortOffset);addRegexToken('ZZ',matchShortOffset);addParseToken(['Z','ZZ'],function(input,array,config){config._useUTC=true;config._tzm=offsetFromString(matchShortOffset,input)});var chunkOffset=/([\+\-]|\d\d)/gi;function offsetFromString(matcher,string){var matches=((string||'').match(matcher)||[]);var chunk=matches[matches.length-1]||[];var parts=(chunk+'').match(chunkOffset)||['-',0,0];var minutes=+(parts[1]*60)+toInt(parts[2]);return parts[0]==='+'?minutes:-minutes}function cloneWithOffset(input,model){var res,diff;if(model._isUTC){res=model.clone();diff=(isMoment(input)||isDate(input)?input.valueOf():local__createLocal(input).valueOf())-res.valueOf();res._d.setTime(res._d.valueOf()+diff);utils_hooks__hooks.updateOffset(res,false);return res}else{return local__createLocal(input).local()}}function getDateOffset(m){return-Math.round(m._d.getTimezoneOffset()/15)*15}utils_hooks__hooks.updateOffset=function(){};function getSetOffset(input,keepLocalTime){var offset=this._offset||0,localAdjust;if(!this.isValid()){return input!=null?this:NaN}if(input!=null){if(typeof input==='string'){input=offsetFromString(matchShortOffset,input)}else if(Math.abs(input)<16){input=input*60}if(!this._isUTC&&keepLocalTime){localAdjust=getDateOffset(this)}this._offset=input;this._isUTC=true;if(localAdjust!=null){this.add(localAdjust,'m')}if(offset!==input){if(!keepLocalTime||this._changeInProgress){add_subtract__addSubtract(this,create__createDuration(input-offset,'m'),1,false)}else if(!this._changeInProgress){this._changeInProgress=true;utils_hooks__hooks.updateOffset(this,true);this._changeInProgress=null}}return this}else{return this._isUTC?offset:getDateOffset(this)}}function getSetZone(input,keepLocalTime){if(input!=null){if(typeof input!=='string'){input=-input}this.utcOffset(input,keepLocalTime);return this}else{return-this.utcOffset()}}function setOffsetToUTC(keepLocalTime){return this.utcOffset(0,keepLocalTime)}function setOffsetToLocal(keepLocalTime){if(this._isUTC){this.utcOffset(0,keepLocalTime);this._isUTC=false;if(keepLocalTime){this.subtract(getDateOffset(this),'m')}}return this}function setOffsetToParsedOffset(){if(this._tzm){this.utcOffset(this._tzm)}else if(typeof this._i==='string'){var tZone=offsetFromString(matchOffset,this._i);if(tZone===0){this.utcOffset(0,true)}else{this.utcOffset(offsetFromString(matchOffset,this._i))}}return this}function hasAlignedHourOffset(input){if(!this.isValid()){return false}input=input?local__createLocal(input).utcOffset():0;return(this.utcOffset()-input)%60===0}function isDaylightSavingTime(){return(this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset())}function isDaylightSavingTimeShifted(){if(!isUndefined(this._isDSTShifted)){return this._isDSTShifted}var c={};copyConfig(c,this);c=prepareConfig(c);if(c._a){var other=c._isUTC?create_utc__createUTC(c._a):local__createLocal(c._a);this._isDSTShifted=this.isValid()&&compareArrays(c._a,other.toArray())>0}else{this._isDSTShifted=false}return this._isDSTShifted}function isLocal(){return this.isValid()?!this._isUTC:false}function isUtcOffset(){return this.isValid()?this._isUTC:false}function isUtc(){return this.isValid()?this._isUTC&&this._offset===0:false}var aspNetRegex=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;var isoRegex=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;function create__createDuration(input,key){var duration=input,match=null,sign,ret,diffRes;if(isDuration(input)){duration={ms:input._milliseconds,d:input._days,M:input._months}}else if(typeof input==='number'){duration={};if(key){duration[key]=input}else{duration.milliseconds=input}}else if(!!(match=aspNetRegex.exec(input))){sign=(match[1]==='-')?-1:1;duration={y:0,d:toInt(match[DATE])*sign,h:toInt(match[HOUR])*sign,m:toInt(match[MINUTE])*sign,s:toInt(match[SECOND])*sign,ms:toInt(absRound(match[MILLISECOND]*1000))*sign}}else if(!!(match=isoRegex.exec(input))){sign=(match[1]==='-')?-1:1;duration={y:parseIso(match[2],sign),M:parseIso(match[3],sign),w:parseIso(match[4],sign),d:parseIso(match[5],sign),h:parseIso(match[6],sign),m:parseIso(match[7],sign),s:parseIso(match[8],sign)}}else if(duration==null){duration={}}else if(typeof duration==='object'&&('from'in duration||'to'in duration)){diffRes=momentsDifference(local__createLocal(duration.from),local__createLocal(duration.to));duration={};duration.ms=diffRes.milliseconds;duration.M=diffRes.months}ret=new Duration(duration);if(isDuration(input)&&hasOwnProp(input,'_locale')){ret._locale=input._locale}return ret}create__createDuration.fn=Duration.prototype;function parseIso(inp,sign){var res=inp&&parseFloat(inp.replace(',','.'));return(isNaN(res)?0:res)*sign}function positiveMomentsDifference(base,other){var res={milliseconds:0,months:0};res.months=other.month()-base.month()+(other.year()-base.year())*12;if(base.clone().add(res.months,'M').isAfter(other)){--res.months}res.milliseconds=+other- +(base.clone().add(res.months,'M'));return res}function momentsDifference(base,other){var res;if(!(base.isValid()&&other.isValid())){return{milliseconds:0,months:0}}other=cloneWithOffset(other,base);if(base.isBefore(other)){res=positiveMomentsDifference(base,other)}else{res=positiveMomentsDifference(other,base);res.milliseconds=-res.milliseconds;res.months=-res.months}return res}function createAdder(direction,name){return function(val,period){var dur,tmp;if(period!==null&&!isNaN(+period)){deprecateSimple(name,'moment().'+name+'(period, number) is deprecated. Please use moment().'+name+'(number, period). '+'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');tmp=val;val=period;period=tmp}val=typeof val==='string'?+val:val;dur=create__createDuration(val,period);add_subtract__addSubtract(this,dur,direction);return this}}function add_subtract__addSubtract(mom,duration,isAdding,updateOffset){var milliseconds=duration._milliseconds,days=absRound(duration._days),months=absRound(duration._months);if(!mom.isValid()){return}updateOffset=updateOffset==null?true:updateOffset;if(milliseconds){mom._d.setTime(mom._d.valueOf()+milliseconds*isAdding)}if(days){get_set__set(mom,'Date',get_set__get(mom,'Date')+days*isAdding)}if(months){setMonth(mom,get_set__get(mom,'Month')+months*isAdding)}if(updateOffset){utils_hooks__hooks.updateOffset(mom,days||months)}}var add_subtract__add=createAdder(1,'add');var add_subtract__subtract=createAdder(-1,'subtract');function getCalendarFormat(myMoment,now){var diff=myMoment.diff(now,'days',true);return diff<-6?'sameElse':diff<-1?'lastWeek':diff<0?'lastDay':diff<1?'sameDay':diff<2?'nextDay':diff<7?'nextWeek':'sameElse'}function moment_calendar__calendar(time,formats){var now=time||local__createLocal(),sod=cloneWithOffset(now,this).startOf('day'),format=utils_hooks__hooks.calendarFormat(this,sod)||'sameElse';var output=formats&&(isFunction(formats[format])?formats[format].call(this,now):formats[format]);return this.format(output||this.localeData().calendar(format,this,local__createLocal(now)))}function clone(){return new Moment(this)}function isAfter(input,units){var localInput=isMoment(input)?input:local__createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false}units=normalizeUnits(!isUndefined(units)?units:'millisecond');if(units==='millisecond'){return this.valueOf()>localInput.valueOf()}else{return localInput.valueOf()<this.clone().startOf(units).valueOf()}}function isBefore(input,units){var localInput=isMoment(input)?input:local__createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false}units=normalizeUnits(!isUndefined(units)?units:'millisecond');if(units==='millisecond'){return this.valueOf()<localInput.valueOf()}else{return this.clone().endOf(units).valueOf()<localInput.valueOf()}}function isBetween(from,to,units,inclusivity){inclusivity=inclusivity||'()';return(inclusivity[0]==='('?this.isAfter(from,units):!this.isBefore(from,units))&&(inclusivity[1]===')'?this.isBefore(to,units):!this.isAfter(to,units))}function isSame(input,units){var localInput=isMoment(input)?input:local__createLocal(input),inputMs;if(!(this.isValid()&&localInput.isValid())){return false}units=normalizeUnits(units||'millisecond');if(units==='millisecond'){return this.valueOf()===localInput.valueOf()}else{inputMs=localInput.valueOf();return this.clone().startOf(units).valueOf()<=inputMs&&inputMs<=this.clone().endOf(units).valueOf()}}function isSameOrAfter(input,units){return this.isSame(input,units)||this.isAfter(input,units)}function isSameOrBefore(input,units){return this.isSame(input,units)||this.isBefore(input,units)}function diff(input,units,asFloat){var that,zoneDelta,delta,output;if(!this.isValid()){return NaN}that=cloneWithOffset(input,this);if(!that.isValid()){return NaN}zoneDelta=(that.utcOffset()-this.utcOffset())*6e4;units=normalizeUnits(units);if(units==='year'||units==='month'||units==='quarter'){output=monthDiff(this,that);if(units==='quarter'){output=output/3}else if(units==='year'){output=output/12}}else{delta=this-that;output=units==='second'?delta/1e3:units==='minute'?delta/6e4:units==='hour'?delta/36e5:units==='day'?(delta-zoneDelta)/864e5:units==='week'?(delta-zoneDelta)/6048e5:delta}return asFloat?output:absFloor(output)}function monthDiff(a,b){var wholeMonthDiff=((b.year()-a.year())*12)+(b.month()-a.month()),anchor=a.clone().add(wholeMonthDiff,'months'),anchor2,adjust;if(b-anchor<0){anchor2=a.clone().add(wholeMonthDiff-1,'months');adjust=(b-anchor)/(anchor-anchor2)}else{anchor2=a.clone().add(wholeMonthDiff+1,'months');adjust=(b-anchor)/(anchor2-anchor)}return-(wholeMonthDiff+adjust)||0}utils_hooks__hooks.defaultFormat='YYYY-MM-DDTHH:mm:ssZ';utils_hooks__hooks.defaultFormatUtc='YYYY-MM-DDTHH:mm:ss[Z]';function toString(){return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ')}function moment_format__toISOString(){var m=this.clone().utc();if(0<m.year()&&m.year()<=9999){if(isFunction(Date.prototype.toISOString)){return this.toDate().toISOString()}else{return formatMoment(m,'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')}}else{return formatMoment(m,'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]')}}function format(inputString){if(!inputString){inputString=this.isUtc()?utils_hooks__hooks.defaultFormatUtc:utils_hooks__hooks.defaultFormat}var output=formatMoment(this,inputString);return this.localeData().postformat(output)}function from(time,withoutSuffix){if(this.isValid()&&((isMoment(time)&&time.isValid())||local__createLocal(time).isValid())){return create__createDuration({to:this,from:time}).locale(this.locale()).humanize(!withoutSuffix)}else{return this.localeData().invalidDate()}}function fromNow(withoutSuffix){return this.from(local__createLocal(),withoutSuffix)}function to(time,withoutSuffix){if(this.isValid()&&((isMoment(time)&&time.isValid())||local__createLocal(time).isValid())){return create__createDuration({from:this,to:time}).locale(this.locale()).humanize(!withoutSuffix)}else{return this.localeData().invalidDate()}}function toNow(withoutSuffix){return this.to(local__createLocal(),withoutSuffix)}function locale(key){var newLocaleData;if(key===undefined){return this._locale._abbr}else{newLocaleData=locale_locales__getLocale(key);if(newLocaleData!=null){this._locale=newLocaleData}return this}}var lang=deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',function(key){if(key===undefined){return this.localeData()}else{return this.locale(key)}});function localeData(){return this._locale}function startOf(units){units=normalizeUnits(units);switch(units){case'year':this.month(0);case'quarter':case'month':this.date(1);case'week':case'isoWeek':case'day':case'date':this.hours(0);case'hour':this.minutes(0);case'minute':this.seconds(0);case'second':this.milliseconds(0)}if(units==='week'){this.weekday(0)}if(units==='isoWeek'){this.isoWeekday(1)}if(units==='quarter'){this.month(Math.floor(this.month()/3)*3)}return this}function endOf(units){units=normalizeUnits(units);if(units===undefined||units==='millisecond'){return this}if(units==='date'){units='day'}return this.startOf(units).add(1,(units==='isoWeek'?'week':units)).subtract(1,'ms')}function to_type__valueOf(){return this._d.valueOf()-((this._offset||0)*60000)}function unix(){return Math.floor(this.valueOf()/1000)}function toDate(){return new Date(this.valueOf())}function toArray(){var m=this;return[m.year(),m.month(),m.date(),m.hour(),m.minute(),m.second(),m.millisecond()]}function toObject(){var m=this;return{years:m.year(),months:m.month(),date:m.date(),hours:m.hours(),minutes:m.minutes(),seconds:m.seconds(),milliseconds:m.milliseconds()}}function toJSON(){return this.isValid()?this.toISOString():null}function moment_valid__isValid(){return valid__isValid(this)}function parsingFlags(){return extend({},getParsingFlags(this))}function invalidAt(){return getParsingFlags(this).overflow}function creationData(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}addFormatToken(0,['gg',2],0,function(){return this.weekYear()%100});addFormatToken(0,['GG',2],0,function(){return this.isoWeekYear()%100});function addWeekYearFormatToken(token,getter){addFormatToken(0,[token,token.length],0,getter)}addWeekYearFormatToken('gggg','weekYear');addWeekYearFormatToken('ggggg','weekYear');addWeekYearFormatToken('GGGG','isoWeekYear');addWeekYearFormatToken('GGGGG','isoWeekYear');addUnitAlias('weekYear','gg');addUnitAlias('isoWeekYear','GG');addUnitPriority('weekYear',1);addUnitPriority('isoWeekYear',1);addRegexToken('G',matchSigned);addRegexToken('g',matchSigned);addRegexToken('GG',match1to2,match2);addRegexToken('gg',match1to2,match2);addRegexToken('GGGG',match1to4,match4);addRegexToken('gggg',match1to4,match4);addRegexToken('GGGGG',match1to6,match6);addRegexToken('ggggg',match1to6,match6);addWeekParseToken(['gggg','ggggg','GGGG','GGGGG'],function(input,week,config,token){week[token.substr(0,2)]=toInt(input)});addWeekParseToken(['gg','GG'],function(input,week,config,token){week[token]=utils_hooks__hooks.parseTwoDigitYear(input)});function getSetWeekYear(input){return getSetWeekYearHelper.call(this,input,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function getSetISOWeekYear(input){return getSetWeekYearHelper.call(this,input,this.isoWeek(),this.isoWeekday(),1,4)}function getISOWeeksInYear(){return weeksInYear(this.year(),1,4)}function getWeeksInYear(){var weekInfo=this.localeData()._week;return weeksInYear(this.year(),weekInfo.dow,weekInfo.doy)}function getSetWeekYearHelper(input,week,weekday,dow,doy){var weeksTarget;if(input==null){return weekOfYear(this,dow,doy).year}else{weeksTarget=weeksInYear(input,dow,doy);if(week>weeksTarget){week=weeksTarget}return setWeekAll.call(this,input,week,weekday,dow,doy)}}function setWeekAll(weekYear,week,weekday,dow,doy){var dayOfYearData=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy),date=createUTCDate(dayOfYearData.year,0,dayOfYearData.dayOfYear);this.year(date.getUTCFullYear());this.month(date.getUTCMonth());this.date(date.getUTCDate());return this}addFormatToken('Q',0,'Qo','quarter');addUnitAlias('quarter','Q');addUnitPriority('quarter',7);addRegexToken('Q',match1);addParseToken('Q',function(input,array){array[MONTH]=(toInt(input)-1)*3});function getSetQuarter(input){return input==null?Math.ceil((this.month()+1)/3):this.month((input-1)*3+this.month()%3)}addFormatToken('D',['DD',2],'Do','date');addUnitAlias('date','D');addUnitPriority('date',9);addRegexToken('D',match1to2);addRegexToken('DD',match1to2,match2);addRegexToken('Do',function(isStrict,locale){return isStrict?locale._ordinalParse:locale._ordinalParseLenient});addParseToken(['D','DD'],DATE);addParseToken('Do',function(input,array){array[DATE]=toInt(input.match(match1to2)[0],10)});var getSetDayOfMonth=makeGetSet('Date',true);addFormatToken('DDD',['DDDD',3],'DDDo','dayOfYear');addUnitAlias('dayOfYear','DDD');addUnitPriority('dayOfYear',4);addRegexToken('DDD',match1to3);addRegexToken('DDDD',match3);addParseToken(['DDD','DDDD'],function(input,array,config){config._dayOfYear=toInt(input)});function getSetDayOfYear(input){var dayOfYear=Math.round((this.clone().startOf('day')-this.clone().startOf('year'))/864e5)+1;return input==null?dayOfYear:this.add((input-dayOfYear),'d')}addFormatToken('m',['mm',2],0,'minute');addUnitAlias('minute','m');addUnitPriority('minute',14);addRegexToken('m',match1to2);addRegexToken('mm',match1to2,match2);addParseToken(['m','mm'],MINUTE);var getSetMinute=makeGetSet('Minutes',false);addFormatToken('s',['ss',2],0,'second');addUnitAlias('second','s');addUnitPriority('second',15);addRegexToken('s',match1to2);addRegexToken('ss',match1to2,match2);addParseToken(['s','ss'],SECOND);var getSetSecond=makeGetSet('Seconds',false);addFormatToken('S',0,0,function(){return~~(this.millisecond()/100)});addFormatToken(0,['SS',2],0,function(){return~~(this.millisecond()/10)});addFormatToken(0,['SSS',3],0,'millisecond');addFormatToken(0,['SSSS',4],0,function(){return this.millisecond()*10});addFormatToken(0,['SSSSS',5],0,function(){return this.millisecond()*100});addFormatToken(0,['SSSSSS',6],0,function(){return this.millisecond()*1000});addFormatToken(0,['SSSSSSS',7],0,function(){return this.millisecond()*10000});addFormatToken(0,['SSSSSSSS',8],0,function(){return this.millisecond()*100000});addFormatToken(0,['SSSSSSSSS',9],0,function(){return this.millisecond()*1000000});addUnitAlias('millisecond','ms');addUnitPriority('millisecond',16);addRegexToken('S',match1to3,match1);addRegexToken('SS',match1to3,match2);addRegexToken('SSS',match1to3,match3);var token;for(token='SSSS';token.length<=9;token+='S'){addRegexToken(token,matchUnsigned)}function parseMs(input,array){array[MILLISECOND]=toInt(('0.'+input)*1000)}for(token='S';token.length<=9;token+='S'){addParseToken(token,parseMs)}var getSetMillisecond=makeGetSet('Milliseconds',false);addFormatToken('z',0,0,'zoneAbbr');addFormatToken('zz',0,0,'zoneName');function getZoneAbbr(){return this._isUTC?'UTC':''}function getZoneName(){return this._isUTC?'Coordinated Universal Time':''}var momentPrototype__proto=Moment.prototype;momentPrototype__proto.add=add_subtract__add;momentPrototype__proto.calendar=moment_calendar__calendar;momentPrototype__proto.clone=clone;momentPrototype__proto.diff=diff;momentPrototype__proto.endOf=endOf;momentPrototype__proto.format=format;momentPrototype__proto.from=from;momentPrototype__proto.fromNow=fromNow;momentPrototype__proto.to=to;momentPrototype__proto.toNow=toNow;momentPrototype__proto.get=stringGet;momentPrototype__proto.invalidAt=invalidAt;momentPrototype__proto.isAfter=isAfter;momentPrototype__proto.isBefore=isBefore;momentPrototype__proto.isBetween=isBetween;momentPrototype__proto.isSame=isSame;momentPrototype__proto.isSameOrAfter=isSameOrAfter;momentPrototype__proto.isSameOrBefore=isSameOrBefore;momentPrototype__proto.isValid=moment_valid__isValid;momentPrototype__proto.lang=lang;momentPrototype__proto.locale=locale;momentPrototype__proto.localeData=localeData;momentPrototype__proto.max=prototypeMax;momentPrototype__proto.min=prototypeMin;momentPrototype__proto.parsingFlags=parsingFlags;momentPrototype__proto.set=stringSet;momentPrototype__proto.startOf=startOf;momentPrototype__proto.subtract=add_subtract__subtract;momentPrototype__proto.toArray=toArray;momentPrototype__proto.toObject=toObject;momentPrototype__proto.toDate=toDate;momentPrototype__proto.toISOString=moment_format__toISOString;momentPrototype__proto.toJSON=toJSON;momentPrototype__proto.toString=toString;momentPrototype__proto.unix=unix;momentPrototype__proto.valueOf=to_type__valueOf;momentPrototype__proto.creationData=creationData;momentPrototype__proto.year=getSetYear;momentPrototype__proto.isLeapYear=getIsLeapYear;momentPrototype__proto.weekYear=getSetWeekYear;momentPrototype__proto.isoWeekYear=getSetISOWeekYear;momentPrototype__proto.quarter=momentPrototype__proto.quarters=getSetQuarter;momentPrototype__proto.month=getSetMonth;momentPrototype__proto.daysInMonth=getDaysInMonth;momentPrototype__proto.week=momentPrototype__proto.weeks=getSetWeek;momentPrototype__proto.isoWeek=momentPrototype__proto.isoWeeks=getSetISOWeek;momentPrototype__proto.weeksInYear=getWeeksInYear;momentPrototype__proto.isoWeeksInYear=getISOWeeksInYear;momentPrototype__proto.date=getSetDayOfMonth;momentPrototype__proto.day=momentPrototype__proto.days=getSetDayOfWeek;momentPrototype__proto.weekday=getSetLocaleDayOfWeek;momentPrototype__proto.isoWeekday=getSetISODayOfWeek;momentPrototype__proto.dayOfYear=getSetDayOfYear;momentPrototype__proto.hour=momentPrototype__proto.hours=getSetHour;momentPrototype__proto.minute=momentPrototype__proto.minutes=getSetMinute;momentPrototype__proto.second=momentPrototype__proto.seconds=getSetSecond;momentPrototype__proto.millisecond=momentPrototype__proto.milliseconds=getSetMillisecond;momentPrototype__proto.utcOffset=getSetOffset;momentPrototype__proto.utc=setOffsetToUTC;momentPrototype__proto.local=setOffsetToLocal;momentPrototype__proto.parseZone=setOffsetToParsedOffset;momentPrototype__proto.hasAlignedHourOffset=hasAlignedHourOffset;momentPrototype__proto.isDST=isDaylightSavingTime;momentPrototype__proto.isLocal=isLocal;momentPrototype__proto.isUtcOffset=isUtcOffset;momentPrototype__proto.isUtc=isUtc;momentPrototype__proto.isUTC=isUtc;momentPrototype__proto.zoneAbbr=getZoneAbbr;momentPrototype__proto.zoneName=getZoneName;momentPrototype__proto.dates=deprecate('dates accessor is deprecated. Use date instead.',getSetDayOfMonth);momentPrototype__proto.months=deprecate('months accessor is deprecated. Use month instead',getSetMonth);momentPrototype__proto.years=deprecate('years accessor is deprecated. Use year instead',getSetYear);momentPrototype__proto.zone=deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',getSetZone);momentPrototype__proto.isDSTShifted=deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',isDaylightSavingTimeShifted);var momentPrototype=momentPrototype__proto;function moment__createUnix(input){return local__createLocal(input*1000)}function moment__createInZone(){return local__createLocal.apply(null,arguments).parseZone()}function preParsePostFormat(string){return string}var prototype__proto=Locale.prototype;prototype__proto.calendar=locale_calendar__calendar;prototype__proto.longDateFormat=longDateFormat;prototype__proto.invalidDate=invalidDate;prototype__proto.ordinal=ordinal;prototype__proto.preparse=preParsePostFormat;prototype__proto.postformat=preParsePostFormat;prototype__proto.relativeTime=relative__relativeTime;prototype__proto.pastFuture=pastFuture;prototype__proto.set=locale_set__set;prototype__proto.months=localeMonths;prototype__proto.monthsShort=localeMonthsShort;prototype__proto.monthsParse=localeMonthsParse;prototype__proto.monthsRegex=monthsRegex;prototype__proto.monthsShortRegex=monthsShortRegex;prototype__proto.week=localeWeek;prototype__proto.firstDayOfYear=localeFirstDayOfYear;prototype__proto.firstDayOfWeek=localeFirstDayOfWeek;prototype__proto.weekdays=localeWeekdays;prototype__proto.weekdaysMin=localeWeekdaysMin;prototype__proto.weekdaysShort=localeWeekdaysShort;prototype__proto.weekdaysParse=localeWeekdaysParse;prototype__proto.weekdaysRegex=weekdaysRegex;prototype__proto.weekdaysShortRegex=weekdaysShortRegex;prototype__proto.weekdaysMinRegex=weekdaysMinRegex;prototype__proto.isPM=localeIsPM;prototype__proto.meridiem=localeMeridiem;function lists__get(format,index,field,setter){var locale=locale_locales__getLocale();var utc=create_utc__createUTC().set(setter,index);return locale[field](utc,format)}function listMonthsImpl(format,index,field){if(typeof format==='number'){index=format;format=undefined}format=format||'';if(index!=null){return lists__get(format,index,field,'month')}var i;var out=[];for(i=0;i<12;i++){out[i]=lists__get(format,i,field,'month')}return out}function listWeekdaysImpl(localeSorted,format,index,field){if(typeof localeSorted==='boolean'){if(typeof format==='number'){index=format;format=undefined}format=format||''}else{format=localeSorted;index=format;localeSorted=false;if(typeof format==='number'){index=format;format=undefined}format=format||''}var locale=locale_locales__getLocale(),shift=localeSorted?locale._week.dow:0;if(index!=null){return lists__get(format,(index+shift)%7,field,'day')}var i;var out=[];for(i=0;i<7;i++){out[i]=lists__get(format,(i+shift)%7,field,'day')}return out}function lists__listMonths(format,index){return listMonthsImpl(format,index,'months')}function lists__listMonthsShort(format,index){return listMonthsImpl(format,index,'monthsShort')}function lists__listWeekdays(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdays')}function lists__listWeekdaysShort(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysShort')}function lists__listWeekdaysMin(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysMin')}locale_locales__getSetGlobalLocale('en',{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(number){var b=number%10,output=(toInt(number%100/10)===1)?'th':(b===1)?'st':(b===2)?'nd':(b===3)?'rd':'th';return number+output}});utils_hooks__hooks.lang=deprecate('moment.lang is deprecated. Use moment.locale instead.',locale_locales__getSetGlobalLocale);utils_hooks__hooks.langData=deprecate('moment.langData is deprecated. Use moment.localeData instead.',locale_locales__getLocale);var mathAbs=Math.abs;function duration_abs__abs(){var data=this._data;this._milliseconds=mathAbs(this._milliseconds);this._days=mathAbs(this._days);this._months=mathAbs(this._months);data.milliseconds=mathAbs(data.milliseconds);data.seconds=mathAbs(data.seconds);data.minutes=mathAbs(data.minutes);data.hours=mathAbs(data.hours);data.months=mathAbs(data.months);data.years=mathAbs(data.years);return this}function duration_add_subtract__addSubtract(duration,input,value,direction){var other=create__createDuration(input,value);duration._milliseconds+=direction*other._milliseconds;duration._days+=direction*other._days;duration._months+=direction*other._months;return duration._bubble()}function duration_add_subtract__add(input,value){return duration_add_subtract__addSubtract(this,input,value,1)}function duration_add_subtract__subtract(input,value){return duration_add_subtract__addSubtract(this,input,value,-1)}function absCeil(number){if(number<0){return Math.floor(number)}else{return Math.ceil(number)}}function bubble(){var milliseconds=this._milliseconds;var days=this._days;var months=this._months;var data=this._data;var seconds,minutes,hours,years,monthsFromDays;if(!((milliseconds>=0&&days>=0&&months>=0)||(milliseconds<=0&&days<=0&&months<=0))){milliseconds+=absCeil(monthsToDays(months)+days)*864e5;days=0;months=0}data.milliseconds=milliseconds%1000;seconds=absFloor(milliseconds/1000);data.seconds=seconds%60;minutes=absFloor(seconds/60);data.minutes=minutes%60;hours=absFloor(minutes/60);data.hours=hours%24;days+=absFloor(hours/24);monthsFromDays=absFloor(daysToMonths(days));months+=monthsFromDays;days-=absCeil(monthsToDays(monthsFromDays));years=absFloor(months/12);months%=12;data.days=days;data.months=months;data.years=years;return this}function daysToMonths(days){return days*4800/146097}function monthsToDays(months){return months*146097/4800}function as(units){var days;var months;var milliseconds=this._milliseconds;units=normalizeUnits(units);if(units==='month'||units==='year'){days=this._days+milliseconds/864e5;months=this._months+daysToMonths(days);return units==='month'?months:months/12}else{days=this._days+Math.round(monthsToDays(this._months));switch(units){case'week':return days/7+milliseconds/6048e5;case'day':return days+milliseconds/864e5;case'hour':return days*24+milliseconds/36e5;case'minute':return days*1440+milliseconds/6e4;case'second':return days*86400+milliseconds/1000;case'millisecond':return Math.floor(days*864e5)+milliseconds;default:throw new Error('Unknown unit '+units);}}}function duration_as__valueOf(){return(this._milliseconds+this._days*864e5+(this._months%12)*2592e6+toInt(this._months/12)*31536e6)}function makeAs(alias){return function(){return this.as(alias)}}var asMilliseconds=makeAs('ms');var asSeconds=makeAs('s');var asMinutes=makeAs('m');var asHours=makeAs('h');var asDays=makeAs('d');var asWeeks=makeAs('w');var asMonths=makeAs('M');var asYears=makeAs('y');function duration_get__get(units){units=normalizeUnits(units);return this[units+'s']()}function makeGetter(name){return function(){return this._data[name]}}var milliseconds=makeGetter('milliseconds');var seconds=makeGetter('seconds');var minutes=makeGetter('minutes');var hours=makeGetter('hours');var days=makeGetter('days');var months=makeGetter('months');var years=makeGetter('years');function weeks(){return absFloor(this.days()/7)}var round=Math.round;var thresholds={s:45,m:45,h:22,d:26,M:11};function substituteTimeAgo(string,number,withoutSuffix,isFuture,locale){return locale.relativeTime(number||1,!!withoutSuffix,string,isFuture)}function duration_humanize__relativeTime(posNegDuration,withoutSuffix,locale){var duration=create__createDuration(posNegDuration).abs();var seconds=round(duration.as('s'));var minutes=round(duration.as('m'));var hours=round(duration.as('h'));var days=round(duration.as('d'));var months=round(duration.as('M'));var years=round(duration.as('y'));var a=seconds<thresholds.s&&['s',seconds]||minutes<=1&&['m']||minutes<thresholds.m&&['mm',minutes]||hours<=1&&['h']||hours<thresholds.h&&['hh',hours]||days<=1&&['d']||days<thresholds.d&&['dd',days]||months<=1&&['M']||months<thresholds.M&&['MM',months]||years<=1&&['y']||['yy',years];a[2]=withoutSuffix;a[3]=+posNegDuration>0;a[4]=locale;return substituteTimeAgo.apply(null,a)}function duration_humanize__getSetRelativeTimeRounding(roundingFunction){if(roundingFunction===undefined){return round}if(typeof(roundingFunction)==='function'){round=roundingFunction;return true}return false}function duration_humanize__getSetRelativeTimeThreshold(threshold,limit){if(thresholds[threshold]===undefined){return false}if(limit===undefined){return thresholds[threshold]}thresholds[threshold]=limit;return true}function humanize(withSuffix){var locale=this.localeData();var output=duration_humanize__relativeTime(this,!withSuffix,locale);if(withSuffix){output=locale.pastFuture(+this,output)}return locale.postformat(output)}var iso_string__abs=Math.abs;function iso_string__toISOString(){var seconds=iso_string__abs(this._milliseconds)/1000;var days=iso_string__abs(this._days);var months=iso_string__abs(this._months);var minutes,hours,years;minutes=absFloor(seconds/60);hours=absFloor(minutes/60);seconds%=60;minutes%=60;years=absFloor(months/12);months%=12;var Y=years;var M=months;var D=days;var h=hours;var m=minutes;var s=seconds;var total=this.asSeconds();if(!total){return'P0D'}return(total<0?'-':'')+'P'+(Y?Y+'Y':'')+(M?M+'M':'')+(D?D+'D':'')+((h||m||s)?'T':'')+(h?h+'H':'')+(m?m+'M':'')+(s?s+'S':'')}var duration_prototype__proto=Duration.prototype;duration_prototype__proto.abs=duration_abs__abs;duration_prototype__proto.add=duration_add_subtract__add;duration_prototype__proto.subtract=duration_add_subtract__subtract;duration_prototype__proto.as=as;duration_prototype__proto.asMilliseconds=asMilliseconds;duration_prototype__proto.asSeconds=asSeconds;duration_prototype__proto.asMinutes=asMinutes;duration_prototype__proto.asHours=asHours;duration_prototype__proto.asDays=asDays;duration_prototype__proto.asWeeks=asWeeks;duration_prototype__proto.asMonths=asMonths;duration_prototype__proto.asYears=asYears;duration_prototype__proto.valueOf=duration_as__valueOf;duration_prototype__proto._bubble=bubble;duration_prototype__proto.get=duration_get__get;duration_prototype__proto.milliseconds=milliseconds;duration_prototype__proto.seconds=seconds;duration_prototype__proto.minutes=minutes;duration_prototype__proto.hours=hours;duration_prototype__proto.days=days;duration_prototype__proto.weeks=weeks;duration_prototype__proto.months=months;duration_prototype__proto.years=years;duration_prototype__proto.humanize=humanize;duration_prototype__proto.toISOString=iso_string__toISOString;duration_prototype__proto.toString=iso_string__toISOString;duration_prototype__proto.toJSON=iso_string__toISOString;duration_prototype__proto.locale=locale;duration_prototype__proto.localeData=localeData;duration_prototype__proto.toIsoString=deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',iso_string__toISOString);duration_prototype__proto.lang=lang;addFormatToken('X',0,0,'unix');addFormatToken('x',0,0,'valueOf');addRegexToken('x',matchSigned);addRegexToken('X',matchTimestamp);addParseToken('X',function(input,array,config){config._d=new Date(parseFloat(input,10)*1000)});addParseToken('x',function(input,array,config){config._d=new Date(toInt(input))});utils_hooks__hooks.version='2.15.1';setHookCallback(local__createLocal);utils_hooks__hooks.fn=momentPrototype;utils_hooks__hooks.min=min;utils_hooks__hooks.max=max;utils_hooks__hooks.now=now;utils_hooks__hooks.utc=create_utc__createUTC;utils_hooks__hooks.unix=moment__createUnix;utils_hooks__hooks.months=lists__listMonths;utils_hooks__hooks.isDate=isDate;utils_hooks__hooks.locale=locale_locales__getSetGlobalLocale;utils_hooks__hooks.invalid=valid__createInvalid;utils_hooks__hooks.duration=create__createDuration;utils_hooks__hooks.isMoment=isMoment;utils_hooks__hooks.weekdays=lists__listWeekdays;utils_hooks__hooks.parseZone=moment__createInZone;utils_hooks__hooks.localeData=locale_locales__getLocale;utils_hooks__hooks.isDuration=isDuration;utils_hooks__hooks.monthsShort=lists__listMonthsShort;utils_hooks__hooks.weekdaysMin=lists__listWeekdaysMin;utils_hooks__hooks.defineLocale=defineLocale;utils_hooks__hooks.updateLocale=updateLocale;utils_hooks__hooks.locales=locale_locales__listLocales;utils_hooks__hooks.weekdaysShort=lists__listWeekdaysShort;utils_hooks__hooks.normalizeUnits=normalizeUnits;utils_hooks__hooks.relativeTimeRounding=duration_humanize__getSetRelativeTimeRounding;utils_hooks__hooks.relativeTimeThreshold=duration_humanize__getSetRelativeTimeThreshold;utils_hooks__hooks.calendarFormat=getCalendarFormat;utils_hooks__hooks.prototype=momentPrototype;var _moment=utils_hooks__hooks;return _moment}));
moment.createFromInputFallback = function(config) {config._d = new Date(config._i);};

var NJ = NJ || {};

(function (NJ) {
  NJ.Vtr = NJ.Vtr || {
    constants: {
      types: {
        blank: 'blank',
        boolean: 'boolean',
        categorical: 'categorical',
        date: 'date',
        numeric: 'numeric',
        string: 'string',
        stringAddress: 'string-address'
      }
    }
  };

  Array.prototype.average = function () {
    return this.length === 0 ? 0
                             : this.reduce(function (sum, item) { return sum + Number(item); }, 0) / this.length;
  };
})(NJ);

(function (Vtr) {
  var regExps = {
    addr: {
      state: /^(서울(특별시)?)|((부산|대구|인천|광주|대전|울산)(광역시)?)|(세종(특별자치시)?)|((경기|강원|충청북|충청남|경상북|경상남|전라북|전라남|제주(특별자치)?)도?)|(충북|충남|경북|경남|전북|전남)/,
      city: /^[가-힣]+(시|군|구)/,
      town: /^[가-힣0-9.,·]+([동|가]|((읍|면) ?([가-힣]+\d?리)?))/
    },
    blank: /^ +$/,
    boolean: {
      all: /^([yn]|[네예]|(아니[요오])|(yes)|(no)|(true)|(false))$/i,
      true: /^(y|[네예]|(yes)|(true))$/i
    },
    date: {
      replace: {
        date: /년|월|일/,
        time: /(시 ?)|(분 ?)/
      }
    },
    numeric: /^[+-]?(\d+|(\d{1,3}(,\d{3})*))(\.\d+)?([eE]-?\d+)?$/
  };


  function Cell(data) {
    var _type, _data;

    _type = getType(data),
    _data = getData(data, _type);

    Object.defineProperty(this, 'data', { get: function () { return _data; } });
    Object.defineProperty(this, 'type', { get: function () { return _type; } });

    return this;
  }


  function getData(data, type) {
    switch (type) {
      case Vtr.constants.types.blank:
        return null;

      case Vtr.constants.types.boolean:
        return regExps.boolean.true.test(data);

      case Vtr.constants.types.date:
        return data;

      case Vtr.constants.types.numeric:
        return Number(typeof data === 'string' ? data.replace(',', '') : data);

      case Vtr.constants.types.string:
      case Vtr.constants.types.stringAddress:
        return String(data);
    }
  }

  function getNormalizedDate(date) {
    return [
      [regExps.date.replace.date, '.'],
      [regExps.date.replace.time, ':'],
      ['초', '']
    ].reduce(function (date, arg) {
      return date.replace(arg[0], arg[1]);
    }, date);
  }

  function getType(data) {
    if (isBlank(data))   return Vtr.constants.types.blank;
    if (isBoolean(data)) return Vtr.constants.types.boolean;
    if (isNumeric(data)) return Vtr.constants.types.numeric;
    if (isAddress(data)) return Vtr.constants.types.stringAddress;
    if (isDate(data))    return Vtr.constants.types.date;
                         return Vtr.constants.types.string;
  }

  // function getType(data) {
  //   if (isBlank(data))      return Vtr.constants.types.blank;
  //   if (isBoolean(data))    return Vtr.constants.types.boolean;
  //   if (isDate(data + ''))  return Vtr.constants.types.date;
  //   if (isNumeric(data))    return Vtr.constants.types.numeric;
  //   if (isAddress(data))    return Vtr.constants.types.stringAddress;
  //                           return Vtr.constants.types.string;
  // }

  function isAddress(data) {
    var addr = data;

    if (regExps.addr.state.test(data)) return true;

    addr = data.replace(regExps.addr.state, '').trim();
    if (regExps.addr.city.test(data)) return true;

    addr = data.replace(regExps.addr.city, '').trim();
    if (regExps.addr.town.test(data)) return true;

    return false;
  }

  function isBlank(data) {
    if (data === undefined || data === null || data === '')
      return true;

    if (regExps.blank.test(data))
      return true;

    return false;
  }

  function isBoolean(data) {
    if (data === true || data === false)
      return true;

    if (regExps.boolean.all.test(data))
      return true;

    return false;
  }

  function isNumeric(data) {
    return ! isNaN(data) || regExps.numeric.test(data);
  }

  function isDate(data) {
    var date = getNormalizedDate(data.trim());

    if (moment(new Date(date)).isBetween('1900-01-01', '2100-01-01'))
      return true;
    if (moment(date).isBetween('1900-01-01', '2100-01-01'))
      return true;


    return false;
  }


  Vtr.Cell = Cell;
})(NJ.Vtr);

(function (Vtr) {
  var regExps = {
    addr: /(지역|구역|도|시|군|구|읍|면|동|리)$/,
    date: /(년|월|일)$/,
    numeric: /(값|양|량)$/
  };

  function Column(title, cells) {
    var _data, _statistics, _title, _type, _format;

    if (! cells instanceof Array)
      throw new Error('The first argument must be an array of cells');

    _data = cells;
    _title = title;
    _type = getType(_data, _title);
    if (_type === Vtr.constants.types.numeric)
      _statistics = getStatistics(_data);
    if (_type === NJ.Vtr.constants.types.date)
      _format = getDateFormat(_data);

    Object.defineProperty(this, 'data',       { get: function () { return _data; } });
    Object.defineProperty(this, 'size',       { get: function () { return _data.length; } });
    Object.defineProperty(this, 'statistics', { get: function () { return _statistics instanceof Object ? _statistics : null; } });
    Object.defineProperty(this, 'title',      { get: function () { return _title; } });
    Object.defineProperty(this, 'type',       { get: function () { return _type; } });
    Object.defineProperty(this, 'format',       { get: function () { return _format ; } });

    return this;
  }


  function getType(data, title) {
    var types = data.map(function (cell) {
      if (! cell instanceof Vtr.Cell)
        throw new Error('The array must contain cells only');
      return cell.type;
    });

    var uniqs = Object.keys(data.reduce(function (obj, item) {
      obj[item.data] = true;
      return obj;
    }, {}));

    var length = data.length,
        uniqLength = uniqs.length;

    if (1 === uniqLength)
      return NJ.Vtr.constants.types.blank;

    var typesCount = types.reduce(function (count, type) {
      count[type] = count[type] ? count[type]+1 : 1;
      return count;
    }, {});

    var type = Object.keys(typesCount).reduce(function (foundType, type) {
      if (typesCount[type] > foundType.count)
        return { type: type, count: typesCount[type] }
      return foundType;
    }, { type: '', count: 0 }).type;

  // switch (type) {
  //   case NJ.Vtr.constants.types.numeric:
  //   case NJ.Vtr.constants.types.string:
  //     if (regExps.addr.test(title))
  //       return NJ.Vtr.constants.types.stringAddress;

  //     if (regExps.date.test(title))
  //       return NJ.Vtr.constants.types.date;

  //     if (regExps.numeric.test(title))
  //       return NJ.Vtr.constants.types.numeric;
  // }

    // if (1 < uniqLength && uniqLength < 9 && length > uniqLength * 10)
    //   return NJ.Vtr.constants.types.categorical;

    return type;


  }

  function getStatistics(data) {
    var values = jStat(
      data.filter(function (value) {
        return value.type === Vtr.constants.types.numeric;

      }).map(function (value) {
        return value.data;
      })
    );

    return {
      sum: values.sum(),
      avg: values.mean(),
      med: values.median(),
      max: values.max(),
      min: values.min(),
      std: values.stdev()
    };
  }

function getDateFormat(data) {
  var values = data.filter(function (value) {
      return value.type === NJ.Vtr.constants.types.date;
    }).map(function (value) {
      return value.data;
    });

  var match = /(\d{1,2})([^a-zA-Z\d:]{0,2})([a-zA-Z]+)([^a-zA-Z\d:]{0,2})(\d{1,2})(\D{0,2})?(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})/.exec(values[0]);
  var format = ["%d", "%B", "%Y", "%H", "%M", "%S"];

  if (match) {
    for (var i = 1; i < match.length; i += 2) {
      if (match[i]) {
        if (typeof match[i] === 'string' && match[i].length === 3) {
          result += format[Math.floor(i/2)].toLowerCase() + (match[i + 1] != null ? match[i + 1] : "")
        }
        else {
          result += format[Math.floor(i/2)] + (match[i + 1] != null ? match[i + 1] :"");
        }
      }
    }
    return result.replace(/undefined/g,"");
  }

  var match = /(\d{2,4})(\D{0,2})(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})?(\d{1,2})?(\D{0,2})?/.exec(values[0]);
  var format = ["%Y", "%m", "%d", "%H", "%M", "%S"];
  var result = "";

  if (match) {
    for (var i = 1; i < match.length; i += 2) {
      if (match[i] != null) {
        result += format[Math.floor(i/2)] + (match[i + 1] != null ? match[i + 1] : "");
      }
    }
  }

  return result.replace(/undefined/g,"");
}

  Vtr.Column = Column;
})(NJ.Vtr);

(function (Vtr) {
  var matches = [];


  var Match = {};

  Match.getByAlias = function (alias) {
    return matches.filter(function (match) {
      return match.alias === alias;
    })[0];
  };

  Match.match = function (table) {
    if (! table instanceof Vtr.Table)
      throw new Error('The first argument must be a NJ.Vtr.Table instance');

    var types = table.columns.map(function (col) { return col.type; })
                             .reduce(function (map, types) { map[types] = map[types] ? map[types]+1 : 1; return map; }, {});
    var hierarchy = Object.keys(table.hierarchy).map(function (key) { return table.hierarchy[key]; })
                                                .reduce(function (hierarchy, item) { hierarchy = hierarchy.concat(item); return hierarchy; }, []);

    var results = matches.map(function (matchItem) {
      return matchItem.getMatchResult(types, hierarchy);

    }).filter(function (match) {
      return match.score > 0;

    }).sort(function (a, b) {
      return b.score - a.score;
    });

    var header = Match.getByAlias(results[0].alias).getVisualizationHeader(table);

    return { results: results, header: header };
  }

  Match.register = function (meta) {
    var item = new MatchItem(meta);
    matches.push(item);

    return item;
  };


  Vtr.Match = Match;


  function MatchItem(meta) {
    var _name, _alias, _inputs, _outputs;

    if (! meta instanceof Object)
      throw new Error('The first argument must be a match object');

    _name = meta.name;
    _alias = meta.alias;
    _inputs = meta.inputs;
    _outputs = meta.outputs;

    Object.defineProperty(this, 'name', { get: function () { return _name; } });
    Object.defineProperty(this, 'alias', { get: function () { return _alias; } });
    Object.defineProperty(this, 'inputs', { get: function () { return _inputs; } });
    Object.defineProperty(this, 'outputs', { get: function () { return _outputs; } });

    this.getMatchResult = function (types, hierarchy) {
      var typeRules = this.inputs.types,
          hierarchyRules = this.inputs.hierarchy;

      var tscore = getScoreArray(typeRules, types).average(),
          hscore = getScoreArray(hierarchyRules, hierarchy, true).average();

      return { name: this.name, alias: this.alias, score: tscore+hscore };


      function getScoreArray(rules, item, isLength) {
        if (! rules || ! rules.length) return [];

        return rules.map(function (rule) {
          var type = isLength ? 'length' : rule.type;

          var score = Object.keys(rule.count).reduce(function (score, key) {
            if (score === 0) return 0;
            switch (key) {
              case 'gt' : return rule.count[key] <   (item[type] || 0) ? rule.weight : 0;
              case 'gte': return rule.count[key] <=  (item[type] || 0) ? rule.weight : 0;
              case 'lt' : return rule.count[key] >   (item[type] || 0) ? rule.weight : 0;
              case 'lte': return rule.count[key] >=  (item[type] || 0) ? rule.weight : 0;
              case 'eq' : return rule.count[key] === (item[type] || 0) ? rule.weight : 0;
              case 'ne' : return rule.count[key] !== (item[type] || 0) ? rule.weight : 0;
            }
          }, null);

          return score ? score : 0;
        });
      }
    };

    this.getVisualizationHeader = function (table) {
      var columns = table.columns.map(function (column) {
        return { title: column.title, type: column.type };
      });

      var header = this.outputs.header.reduce(function (header, item) {
        if (header[item.key]) return header;

        var hierarchy = item.hierarchy && table.hierarchy && table.hierarchy['string-address'] && table.hierarchy['string-address'][0];
        if (hierarchy) {
          header[item.key] = hierarchy.map(function (idx) {
            return columns[idx].title;
          });

          columns = columns.filter(function (column, idx) {
            return hierarchy.indexOf(idx) < 0;
          });

          return header;
        }

        if (item.isArray) {
          var idxToRemove = [];
          header[item.key] = columns.filter(function (column) {
            return column.type === item.type;

          }).map(function (item, idx) {
            idxToRemove.push(idx);
            return item.title;
          });

	  if (item.type !== 'string') {
            columns = columns.filter(function (item, idx) {
              return idxToRemove.indexOf(idx) > -1;
            });
	  }

          return header;
        }

        for (var i=0; i<columns.length; i++) {
          if (columns[i].type === item.type) {
            header[item.key] = columns[i].title;
            columns.splice(i, 1);
            break;
          }
        }

        return header;
      }, {});

      return header;
    };
    return this;
  }
})(NJ.Vtr);

(function (Vtr) {
  function Table(data) {
    var _columns, _data, _hierarchy, _title;

    if (! data instanceof Array)
      throw new Error('The first argument must be an array of arrays');

    _title = data[0];
    var sliced = data.slice(1);

    _data = sliced.map(function (val) {
      return _title.reduce(function (obj, key, idx) {
        obj[key] = val[idx];
        return obj;
      }, {});
    });

    var rows = sliced.map(function (row) {
      return row.map(function (cell) {
        return new Vtr.Cell(cell);
      });
    });
    var columns = _title.map(function (title, idx) {
      return new NJ.Vtr.Column(title, rows.map(function (cell) { return cell[idx]; }));
    });
    _columns = columns;

    _hierarchy = getHierarchy(_columns);

    Object.defineProperty(this, 'columns',   { get: function () { return _columns; } });
    Object.defineProperty(this, 'data',      { get: function () { return _data; } });
    Object.defineProperty(this, 'hierarchy', { get: function () { return _hierarchy; } });
    Object.defineProperty(this, 'size',      { get: function () { return { columns: columns.length, rows: columns.length }; } });

    return this;
  }


  function getHierarchy(data) {
    var types = data.map(function (column) { return column.type; });

    var indices = [
      Vtr.constants.types.stringAddress,
    ].reduce(function (indices, type) {
      indices[type] = [];
      return indices;
    }, {});

    types.forEach(function (type, idx) {
      switch (type) {
        case Vtr.constants.types.stringAddress:
          indices[type].push(idx);

        default:
          return;
      }
    });

    // string-address
    var addrs = [];
    if (indices['string-address'].length > 1) {
      var cols = indices['string-address'];

      var idxArray = [];
      cols.forEach(function (col, idx) {
        if (idx === 0)
          return idxArray.push(col);

        if (idxArray[idxArray.length-1] !== col-1) {
          if (idxArray.length > 1)
            addrs.push(idxArray);
          idxArray = [];
        }

        idxArray.push(col);
      });

      if (idxArray.length > 1)
        addrs.push(idxArray);
    }
    var addrGroups = [];
    addrs.forEach(function (colGroup, idx) {
      var group = colGroup.map(function (col) {
        return {
          count: Object.keys(
            data[col].data.map(function (cell) {
              return cell.data;

            }).filter(function (cell) {
              return !! cell;

            }).reduce(function (obj, cell) {
              obj[cell] = true;
              return obj;
            }, {})
          ).length,
          idx: col
        };

      }).sort(function (a, b) {
        return a.count - b.count;

      }).map(function (col) {
        return col.idx;
      });

      addrGroups.push(group);
    });

    return {
      'string-address': addrGroups
    };
  }


  Vtr.Table = Table;
})(NJ.Vtr);


(function () {

  'use strict';

  angular
    .module('daisy.services')
    .service('ApiService', [
      '$rootScope',
      '$http',
      '$q',
      '$window',
      'lodash',

      function (
        $rootScope,
        $http,
        $q,
        $window,
        _) {

      var vm = this;
      vm.Project = {
        getList: function(page) {
          var url = 'api/project?format=json';
          if (page) {
            url = url + '&page=' + page;
          }

          return $http.get(url).then(function (response) {
            var res = response.data;
            return res ? res : [];
          }, function () {
            return [];
          });
        },

        getItem: function(projectId) {
          return $http.get('api/project/' + projectId + '?format=json').then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.status, response.status);
          });
        },

        saveItem: function (params, visualize, updateId) {
          var visualizeSet = _.map(visualize, function(v, i){
            var model = NJ.Model.findModel(v.alias);
            var visualize_type = $.grep($rootScope.vizTypes, function(e) { return e.alias === v.alias })[0];

            v.data = {
              type: 1,
              metadata: {
                title: v.metadata.title,
                description: v.metadata.description,
                searchItemId: v.metadata.searchItemId,
                link: v.metadata.link,
                allColumns: v.allColumns,
                selectColumns: v.selectColumns,
                isFile: v.isFile,
                originData: v.originData,
                visualizeData: v.visualizeData,
                sampleData: v.sampleData,
                filterOperator: v.filterOperator,
                rows: v.metadata.rows,
                cols: v.metadata.cols,
                dataStatisticsColumn: v.dataStatisticsColumn
              },
              visualize_data: [],
              origin_data: []
            };
            v.attribute = model;
            v.attribute.header = v.header;
            v.attribute.properties.header = v.header;
            v.visualize_type = visualize_type.id;
            v.order = i;

            if (updateId) {
              v.id = v.visualizeId;
            }

            return v;
          });

          visualizeSet[0].thumbnail = {
            image: params.thumbnail
          };

          var params = {
            title: params.title,
            user: $rootScope.globals.currentUser.email,
            description: params.description,
            visualize: visualizeSet,
            status: params.status,
            copyright: params.copyright
          };
          var url = 'api/project?format=json';
          var method = 'POST';

          if (updateId) {
            url = '/api/project/' + updateId;
            method = 'PUT';
          }

          return $http({
            method: method,
            url: url,
            data: params,
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.status, response.status);
          });
        },

        deleteItem: function (projectId) {
          var req = {
            method: "DELETE",
            url: 'api/project/' + projectId,
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          };

          return $http(req).then(function () {
            return true;
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        },

        getMyProjects: function(page) {
          var url = 'api/myproject?format=json';
          if (page) {
            url = url + '&page=' + page;
          }

          var req = {
            method: 'GET',
            url: url,
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          };

          return $http(req).then(function (response) {
            var res = response.data;
            return res ? res : [];
          }, function () {
            return [];
          });
        }
      };

      vm.Visualize = {
        getTypes: function () {
          return $http.get('api/visualize-type?format=json').then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        },
        getTypeByID: function(id) {
          return $http.get('api/visualize-type/' + id + '?format=json').then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        }
      };

      vm.PublicData = {
        searchByKeyword: function (keyword, page) {
          var url = 'api/publicdata?keyword=' + encodeURIComponent(keyword);
          if (page) {
            url = url + '&page=' + page;
          }

          return $http.get(url).then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        },

        getItem: function (url, offset, limit, select) {
          var params = {};
          if (offset != null) {
            params = {
              offset: offset,
              limit: limit || 100,
              select: select || ''
            }
          };

          var req = {
            method: 'GET',
            url: url,
            params: params
          };

          return $http(req).then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        },

        getItemByColumns: function (url, select, offset, limit) {
          var params = {
            select: select
          };
          if (offset != null) {
            params = {
              offset: offset,
              limit: limit || 100,
              select: select
            }
          };

          var req = {
            method: 'GET',
            url: url,
            params: params
          };

          return $http(req).then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        },

        getItemPreview: function (code) {
          return $http.get('api/publicdata/' + code + '/preview').then(function (response) {
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function (response) {
            return $q.reject(response.data.reason, response.status);
          });
        }
      };

      vm.AuthData = {
        login: function (params) {

          var req = {
            method: 'POST',
            url: 'api/auth/login/',
            data: {
              username: params.username,
              password: params.password
            }
          };

          return $http(req).then(function(response){
            if (response.statusText == 'OK') response.success = true;
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });

        },

        register: function (params) {
          var req = {
            method: 'POST',
            url: 'api/auth/register/',
            data: {
              email: params.email,
              username: params.username,
              password: params.password
            }
          };

          return $http(req).then(function(response){
            if (response.statusText == 'Created') response.success = true;
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });

        },

        me: function () {
          return $http({
            method: 'GET',
            url: 'api/auth/me/',
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            var res = response.data;
            return res ? res : $q.reject(null);
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        resetPassword: function (params) {
          return $http({
            method: 'POST',
            url: 'api/auth/password/reset/',
            data: {
              email: params.email
            }
          }).then(function(response){
            // var res = response.data;
            // return res ? res : $q.reject(null);
            response.success = true;
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        resetPasswordConfirm: function (params) {
          return $http({
            method: 'POST',
            url: 'api/auth/password/reset/confirm/',
            data: {
              uid: params.uid,
              token: params.token,
              new_password: params.new_password
            }
          }).then(function(response){
            // var res = response.data;
            // return res ? res : $q.reject(null);
            response.success = true;
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        changeUsername: function (params) {
          return $http({
            method: 'POST',
            url: 'api/auth/username/',
            data: {
              new_username: params.new_username,
              email: params.email
            },
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            //var res = response.data;
            //return res ? res : $q.reject(null);
            return true;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        // changeEmail: function (params) {
        //   return $http({
        //     method: 'POST',
        //     url: 'api/auth/username/',
        //     data: {
        //       new_username: params.username,
        //       email: params.new_email
        //     },
        //     headers: {
        //       'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
        //     }
        //   }).then(function(response){
        //     //var res = response.data;
        //     //return res ? res : $q.reject(null);
        //     return true;
        //   }, function(response){
        //     return $q.reject(response.data.detail, response.status);
        //   });
        // },

        changeEmail: function (params) {
          return $http({
            method: 'PUT',
            url: 'api/auth/me/',
            data: {
              id: params.id,
              email: params.new_email,
              username: params.username,
              password: params.password
            },
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            //var res = response.data;
            //return res ? res : $q.reject(null);
            return true;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        changePassword: function (params) {
          return $http({
            method: 'POST',
            url: 'api/auth/password/',
            data: {
              current_password: params.password,
              new_password: params.passwordReset,
              new_password_confirm: params.passwordResetConfirm,
            },
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            //var res = response.data;
            //return res ? res : $q.reject(null);
            return true;
          }, function(response){
            console.log(response);
            return $q.reject(response.data, response.status);
          });
        },

        getProfileImage: function (params) {
          return $http({
            method: 'GET',
            url: 'api/profile-image',
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        },

        uploadProfileImage: function (params) {
          return $http({
            method: 'POST',
            url: 'api/profile-image',
            data: {
              user: $rootScope.globals.currentUser.username,
              image: params.file,
            },
            headers: {
              'Authorization': 'Token ' + $rootScope.globals.currentUser.authToken
            }
          }).then(function(response){
            return response;
          }, function(response){
            return $q.reject(response.data.detail, response.status);
          });
        }
      };
    }]);
})();

(function () {

'use strict';

angular
  .module('daisy.services')
  .service('AppService', [
    '$interval',
    '$q',
    '$rootScope',
    '$route',
    '$timeout',
    '$window',
    'ApiService',
    'UtilService',

    function (
      $interval,
      $q,
      $rootScope,
      $route,
      $timeout,
      $window,
      ApiService,
      UtilService) {
        
  	  var self = this;

      $rootScope.$on('visualize-item:download', function (ev, data) {
        switch (data.type) {
          case 'svg':
            return downloadFile(dataUriToBlob(data.uri), 'thumbnail.svg');

          case 'png':
            return downloadFile(dataUriToBlob(data.uri, true), 'thumbnail.png');
        }
      });

      function dataUriToBlob(url, isBinary) {
        var urlSplit = url.split(',');

        var type = urlSplit[0].split(':')[1].split(';')[0],
            data = $window.atob(urlSplit[1]);

        if (isBinary) {
          var buf = new ArrayBuffer(data.length),
              arr = new Uint8Array(buf);
          for (var i=0, len=arr.length; i<len; i++)
            arr[i] = data.charCodeAt(i);
          data = arr;
        }

        return {
          type: type,
          blob: new Blob([data], { type: type })
        };
      }

      function downloadFile(blob, filename) {
        var agent = getAgent();

        if (agent === 'ie')
          return $window.navigator.msSaveBlob(blob.blob, filename);

        var a = $window.document.createElement('a'), url;
        if (agent === 'safari') {
          url = $window.webkitURL.createObjectURL(blob.blob);
          a.target = '_blank';
        } else {
          url = $window.URL.createObjectURL(blob.blob, { type: blob.type });
          a.download = filename;
        }
        a.href = url;

        $window.document.body.appendChild(a);
        a.click();
        $window.document.body.removeChild(a);
      }

      function getAgent() {
        var a = $window.document.createElement('a');
        if (typeof a.download !== 'undefined')
          return 'chrome-firefox';

        var agent = navigator.userAgent;
        if (agent.indexOf('MSIE') > -1 || agent.indexOf('Trident') > -1)
          return 'ie';

        return 'safari';
      }


    }]);

})();

/**************************************************************************
 * @Service
 * 유저 Auth
 **************************************************************************/

(function () {
  'use strict';

  angular.module('daisy.services').service('AuthenticationService', [
    '$http',
    '$cookies',
    '$rootScope',
    '$timeout',
    '$uibModal',
    'ApiService',
    '$window',
    'ToastService',

    function (
      $http,
      $cookies,
      $rootScope,
      $timeout,
      $uibModal,
      ApiService,
      $window,
      ToastService) {

    var service = {};

    service.LoginPopup = function (callback) {
      $uibModal.open({
        templateUrl: 'static/templates/modals/login.html',
        controller: ['$uibModalInstance', function ($uibModalInstance) {
          var self = this;
          var NJremembrMe = $cookies.getObject('NJremembrMe') || false;

          self.title = "로그인";
          self.step = 0;
          self.remembrMe = NJremembrMe ? NJremembrMe.remembrMe : false;
          self.username = NJremembrMe ? NJremembrMe.email : '';
          service.ClearCredentials();

          self.login = function () {
            if (!service.TestEmail(self.username)) {
              self.form_step_0_error = '이메일 형식을 확인하세요.';
              return;
            }

            var params = {
              username: self.username,
              password: self.password
            };
            ApiService.AuthData.login(params).then(function (response) {
              service.SetCredentials(self.username, response.data.auth_token, self.remembrMe);
              $uibModalInstance.dismiss('cancel');
              response.type = 'login';
              callback(response);
            }, function (error) {
              self.form_step_0_error = error;
            });
          };

          self.signup = function () {
            if (service.TestString(self.signUsername)) {
              self.form_step_1_error = '사용자 이름에 특수문자가 포함되어 있습니다.';
              return;
            }

            if (!service.TestEmail(self.signEmail)) {
              self.form_step_1_error = '이메일 형식을 확인하세요.';
              return;
            }

            var params = {
              email: self.signEmail,
              username: self.signUsername,
              password: self.signPassword
            }
            ApiService.AuthData.register(params).then(function (response) {
              alert('가입이 완료 되었습니다. 로그인 해주세요.');
              $uibModalInstance.dismiss('cancel');
              callback(response);
            }, function (error) {
              self.form_step_1_error = error;
            });
          };

          self.forgot = function () {
            if (!service.TestEmail(self.forgotEmail)) {
              self.form_step_2_error = '이메일 형식을 확인하세요.';
              return;
            }

            var params = {
              email: self.forgotEmail
            };
            ApiService.AuthData.resetPassword(params).then(function (response) {
              console.log(response);
              alert('비밀번호 찾기 인증 메일이 발송 되었습니다. 이메일을 확인 하세요.');
              $uibModalInstance.dismiss('cancel');
              callback(response);
            }, function (error) {
              self.form_step_2_error = error;
            });
          };

          self.changeStep = function (step) {
            self.step = step;
            if (step == 0) {self.title = "로그인";}
            if (step == 1) {self.title = "회원가입";}
            if (step == 2) {self.title = "비밀번호 찾기";}
          };

          self.close = function () { $uibModalInstance.dismiss('cancel'); };
          self.ok = function() { $uibModalInstance.dismiss('cancel'); }
        }],
        controllerAs: 'Modal',
        size: 'md',
        windowClass: 'modal-login'
      }).result.then(function (data) {
        console.log(data);
      });
    };

    service.EditProfilePopup = function (type, editField, callback) {
      $uibModal.open({
        templateUrl: 'static/templates/modals/edit-profile.html',
        controller: ['$uibModalInstance', function ($uibModalInstance) {
          var self = this;
          self.type = type;
          self.editField = editField;

          self.changeProfile = function () {
            if (self.editField == 'username') {
              var params = {
                new_username: self.new_username,
                email: $rootScope.globals.currentUser.email
              };
              ApiService.AuthData.changeUsername(params).then(function (response) {
                $rootScope.globals.currentUser.username = self.new_username;
                $uibModalInstance.dismiss('cancel');
                ToastService.show({ text: '저장되었습니다.', type: 'info' });
                //response.type = 'changeUsername';
                service.UpdateCredentials();
                callback(response, params);
              }, function (error) {
                self.error = error;
              });
            }

            if (self.editField == 'email') {
              // /api/auth/username/ 버전
              // var params = {
              //   new_email: self.new_email,
              //   username: $rootScope.globals.currentUser.username
              // };
              // ApiService.AuthData.changeEmail(params).then(function (response) {
              //   $rootScope.globals.currentUser.email = self.new_email;
              //   $uibModalInstance.dismiss('cancel');
              //   ToastService.show({ text: '저장되었습니다.', type: 'info' });
              //   //response.type = 'changeUsername';
              //   service.UpdateCredentials();
              //   callback(response, params);
              // }, function (error) {
              //   self.error = error;
              // });

              // /api/auth/me 수정버전
              // var params = {
              //   new_email: self.new_email,
              //   password: self.password_confirm,
              //   username: $rootScope.globals.currentUser.username,
              //   id: $rootScope.globals.currentUser.id
              // };
              // ApiService.AuthData.changeEmail(params).then(function (response) {
              //   $rootScope.globals.currentUser.email = self.new_email;
              //   $uibModalInstance.dismiss('cancel');
              //   ToastService.show({ text: '저장되었습니다.', type: 'info' });
              //   //response.type = 'changeUsername';
              //   service.UpdateCredentials();
              //   callback(response, params);
              // }, function (error) {
              //   self.error = error;
              // });
            }
          };

          self.changePassword = function () {
            if (self.passwordReset != self.passwordResetConfirm) {
              self.cp_error = '변경할 비밀번호가 일치하지 않습니다.'
              return;
            };

            var params = {
              password: self.password,
              passwordReset: self.passwordReset,
              passwordResetConfirm: self.passwordResetConfirm,
            };

            ApiService.AuthData.changePassword(params).then(function (response) {
              $uibModalInstance.dismiss('cancel');
              ToastService.show({ text: '비밀번호가 변경되었습니다.', type: 'info' });
              //response.type = 'changeUsername';
              callback(response);
            }, function (error) {
              if (error.current_password[0]) {
                self.cp_error = '현재 비밀번호가 틀렸습니다.'
              }
            });
          };

          self.close = function () { $uibModalInstance.dismiss('cancel'); };
          self.ok = function() { $uibModalInstance.dismiss('cancel'); }
        }],
        controllerAs: 'Modal',
        size: 'md',
        windowClass: 'modal-login'
      }).result.then(function (data) {
        console.log(data);
      });
    };

    service.SetCredentials = function (email, auth_token, remembrMe) {
      // TODO : remembrMe 여부 쿠키에 등록
      $rootScope.globals = {
        currentUser: {
          id: '',
          username: '',
          email: email,
          authToken: auth_token,
          profileImage: '/static/images/noimage-userprofile.jpg',
          profileImageId: '',
          remembrMe: remembrMe
        }
      };

      $http.defaults.headers.common['Authorization'] = auth_token;

      ApiService.AuthData.me().then(function(profileResults){
        $rootScope.globals.currentUser.id = profileResults.id;
        $rootScope.globals.currentUser.username = profileResults.username;

        ApiService.AuthData.getProfileImage().then(function(results){
          if (results.data.length > 0) {
            $rootScope.globals.currentUser.profileImage = results.data[0].image;
            $rootScope.globals.currentUser.profileImageId = results.data[0].id;
          }

          if (remembrMe == true) {
            var now = new $window.Date();
            var exp = new $window.Date(now.getFullYear(), now.getMonth()+6, now.getDate());
            // 6개월 저장
            $cookies.putObject('globals', $rootScope.globals, {
              expires : exp
            });
            $cookies.putObject('NJremembrMe', {
              remembrMe: true,
              email: email
            }, {
              expires : exp
            });
          } else {
            // 세션만 저장.
            $cookies.putObject('globals', $rootScope.globals);
            $cookies.remove('NJremembrMe');
          }
        });

      });
    };

    service.ClearCredentials = function () {
      $rootScope.globals = {};
      $cookies.remove('globals');
      $http.defaults.headers.common.Authorization = null;
    };

    service.UpdateCredentials = function () {
      if ($rootScope.globals.currentUser) {
        var user = $rootScope.globals.currentUser;
        service.SetCredentials(user.email, user.authToken, user.remembrMe);
      }
    };

    service.TestEmail = function (email) {
      var email_regexp = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i;
      return email_regexp.test(email);
    };

    service.TestString = function (string) {
      var string_regexp = /[~!@\#$%<>^&*\()\-=+_\’]/gi;
      return string_regexp.test(string);
    };

    return service;
  }]);
})();

/**************************************************************************
 * @Service
 * 경고창형태의 팝업
 **************************************************************************/

(function () {

'use strict';

angular.module('daisy.services').service('ConfirmService', [
  '$timeout',
  '$rootScope',
  '$uibModal',

  function (
    $timeout,
    $rootScope,
    $uibModal) {
      
  var self = this;

  self.open = function (title, message, okTitle, cancelTitle, callOk, callCancel) {
    $uibModal.open({
      templateUrl: 'static/templates/modals/confirm.html',
      controller: ['$uibModalInstance', function ($uibModalInstance) {
        var modal = this;
        modal.title = title;
        modal.message = message;
        modal.okTitle = okTitle;
        modal.closeTitle = cancelTitle;

        modal.close = function () {
          if (callCancel) callCancel();
          $uibModalInstance.dismiss('cancel');
        };
        modal.cancel = function () {
          if (callCancel) callCancel();
          $uibModalInstance.dismiss('cancel');
        };
        modal.ok = function() {
          console.log('OK');
          if (callOk) callOk();
          $uibModalInstance.dismiss('cancel');
        }
      }],
      controllerAs: 'Modal',
      size: 'md',
      windowClass: 'modal-login'
    }).result.then(function (data) {
      console.log(data);
    });
  }


}]);

})();

/**************************************************************************
 * @Service
 * 데이터 테이블 필터 유틸
 **************************************************************************/

(function () {

'use strict';

angular.module('daisy.services').service('DataFilterService', [
  '$timeout',
  '$rootScope',
  '$q',
  'ApiService',
  'UtilService',
  'EditorDatasStore',
  'EditorColumnsStore',
  'EditorFiltersStore',
  'lodash',

  function (
    $timeout,
    $rootScope,
    $q,
    ApiService,
    UtilService,
    EditorDatasStore,
    EditorColumnsStore,
    EditorFiltersStore,
    _) {

  var self = this;

  // 빈 배열, 빈 오브젝트, 빈값 체크
  var isEmpty = function(value){
    if( value == "" || value == null || value == undefined || ( value != null && typeof value == "object" && !Object.keys(value).length ) ){
      return true;
    } else {
      return false;
    }
  };

  /*
   * 테이블 확장 - 타입별 컬럼 그룹핑
   * '범주, 수치'로 그룹핑 한다
   *
   * @table
   */
  self.setColumnGroup = function(table) {
    _.map(table.columns, function(n) {
      n.group = n.type == 'numeric' || n.type == 'date' ? 'dimensions' : 'categories';
      n.sort = n.type == 'numeric' || n.type == 'date' ? 1 : 0;
    });

    return table;
  };

  /**
   * 데이터 파서(아이템이 있는경우)
   *
   * @item
   */
  self.dataParser = function (item, data) {
    var deferred = $q.defer();
    var columns = [], filters = [], filteredData = [], _indexed_data = [], _redexed_data = [], _dataTotal = [];
    var dataTotalType = '', dataTotalColumnName = '';

    _dataTotal.length = 0;

    columns.length = 0;
    columns = EditorColumnsStore.findSelectColumnsByItemId(item.itemId);

    filters.length = 0;
    filters = EditorFiltersStore.findFilterById(item.itemId);

    // 집계가 있는 경우
    if (item.dataStatisticsColumn) {
      var cloumnIndex = _.indexOf(data[0], item.dataStatisticsColumn.columnTitle);
      var dataGroup = _.countBy(_.map(data.slice(1), function (d) { return d[cloumnIndex]; }));
      var _head, _statistics_val;
      var title = item.dataStatisticsColumn.columnTitle;

      filteredData = _.map(dataGroup, function (val, key) {
        // if (key < 1) return '1개 이상의 숫자들 필요';

        // 조건별 집계
        switch (item.dataStatisticsColumn.dataStatisticsType) {
          case 'sum': // 합계
            _head = [title, title + '(합산)'];
            _statistics_val = val * key;
            break;
          case 'avg': // 평균
            _head = [title, title + '(평균)'];
            // _statistics_val = _.mean(val);
            _statistics_val = _.mean([val]);
            break;
          case 'min': // 최소
            _head = [title, title + '(최소)'];
            // _statistics_val = _.min(val);
            _statistics_val = _.min([val]);
            break;
          case 'max': // 최대
            _head = [title, title + '(최대)'];
            // _statistics_val = _.max(val);
            _statistics_val = _.max([val]);
            break;
          case 'med': // 중간값
            _head = [title, title + '(중간값)'];
            _statistics_val = median([val]);
            break;
          case 'std': // 분산(사용안함)
            // _head = [title, title + '(분산)'];
            // _statistics_val = key;
            break;
          case 'fre': // 빈도수
            _head = [title, title + '(빈도수)'];
            _statistics_val = val;
            break;
          default:
            break;
        };

        return _.reduce(_head, function (obj, k, i) {
          if (i == 0) obj[k] = key + ' '
          else obj[k] = _statistics_val
          return obj;
        }, {});
      });

      return self.completeDataParser(_head, filteredData, deferred);
    }

    // 필터가 없는경우
    if (filters.length == 0) {
      deferred.resolve({
        data: data
      });
      return deferred.promise;
    }

    return self.sortColumn(item.itemId, data, item.sortColumn).then(function(sortResults) {
      var funcs = [], filteredDataOnece = [], query;

      filteredData.length = 0;
      filteredData = sortResults.data;

      // 쿼리 만들기
      _.forEach(filters, function(f, i) {
        var _funcs = [], condQuery;
        var including = f.includingState == true ? 'isActive' : 'isDisabled';

        if (! _.isArray(f.values)) {
          f.values = _.toArray({ 'o': f.values });
        }

        if (!f.column.isSelected) return;

        // 쿼리별 연산함수
        if (f.query == '~@') { // 기간
          if (_.isDate(f.dateRanges.start) && _.isDate(f.dateRanges.end)) {
            var dataAtDate, startDate, endDate, obj = {};

            obj[f.dataSetName] = function(n) {
              dataAtDate = new Date(n);
              startDate = new Date(f.dateRanges.start);
              endDate = new Date(f.dateRanges.end);

              return dataAtDate.getTime() > startDate.getTime() && dataAtDate.getTime() < endDate.getTime();
            }

            condQuery = [_.conforms(obj), _.constant(including)];
            _funcs.push(condQuery);
          } else {
            // 데이터 형식이 맞지않는경우
          }
        } else if (f.query == '~') { // 수치 간격
          var s = _.ceil(f.valueRanges.start);
          var e = _.ceil(f.valueRanges.end);

          if (_.isInteger(s) && _.isInteger(e)) {
            var obj = {}
            obj[f.dataSetName] = function(n) {
              return n >= s && n <= e
            }
            condQuery = [_.conforms(obj), _.constant(including)];
            _funcs.push(condQuery);
          }

        } else { // 일반 값
          _.forEach(f.values, function(v) {
            switch (f.query) {
              case 'AND':
                condQuery = [_.matchesProperty(f.dataSetName, v), _.constant(including)];
                break;
              case '==':
                condQuery = [_.matchesProperty(f.dataSetName, v), _.constant(including)];
                break;
              case '>':
                var obj = {};
                var setInteger = _.ceil(v);
                obj[f.dataSetName] = function(n) { return n > setInteger }
                condQuery = [_.conforms(obj), _.constant(including)];
                break;
              case '<':
                var obj = {};
                var setInteger = _.ceil(v);
                obj[f.dataSetName] = function(n) { return n < setInteger }
                condQuery = [_.conforms(obj), _.constant(including)];
                break;
              case '>=':
                var obj = {};
                var setInteger = _.ceil(v);
                obj[f.dataSetName] = function(n) { return n >= setInteger }
                condQuery = [_.conforms(obj), _.constant(including)];
                break;
              case '<=':
                var obj = {};
                var setInteger = _.ceil(v);
                obj[f.dataSetName] = function(n) { return n <= setInteger }
                condQuery = [_.conforms(obj), _.constant(including)];
                break;
              case 'multi':
                condQuery = [_.matchesProperty(f.dataSetName, v), _.constant(including)];
                break;
              default:
                break;
            };
            _funcs.push(condQuery);
          });
        }

        if (f.includingState) {
          _funcs.push([_.stubTrue, _.constant('isDisabled')]);
        } else {
          _funcs.push([_.stubTrue, _.constant('isActive')]);
        }

        funcs.push(_funcs);
      });

      filteredDataOnece.length = 0;

      // 연산조건에 따른 필터 쿼리 실행
      _.forEach(filters, function(value, index) {
        if (item.filterOperator == 'AND') {
          filteredData = _.filter(filteredData, function(d, i) {
            var func = _.cond(funcs[index]);
            return func(d) == 'isActive';
          });
        } else if (item.filterOperator == 'OR') {
          if (index > 0 && filteredDataOnece.length > 0) { return; }
          filteredDataOnece = _.filter(filteredData, function(d, i) {
            var func = _.cond(funcs[index]);
            return func(d) == 'isActive';
          });
        }
      });

      if (item.filterOperator == 'OR') {
        filteredData = [];
        filteredData.length = 0;
        filteredData = filteredDataOnece;
      }

      // 집계가 있는 경우(필터 처리후 데이터로 집계 하는 경우)
      // if (item.dataStatisticsColumn) {
      //   var cloumnIndex = _.indexOf(sortResults.head, item.dataStatisticsColumn.columnTitle);
      //   var dataGroup = _.countBy(_.map(filteredData, function (d) {
      //     return d[cloumnIndex];
      //   }));
      //   var head = [item.dataStatisticsColumn.columnTitle, '@auto#!-dataStatistics-합계'];
      //
      //   filteredData = _.map(dataGroup, function (val, key) {
      //     return _.reduce(head, function (obj, k, i) {
      //       var sum = _.sumBy(dataGroup, function(s) {
      //         return s[key]
      //       });
      //       if (i == 0) obj[k] = key
      //       else obj[k] = val
      //       return obj;
      //     }, {});
      //   });
      //
      //   sortResults.head = head;
      // }

      return self.completeDataParser(sortResults.head, filteredData, deferred);
    });
  };

  /**
   * 데이터 파서 인덱싱 풀고 리턴
   *
   * @item
   */
  self.completeDataParser = function (head, data, req) {
    return self.getReduceTable(head, data).then(function(reduceResults) {
      if (reduceResults.data.length > 0) {
        req.resolve({
          data: reduceResults.data
        });
      } else {
        deferred.reject('필터링된 데이터가 없습니다.');
      }

      return req.promise;
    });
  };

  /**
   * 시각화 렌더링을 위한 데이터 필터링
   * 파일데이터 & 서버데이터 경우에 따라 분기하여 데이터 필터링
   *
   * @item
   */
  self.renderData = function (item) {
    var deferred = $q.defer();
    var dataType = item.isFile ? 'file' : 'default';
    var joinSelectColumns = dataType == 'file' ? UtilService.getSelectColumnTitls(item.itemId) : UtilService.getSelectColumnTitlsJoin(item.itemId, ',');

    if (dataType == 'file') {
      self.getSelectColumnData(item.originData, joinSelectColumns).then(function(dataSeletsResults) {
        self.dataParser(item, dataSeletsResults.data).then(function(dataFilterResults) {
          var selectColumns = UtilService.getSelectColumnTitls(item.itemId);
          var data = selectColumns.length == 1 ? self.addFrequency(dataFilterResults.data) : dataFilterResults.data;

          if (data.length > 0 ) {
            deferred.resolve({
              data: data
            });
          } else {
            deferred.reject('필터링된 데이터가 없습니다.');
          }
        });
      });

      return deferred.promise;
    };

    ApiService.PublicData.getItemByColumns(item.metadata.link, joinSelectColumns).then(function (results) {
      self.dataParser(item, results.data).then(function(dataFilterResults) {
        var selectColumns = [], data = [];

        selectColumns.length = 0;
        selectColumns = UtilService.getSelectColumnTitls(item.itemId);

        data.length = 0;
        data = selectColumns.length == 1 ? self.addFrequency(dataFilterResults.data) : dataFilterResults.data;

        if (data.length > 0 ) {
          deferred.resolve({
            data: data
          });
        } else {
          deferred.reject('필터링된 데이터가 없습니다.');
        }
      });
    });

    return deferred.promise;
  }

  /**
   * 데이터 필터링
   * 전체 데이터에서 선택한 컬럼의 데이터만 리턴
   *
   * @data
   * @columnTitles
   */
  self.getSelectColumnData = function (data, columnTitles) {
    var deferred = $q.defer();
    var filteredData = [], _data = [];

    _data.length = 0;
    _data = _.cloneDeep(data);

    // 매칭되는 컬럼 인덱스 찾기
    var columnIndexs = [];
    _.forEach(columnTitles, function(value) {
      columnIndexs.push(_.indexOf(_data[0], value));
    });

    // 사용할 값만 넣기
    filteredData.length = 0;
    _.forEach(_data, function(value) {
      var cells = [];
      _.forEach(columnIndexs, function(index) {
        cells.push(value[index]);
      });
      filteredData.push(cells);
    });

    if (filteredData.length > 0 ) {
      deferred.resolve({
        data: filteredData
      });
    } else {
      deferred.reject('필터링된 데이터가 없습니다.');
    }

    return deferred.promise;
  };

  /**
   * 컬럼 삭제
   *
   * @data
   * @columnTitle
   */
  self.removeColumn = function (data, columnTitle) {
    var deferred = $q.defer();
    var _data = [], columnIndex = _.indexOf(data[0], columnTitle);

    _data.length = 0;
    _data = _.cloneDeep(data);

    _.forEach(_data, function(value) {
      _.pullAt(value, columnIndex);
    });

    if (_data.length > 0 ) {
      deferred.resolve({
        data: _data
      });
    } else {
      deferred.reject('필터링된 데이터가 없습니다.');
    }

    return deferred.promise;
  };

  /**
   * 컬럼 소팅
   * TODO : 소수점 처리
   * TODO : 소팅안함 옵션 처리
   *
   * @data
   * @columnTitle
   */
  self.sortColumn = function (itemId, data, column) {
    var deferred = $q.defer();
    var cloneData = [], _indexed_data = [];

    cloneData.length = 0;
    cloneData = _.cloneDeep(data);

    _indexed_data.length = 0;
    _indexed_data = indexedTable(cloneData[0], cloneData.slice(1));

    if (! _.isObject(column)) {
      deferred.resolve({
        data: _indexed_data,
        head: cloneData[0]
      });
      return deferred.promise;
    }

    if (column.columnSort) {
      _indexed_data = _.orderBy(_indexed_data, column.columnTitle, 'asc');
    } else {
      _indexed_data = _.orderBy(_indexed_data, column.columnTitle, 'desc');
    }

    if (_indexed_data.length > 0 ) {
      deferred.resolve({
        data: _indexed_data,
        head: cloneData[0]
      });
    } else {
      deferred.reject('필터링된 데이터가 없습니다.');
    }
    return deferred.promise;
  };

  /**
   * 데이터 인덱싱
   *
   * @data
   */
  self.getIndexedTable = function (data) {
    var deferred = $q.defer();
    var cloneData = [], _data = [];

    cloneData.length = 0;
    cloneData = _.cloneDeep(data);

    _data.length = 0;
    _data = indexedTable(cloneData[0], cloneData.slice(1));

    if (_data.length > 0 ) {
      deferred.resolve({
        data: _data,
        columnTitles: cloneData[0]
      });
    } else {
      deferred.reject('인덱싱된 데이터가 없습니다.');
    }
    return deferred.promise;
  };

  /**
   * 데이터 인덱싱 풀기
   *
   * @data
   */
  self.getReduceTable = function (titles, data) {
    var deferred = $q.defer();
    var cloneData = [], _data = [];

    cloneData.length = 0;
    cloneData = _.cloneDeep(data);

    _data.length = 0;
    _data = reduceTable(titles, cloneData);
    _data.unshift(titles);

    if (_data.length > 0 ) {
      deferred.resolve({
        data: _data
      });
    } else {
      deferred.reject('필터링된 데이터가 없습니다.');
    }
    return deferred.promise;
  };

  /**
   * 데이터 검사
   * 데이터 인덱싱 없이 검사할때 사용, 느림주의
   *
   * @data
   */
  self.checkupData = function (data) {
    var deferred = $q.defer();
    var returnData = [], cleanup = 0;

    returnData.length = 0;
    _.forEach(data, function(value, key){
      var cellArr = [];
      cellArr.length = 0;

      _.forEach(value, function(v, i){
        if (_.isString(v)) {
          v = _.replace(v, ',', '');
          cleanup++;
        }
        cellArr.push(v);
      });
      returnData.push(cellArr);
    });

    deferred.resolve({
      cleanupCount: cleanup,
      data: returnData
    });

    return deferred.promise;
  };

  /**
   * 빈도수 추가
   *
   * @data
   */
  self.addFrequency = function (data) {
    var title = data[0];
    var columns, rows, arr = [], slicedData = [], frequency= [];

    slicedData.length = 0;
    slicedData = _.slice(data, 1, data.length);

    frequency.length = 0;
    frequency = _.countBy(slicedData);

    rows = slicedData.map(function (row) { return row.map(function (cell) { return new NJ.Vtr.Cell(cell); }); });
    columns = new NJ.Vtr.Column(title[0], rows.map(function (cell) { return cell[0]; }));

    if (columns.type == 'numeric' || columns.type == 'date') {
      return data;
    }

    arr.length = 0;
    arr.push([title[0], title[0] + ' ']);
    _.forEach(frequency, function (value, key) {
      arr.push([key, value]);
    });

    return arr;
  };

  // 데이터 인덱싱
  function indexedTable (titles, sliced) {
    return _.map(sliced, function (val) {
      return _.reduce(titles, function (obj, key, idx) {
        // 콤마 삭제
        if (_.isString(val[idx])) {
          val[idx] = _.replace(val[idx], ',', '');
        }

        obj[key] = val[idx];

        return obj;
      }, {});
    });
  };

  // 데이터 인덱싱 풀기
  function reduceTable (titles, data) {
    return _.map(data, function (val) {
      return _.reduce(titles, function (obj, key, idx) {
        obj.push(val[key]);
        return obj;
      }, []);
    });
  };

  // 중앙값 계산
  function median(values) {
    values.sort( function(a,b) {return a - b;} );
    var half = Math.floor(values.length/2);

    if (values.length % 2) return values[half];
    else return (values[half-1] + values[half]) / 2.0;
  }

}]);

})();

/**************************************************************************
 * @Service
 * 에디터에서 사용하는 액션 관리
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.services')
    .service('EditorActions', [
      'flux',
      'actions',
      'UtilService',
      'lodash',

      function (
        flux,
        actions,
        UtilService, _) {

      var service = {
        // 아이템
        addItem: addItem,
        updateItem: updateItem,
        updateItemOriginData: updateItemOriginData,
        updateItemVisualizeData: updateItemVisualizeData,
        updateItemSelectRang: updateItemSelectRang,
        updateItemUseVisualized: updateItemUseVisualized,
        updateItemFilterOperator: updateItemFilterOperator,
        dataStatistics: dataStatistics,
        removeStatistics: removeStatistics,
        deleteItem: deleteItem,
        deleteAllItem: deleteAllItem,

        // 테이블
        saveTable: saveTable,

        // 컬럼
        addColumn: addColumn,
        selectColumn: selectColumn,
        removeColumn: removeColumn,
        sortColumn: sortColumn,

        // 셀
        addCell: addCell,

        // 데이터
        saveData: saveData,
        addAllData: addAllData,

        // 검색데이터
        saveSearchData: saveSearchData,

        // 로컬데이터
        addLocalData: addLocalData,

        // 필터
        updateItemFilteredData: updateItemFilteredData,
        removeFilter: removeFilter,

        // 프로젝트
        setProjectTitle: setProjectTitle,
        setProjectDescription: setProjectDescription,
        setProjectStatus: setProjectStatus,
        setProjectCopyright: setProjectCopyright,
        setProjectThumbnail: setProjectThumbnail,

        // 아래부터 수정예정
        updateColumn: updateColumn,
        updateHeader: updateHeader,
        addFilter: addFilter,
        saveProject: saveProject
      };
      return service;


      /**************************************************************************
       * @EditorItemsStore
       **************************************************************************/

      /**
       * 아이템 추가
       *
       * @itemId: 아이템 아이디
       * @dataTitle: 데이터 타이틀
       * @metadata: 데이터 정보
       * @alias: 시각화 유형
       * @matchList: 매칭가능한 챠트 리스트
       * @visualizeData: 데이터
       * @originData: 원본 데이터
       * @filteredData: 필터링된 데이터
       * @selectRang: 영역 지정
       * @sortColumn: 마지막 소팅설정(컬럼)
       * @isFile: 파일업로드 여부
       * @useVisualized: 시각화 표시 여부
       */
      function addItem(item) {
        flux.dispatch(actions.addItem, item);
      }

      /**
       * 아이템 업데이트
       *
       * @itemId: 아이템 아이디
       * @dataTitle: 데이터 타이틀
       * @metadata: 데이터 정보
       * @alias: 시각화 유형
       * @matchList: 매칭가능한 챠트 리스트
       * @visualizeData: 데이터
       * @originData: 원본 데이터
       * @filteredData: 필터링된 데이터
       * @selectRang: 영역 지정
       * @sortColumn: 마지막 소팅설정(컬럼)
       * @isFile: 파일업로드 여부
       * @useVisualized: 시각화 표시 여부
       */
      function updateItem(item) {
        flux.dispatch(actions.updateItem, item);
      }

      /**
       * 영역 지정
       *
       * @itemId: 아이템 아이디
       * @selectRang0: 영역
       * @selectRang1: 영역
       * @selectRang2: 영역
       * @selectRang3: 영역
       */
      function updateItemSelectRang(selectRang) {
        flux.dispatch(actions.updateItemSelectRang, selectRang);
      }

      /**
       * 원본 데이터 업데이트
       *
       * @itemId: 아이템 아이디
       * @data: 데이터
       */
      function updateItemOriginData(data) {
        flux.dispatch(actions.updateItemOriginData, data);
      }

      /**
       * 차트 데이터 업데이트
       *
       * @itemId: 아이템 아이디
       */
      function updateItemVisualizeData(data) {
        flux.dispatch(actions.updateItemVisualizeData, data);
      }

      /**
       * 차트 사용유무 업데이트
       *
       * @itemId: 아이템 아이디
       * @state: 사용 유무 Bool
       */
      function updateItemUseVisualized(item) {
        flux.dispatch(actions.updateItemUseVisualized, item);
      }

      /**
       * 차트 필터쿼리 업데이트
       *
       * @itemId: 아이템 아이디
       * @operator: 'AND : 하고, OR : 또는'
       */
      function updateItemFilterOperator(data) {
        flux.dispatch(actions.updateItemFilterOperator, data);
      }

      /**
       * 아이템 삭제
       *
       * @itemId: 아이템 아이디
       */
      function deleteItem(item) {
        flux.dispatch(actions.deleteItem, item);
      }

      /*
       * 전체 아이템 삭제
       *
       * @itemId: 아이템 아이디
       */
      function deleteAllItem() {
        flux.dispatch(actions.deleteAllItem);
      }


      /**************************************************************************
       * @EditorColumnsStore
       **************************************************************************/

      /**
       * 컬럼 추가
       *
       * @itemId: 아이템 아이디
       * @columnTitle: 컬럼 타이틀
       * @columnType: 컬럼 타입
       * @columnIndex: 컬럼 인덱스
       * @columnStatistics: 컬럼 통계
       * @isStatistics: 컬럼 통계 여부
       * @group: 컬럼 그룹
       * @groupSort: 그룹 소팅
       * @columnSort: 컬럼소팅 - default: null, asc: true, desc: false
       * @isSelected: 컬럼 사용여부
       * @dataLink: 검색링크
       * @isFile: 파일여부
       */
      function addColumn(column) {
        flux.dispatch(actions.addColumn, column);
      }

      /**
       * 컬럼 삭제
       *
       * @itemId: 아이템 고유 아이디
       * @columnTitle: 컬럼 타이틀
       * @column: 컬럼 원본 --옵셔널
       */
      function removeColumn(column) {
        flux.dispatch(actions.removeColumn, column);
      }

      /**
       * 컬럼 추가 선택
       *
       * @itemId: 아이템 고유 아이디
       * @columnTitle: 컬럼 타이틀
       * @groupSort : 그룹소팅
       */
      function selectColumn(column) {
        flux.dispatch(actions.selectColumn, column);
      }

      /*
       * 컬럼 소팅
       * 소팅값에 해당하는 열의 소팅
       *
       * @itemId : 아이템 고유 아이디
       * @sort : 'asc', 'desc'
       * @column : 해당 컬럼
       */
      function sortColumn(sort) {
        flux.dispatch(actions.sortColumn, sort);
      }

      /*
       * 컬럼 집계
       * 집계값에 해당하는 열
       *
       * @itemId : 아이템 고유 아이디
       * @key : 'sum', 'min' 등
       * @column : 해당 컬럼
       */
      function dataStatistics(data) {
        flux.dispatch(actions.dataStatistics, data);
      }

      /*
       * 컬럼 집계 삭제
       *
       * @itemId : 아이템 고유 아이디
       */
      function removeStatistics(data) {
        flux.dispatch(actions.removeStatistics, data);
      }


      /**************************************************************************
       * @EditorCellsStore
       **************************************************************************/

      /**
       * 셀 추가
       *
       * @itemId: 아이템 고유 아이디
       * @columnTitle: 컬럼 타이틀
       * @columnType: 컬럼 타입
       * @columnIndex: 컬럼 인덱스
       * @cellIndex: 셀 인덱스
       * @cellData: 셀 데이터
       */
      function addCell(cell) {
        flux.dispatch(actions.addCell, cell);
      }


      /**************************************************************************
       * @EditorDatasStore
       **************************************************************************/

      /*
       * 데이터 인덱싱
       * 추후지원 예정인 옵션 히스토리등을 위한 함수
       *
       * @itemId: 아이템 아이디
       */
      function addAllData(data) {
        flux.dispatch(actions.addAllData, data);
      }

      /*
       * 컬럼 업데이트
       *
       * @itemId: 아이템 고유 아이디
       * @state: 변경할 동작의 키네임
       */
      function updateColumn(column) {
        flux.dispatch(actions.updateColumn, column);
      }

      /*
       * 데이터 저장
       *
       * @dataID: 데이터 고유 아이디
       * @dataTitle: 데이터 타이틀
       * @searchItem: 검색결과값
       * @itemId: 사용중인 아이템 아이디
       * @alias: 사용중인 시각화 이름
       * @isFile: 파일 여부
       * @originData: 원본 데이터(파일인 경우만 사용)
       */
      function saveData(data) {
        flux.dispatch(actions.saveData, data);
      }

      /**
       * 검색한 데이터 정보 저장
       * 매칭 테스트 및 간단한 테스트를 위한 용도
       *
       * @itemId: 아이템 고유 아이디
       * @searchItemId: 검색 데이터 아이디
       * @dataTitle: 데이터 타이틀
       * @searchItem: 검색 메타정보
       * @data: 데이터 !! 삭제
       * @sampleData: 샘플데이터
       */
      function saveSearchData(data) {
        flux.dispatch(actions.saveSearchData, data);
      }

      /**
       * 검색한 데이터 저장
       * 데이터 중복 로드를 막기 위해 로컬에 저장(인스턴스)
       *
       * @link: 검색 링크
       * @data: 데이터
       */
      function addLocalData(data) {
        flux.dispatch(actions.addLocalData, data);
      }

      /**
       * 테이블 저장
       * !! 삭제
       *
       * @tableId: 테이블 고유 아이디
       * @table: 테이블
       */
      function saveTable(table) {
        flux.dispatch(actions.saveTable, table);
      }

      /*
       * 해더 변경
       *
       * @itemId: 아이템 고유 아이디
       * @state: 변경할 항목의 키네임
       * @value: 변경 값
       */
      function updateHeader(header) {
        flux.dispatch(actions.updateHeader, header);
      }

      /*
       * 프로젝트 저장
       *
       * @title: 프로젝트 타이틀
       * @description: 프로젝트 설명
       * @status:
       * @copyright: 저작권 표시
       * @thumbnail: 첫번째 챠트 썸네일
       */
      function saveProject(project) {
        flux.dispatch(actions.saveProject, project);
      }

      /**************************************************************************
       * @EditorFiltersStore
       **************************************************************************/

      /*
       * 필터 추가
       * 테이블 데이터 필터 추가
       *
       * @itemId : 아이템 고유 아이디
       * @dataSetName : 데이터명(컬럼 타이틀)
       * @column : 해당 컬럼
       * @values : 필터값
       * @valueRanges: 특수값(사이)
       * @dataTotalType: 특수값(집계)
       * @includingState : 포함/배제
       * @query : 검색 조건
       * @operator : 컬럼간 연산값
       */
      function addFilter(filter) {
        flux.dispatch(actions.addFilter, filter);
      }

      /*
       * 필터 데이터 업데이트
       *
       * @itemId : 아이템 고유 아이디
       * @data : 필터링된 데이터
       */
      function updateItemFilteredData(filteredData) {
        flux.dispatch(actions.updateItemFilteredData, filteredData);
      }


      /*
       * 필터 데이터 삭제
       *
       * @itemId : 아이템 고유 아이디
       * @filter : 필터링된 데이터
       */
      function removeFilter(removeFilter) {
        flux.dispatch(actions.removeFilter, removeFilter);
      }


      /**************************************************************************
       * @EditorProjectStore
       **************************************************************************/

      /**
       * 프로젝트 타이틀 저장
       *
       * @title: 프로젝트 타이틀
       */
      function setProjectTitle(title) {
        flux.dispatch(actions.setProjectTitle, title);
      }

      /**
       * 프로젝트 설명 저장
       *
       * @description: 프로젝트 설명
       */
      function setProjectDescription(description) {
        flux.dispatch(actions.setProjectDescription, description);
      }

      /**
       * 프로젝트 상태 저장
       *
       * @status: 프로젝트 상태
       */
      function setProjectStatus(status) {
        flux.dispatch(actions.setProjectStatus, status);
      }

      /**
       * 프로젝트 저작권 저장
       *
       * @copyright: 프로젝트 저작권
       */
      function setProjectCopyright(copyright) {
        flux.dispatch(actions.setProjectCopyright, copyright);
      }

      /**
       * 프로젝트 썸네일 저장
       *
       * @thumbnail: 프로젝트 썸네일
       */
      function setProjectThumbnail(thumbnail) {
        flux.dispatch(actions.setProjectThumbnail, thumbnail);
      }

    }]);

})();

(function () {

'use strict';

angular.module('daisy.services').service('ToastService', [
  '$timeout',
  '$rootScope',

  function (
    $timeout,
    $rootScope) {
      
  var self = this;

  var timeout;

  self.message = null;

  self.close = function () {
    self.message = null;
    $timeout.cancel(timeout);
  };

  self.show = function (message) {
    self.message = { text: message.text, type: message.type || 'info' };
    if (! $rootScope.$$phase)
      $rootScope.$digest();

    $timeout.cancel(timeout);
    timeout = $timeout(function () { self.close(); }, 5000);
  };
}]);

})();

(function () {

'use strict';

angular.module('daisy.services').service('UtilService', [
  '$location',
  '$route',
  '$window',
  '$q',
  '$rootScope',
  'AppConstants',
  'EditorColumnsStore',

  function (
    $location,
    $route,
    $window,
    $q,
    $rootScope,
    AppConstants,
    EditorColumnsStore) {

  var self = this;

  self.isArray = angular.isArray;

  self.navigation = {
    getPath: function () { return $location.path(); },
    go: function (location) { $window.location.href = location; },
    path: function (location, reload) {
      if (location === $location.path() && reload)
        $route.reload();
      else
        $location.path(location);
    },
    reload: function () { $window.location.reload(); },
    replace: function () { $location.replace(); }
  };

  self.getEmptyArray = function () {
    return
  };

  self.getFilename = function (filename) {
    var dotIndex = filename.lastIndexOf('.');
    return dotIndex === -1 ? filename : filename.substring(0, dotIndex);
  };

  self.guid = function () {
    function s4() {
      return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  };

  self.getSvgThumbnail = function (svg_thumbnail) {
    return $q(function(resolve, reject) {
      svgAsDataUri(svg_thumbnail, {}, function (uri) {
        var img = document.createElement('img');
        img.id = 'thumbnail';
        img.src = uri;
        img.style.visibility = 'hidden';
        document.body.appendChild(img);

        var canvas = document.createElement('canvas');
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        document.body.removeChild(img);

        try { uri = canvas.toDataURL('image/png'); } catch (e) { type = 'svg'; }

        if (uri) {
          resolve(uri);
        } else {
          reject('썸네일 생성을 실패 하였습니다. 다시 시도해 주세요.');
        }
      });
    });

  };

  self.downloadImageByDataImage = function (dataImage, filename) {
    var link = document.createElement('a');
    link.setAttribute('href', dataImage);
    link.setAttribute('download', filename);
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  self.detectIE = function () {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
      // IE 10 or older => return version number
      return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }
    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
      // IE 11 => return version number
      var rv = ua.indexOf('rv:');
      return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }
    var edge = ua.indexOf('Edge/');
    if (edge > 0) {
     // Edge (IE 12+) => return version number
     return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
   }
    // other browser
    return false;
  }

  self.getSelectColumnTitlsJoin = function(itemId, string) {
    var columns = EditorColumnsStore.findSelectColumnsByItemId(itemId);
    var selectColumns = _.map(columns, function(c) { return c.columnTitle });
    return _.join(selectColumns, string);
  }

  self.getSelectColumnTitls = function(itemId) {
    var columns = EditorColumnsStore.findSelectColumnsByItemId(itemId);
    var selectColumns = _.map(columns, function(c) { return c.columnTitle });
    return selectColumns;
  }

  self.getColumnByTitle = function(itemId, title) {
    var columns = EditorColumnsStore.findColumnsByItemId(itemId);
    return _.filter(columns, function(c) {
      return c.columnTitle == title;
    });
  }

  self.getColumnByIndex = function(itemId, index) {
    var columns = EditorColumnsStore.findColumnsByItemId(itemId);
    return _.filter(columns, function(c, i) {
      return i == index;
    });
  }

  self.hotTableHeaderDesigner = function(itemId, columnTitle, isSelected, isFiltered, index) {
    var html = '';
    html += '<div class="widget-hot-table-header th-col-header-' + index + '-' + itemId + '">';
    html += '<span class="title dropdown">';
    html += columnTitle;
    html += '</span>';
    html += '<span class="dropdown-btn">';
    html += '<i data-index="' + index + '" data-is-selected="' + isSelected + '" data-item-id="' + itemId + '" data-column-title="' + columnTitle + '" class="fa fa-caret-square-o-down isSel-' + isSelected + ' isFiltered-' + isFiltered + '" aria-hidden="true"></i>';
    html += '</span>';
    html += '</div>';
    return html;
  }

  self.typeChangerForhandsontable = function(type) {
    if (type == 'string' || type == 'categorical' || type == 'undefined' || type == 'string-address' || type == 'blank') type = 'text';
    return type;
  };

  self.getSampleDataLimit = function () {
    var limit = 0;

    // 브라우져 속도가 1000보다 적으면 설정값의 50% 만 로딩하도록 한다.
    if ($rootScope.sampleDataLimitByOnload) {
      limit = $rootScope.sampleDataLimitByOnload > 1000 ? AppConstants.sampleDataLimit / 2 : AppConstants.sampleDataLimit;
    }

    return limit != 0 ? limit : AppConstants.sampleDataLimit;
  };

}]);

})();

/**************************************************************************
 * @Service
 * 시각화 추천
 **************************************************************************/

(function () {

'use strict';

angular.module('daisy.services').service('ViztypeRecommendService', [
  '$timeout',
  '$location',
  '$rootScope',
  '$uibModal',
  'AppConstants',
  'DataFilterService',
  'ApiService',
  'UtilService',
  'EditorActions',
  'hotRegisterer',
  'EditorColumnsStore',
  'EditorDatasStore',

  function (
    $timeout,
    $location,
    $rootScope,
    $uibModal,
    AppConstants,
    DataFilterService,
    ApiService,
    UtilService,
    EditorActions,
    hotRegisterer,
    EditorColumnsStore,
    EditorDatasStore) {

  var service = {};

  /*
   * 시각화 추천 시작하기
   *
   * @item
   */
  service.startRecommendPop = function(item, callback, recommendType, updataId) {
    $uibModal.open({
      templateUrl: 'static/templates/modals/viztype-recommend.html',
      controller: ['$uibModalInstance', function ($uibModalInstance) {
        var modal = this;
        var matchTest, localData = [], insTable = {};

        modal.isLoading = false;
        modal.recommendType = recommendType || 'default'; // 시각화 추천 타입
        modal.useVisualized = true; // 시각화 사용여부

        // 시각화 스타일
        modal.style = {
          width: 500,
          height: 230,
          margin: {
            top: 50,
            right: 70,
            bottom: 50,
            left: 70
          }
        };

        // 아이템, 데이터
        modal.item = item;
        modal.filteredData = [];
        modal.localData = [];
        modal.selectColumns = [];
        modal.filteredData.length = 0;
        modal.localData.length = 0;
        modal.selectColumns.length = 0;

        // 업데이트인경우
        if (updataId) item.itemId = updataId;

        // 파일업로드인경우
        if (item.isFile && !updataId) {

          item.itemId = UtilService.guid();

          /**
           * 검색한 데이터 정보 저장
           * 매칭 테스트 및 간단한 테스트를 위한 용도
           *
           * @itemId: 아이템 고유 아이디
           * @searchItemId: 검색 데이터 아이디
           * @dataTitle: 데이터 타이틀
           * @searchItem: 검색 메타정보
           * @data: 데이터 !! 삭제
           * @sampleData: 샘플데이터
           */
          EditorActions.saveSearchData({
            itemId: item.itemId,
            searchItemId: item.id,
            dataTitle: item.title,
            searchItem: item,
            data: item.data,
            sampleData: item.data.slice(0, UtilService.getSampleDataLimit())
          });

        };

        localData.length = 0;
        localData = EditorDatasStore.findSearchDataByItemId(item.itemId);

        if (localData.length == 0) {
          $uibModalInstance.dismiss('cancel');
          alert('검색 데이터가 없습니다');
          return;
        }

        modal.localData = localData[0];
        insTable = new NJ.Vtr.Table(localData[0].sampleData);
        modal.table = setTable(insTable);

        // 타입 우선순위
        _.map(modal.table.columns, function(n) {
          n.type_first = AppConstants.columnsOrderBy[n.type];
        });

        // 컬럼 선택 및 매칭 테스트 호출
        modal.getMatch = function (column) {
          modal.isLoading = true;

          if (column.isSelected) {
            modal.selectColumns.push(column.title);
          } else {
            _.pull(modal.selectColumns, column.title);
          }

          if (modal.selectColumns.length == 0) {
            $timeout.cancel(matchTest);
            modal.filteredData = [];
            modal.filteredData.length = 0;
            modal.matchList.results = [];
            modal.matchList.results.length = 0;
            modal.isMatch = false;
            modal.activeUseViz = false;
            modal.isLoading = false;
            return;
          }

          // 매칭 테스트
          $timeout.cancel(matchTest);
          matchTest = $timeout(function() {
            DataFilterService.getSelectColumnData(modal.localData.sampleData, modal.selectColumns).then(function (results) {
              modal.filteredData = [];
              modal.filteredData.length = 0;
              modal.filteredData = modal.selectColumns.length == 1 ? DataFilterService.addFrequency(results.data) : results.data;

              try {
                modal.matchList = getMatchTest(modal.filteredData);
              } catch (e) {
                modal.isMatch = false;
                modal.activeUseViz = false;
                modal.isLoading = false;
                return;
              }

              // 챠트 매칭값이 없다면 리턴
              if (_.isObject(modal.matchList) && modal.matchList.results.length == 0) {
                modal.isMatch = false;
                modal.activeUseViz = false;
                modal.isLoading = false;
                return;
              }

              // 챠트간 우선순위
              _.map(modal.matchList.results, function(n) {
                n.visualize_first = AppConstants.visualizeOrderBy[n.alias];
              });

              modal.isMatch = true;
              modal.isLoading = false;

            });

          }, 800);
        };

        // 시각화 선택
        modal.selectViz = function(matched) {
          if (! _.isObject(modal.matchList) || modal.matchList.results.length == 0) { return; }

          // 매칭 선택정보 넣기
          _.map(modal.matchList.results, function(n) {
            n.isSelected = n === matched ? true : false;
          });

          modal.selectedAlias = matched.alias;
          modal.activeUseViz = true;
        };

        // 차트 사용하기
        modal.addItem = function() {
          var makeId = item.itemId;
          var exp_header_table = {}, fullMatchList = [];

          if (modal.recommendType == 'clone') {
            makeId = UtilService.guid();
          }

          fullMatchList.length = 0;
          fullMatchList = getMatchTest(modal.localData.sampleData);

          exp_header_table = DataFilterService.setColumnGroup(modal.table);

          _.forEach(exp_header_table.columns, function (column, index) {
            /**
             * 컬럼 추가
             *
             * @itemId: 아이템 아이디
             * @columnTitle: 컬럼 타이틀
             * @columnType: 컬럼 타입
             * @columnIndex: 컬럼 인덱스
             * @columnStatistics: 컬럼 통계
             * @isStatistics: 컬럼 통계 여부
             * @group: 컬럼 그룹
             * @groupSort: 그룹 소팅
             * @columnSort: 컬럼소팅 - default: null, asc: true, desc: false
             * @isSelected: 컬럼 사용여부
             * @dataLink: 검색링크
             * @isFile: 파일여부
             */
            EditorActions.addColumn({
              itemId: makeId,
              columnTitle: column.title,
              columnType: UtilService.typeChangerForhandsontable(column.type),
              columnIndex: index,
              columnStatistics: column.statistics,
              isStatistics: column.statistics ? true : false,
              group: column.group || 'dimensions',
              groupSort: column.sort || 1,
              columnSort: null,
              isSelected: column.isSelected || false,
              dataLink: modal.item.link,
              isFile: item.isFile
            });
          });

          var saveItem = {
            itemId: makeId,
            // metadata: modal.item,
            metadata: {
              title: modal.item.title,
              description: modal.item.description,
              link: modal.item.link,
              searchItemId: modal.item.searchItemId,
              type: modal.item.type,
              rows: modal.item.rows,
              cols: modal.item.cols
            },
            alias: modal.selectedAlias,
            matchList: modal.matchList.results,
            visualizeData: modal.filteredData,
            originData: item.isFile ? modal.localData.data : [],
            sampleData: modal.localData.sampleData,
            filteredData: [],
            isFile: item.isFile,
            useVisualized: modal.useVisualized,
            filterOperator: 'AND'
          };

          if (updataId) {
            EditorActions.updateItem(saveItem);
          } else {
            EditorActions.addItem(saveItem);
          }

          /**
           * 데이터 저장
           *
           * @dataID: 데이터 아이디
           * @dataTitle: 데이터 타이틀
           * @searchItem: 검색결과값
           * @itemId: 사용중인 아이템 아이디
           * @alias: 사용중인 시각화 이름
           * @isFile: 파일 여부
           * @originData: 원본 데이터(파일인 경우만 사용)
           */
          EditorActions.saveData({
            dataID: makeId,
            dataTitle: modal.item.title,
            searchItem: modal.item,
            itemId: makeId,
            alias: modal.selectedAlias,
            isFile: item.isFile,
            originData: item.isFile ? modal.localData.data : []
          });

          saveItem.state = true;
          callback(saveItem);

          $uibModalInstance.dismiss('cancel');
        };

        // 데이터 보기
        modal.goViewData = function () {
          $location.path('/search/' + item.keyword + '/' + item.page + '/' + item.searchItemId);
          $uibModalInstance.dismiss('cancel');
        };

        // 취소
        modal.close = function () {
          if (modal.recommendType == 'change') {
            $uibModalInstance.dismiss('cancel');
            return;
          }

          // 챠트 매칭값이 없는경우 샘플 데이터로 매칭 결과를 만든다.
          if (! _.isObject(modal.matchList)) {
            modal.matchList = getMatchTest(modal.localData.sampleData);
          };

          // 선택된 컬럼 초기화
          _.map(modal.table.columns, function (c) {
            c.isSelected = false;
          });

          modal.useVisualized = false;
          modal.addItem();
        };

        // 수정모드일경우 선택한 컬럼 활성화 시키기
        if (modal.recommendType == 'change') {
          var findSelectColumns = EditorColumnsStore.findSelectColumnsByItemId(item.itemId);
          _.forEach(findSelectColumns, function (value, index) {
            _.map(modal.table.columns, function (c) {
              if (c.title == value.columnTitle) {
                c.isSelected = true;
              }
            });

            modal.getMatch({
              title: value.columnTitle,
              isSelected: true
            });
          });
        }
      }],
      controllerAs: 'Modal',
      // size: 'lg',
      windowClass: 'modal-body-scrollable modal-data-options'
    });
  };

  // 챠트 매칭
  function getMatchTest(data) {
    try {
      var table = new NJ.Vtr.Table(data);
      var matchTest = NJ.Vtr.Match.match(table);
    } catch (e) {
      return { results: [] };
    }

    return matchTest;
  };

  // 타입 체크
  function findViztypeByAlias(alias) {
    return $.grep($rootScope.vizTypes, function(e) {
      return e.alias === alias
    })[0];
  };

  // 테이블 초기화
  function setTable(table) {
    _.map(table.columns, function (c) {
      c.isSelected = false;
    });
    return table;
  };

  // 컬럼 타입
  // function typeChangerForhandsontable(type) {
  //   if (type == 'string' || type == 'categorical' || type == 'undefined' || type == 'string-address' || type == 'blank') type = 'text';
  //   return type;
  // };

  return service;

}]);

})();

/**************************************************************************
 * @Store
 * 셀 스토어
 * 사용 안함.
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorCellsStore', [
      '$rootScope',

      function (
        $rootScope) {

      return {
        initialize: function () {
          this.state = this.immutable({
            cells: []
          });
        },
        handlers: {
          'addCell': 'addCell',
          'deleteAllItem': 'deleteAllCells'
        },

        /**
         * 셀 추가
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         * @columnType: 컬럼 타입
         * @columnIndex: 컬럼 인덱스
         * @cellIndex: 셀 인덱스
         * @cellData: 셀 데이터
         */
        addCell: function (addCell) {
          this.state.push('cells', addCell);
          console.log(addCell);
        },

        /**
         * 전체 셀 삭제
         */
        deleteAllCells: function () {
          this.state.select('cells').set([]);
        },

        exports: {
          /**
           * 아이템아이디로 컬럼 찾기
           */
          findCellByItemId: function (itemId) {
            var cells = this.state.get('cells').filter(function (data, index) {
              return data.itemId == itemId;
            });
            return cells;
          },

          /**
           * 아이템아이디 + 컬럼타이틀로 셀 찾기
           */
          findCellByColumnTitleAtItemId: function (itemId, columnTitle) {
            var cells = this.state.get('cells').filter(function (data, index) {
              return data.itemId == itemId && data.columnTitle == columnTitle;
            });
            return cells;
          },

          /**
           * 전체 셀
           */
          get cells() {
            return this.state.get('cells');
          }
        }
      };
    }]);

})();

/**************************************************************************
 * @Store
 * 컬럼 스토어
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorColumnsStore', [
      '$rootScope',

      function (
        $rootScope) {

      return {
        initialize: function () {
          this.state = this.immutable({
            columns: []
          });
        },
        handlers: {
          'addColumn': 'addColumn',
          'selectColumn': 'selectColumn',
          'removeColumn': 'removeColumn',
          'dataStatistics': 'dataStatistics',
          'totalColumn': 'totalColumn',
          'deleteAllItem': 'deleteAllColumns'
        },

        /**
         * 컬럼 추가
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         * @columnType: 컬럼 타입
         * @columnIndex: 컬럼 인덱스
         * @columnStatistics: 컬럼 통계
         * @isStatistics: 컬럼 통계 여부
         * @group: 컬럼 그룹
         * @groupSort: 그룹 소팅
         * @columnSort: 컬럼소팅 - default: null, asc: true, desc: false
         * @isSelected: 컬럼 사용여부
         * @dataLink: 검색링크
         * @isFile: 파일여부
         */
        addColumn: function (addColumn) {
          if (_.isNil(addColumn.columnTitle)) { return; }
          var itemsCursor = this.state.select('columns');
          var item = itemsCursor.get({ itemId: addColumn.itemId, columnTitle: addColumn.columnTitle });
          if (item) {
            itemsCursor.set(itemsCursor.get().indexOf(item), addColumn);
          } else {
            this.state.push('columns', addColumn);
          }
        },

        /**
         * 컬럼 삭제
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         */
        removeColumn: function (removeColumn) {
          var itemsCursor = this.state.select('columns');
          var item = itemsCursor.get({ itemId: removeColumn.itemId, columnTitle: removeColumn.columnTitle });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'isSelected'], false);
          $rootScope.$broadcast('updated-data', { itemId: removeColumn.itemId });
        },

        /**
         * 컬럼 추가 선택
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         * @groupSort : 그룹소팅 - 옵셔널
         */
        selectColumn: function (selectColumn) {
          var itemsCursor = this.state.select('columns');
          var item = itemsCursor.get({ itemId: selectColumn.itemId, columnTitle: selectColumn.columnTitle });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'isSelected'], true);
          if (selectColumn.groupSort) itemsCursor.set([itemsCursor.get().indexOf(item), 'groupSort'], selectColumn.groupSort);
          $rootScope.$broadcast('updated-data', { itemId: selectColumn.itemId });
        },

        /**
         * 컬럼 소팅
         *
         * @itemId : 아이템 아이디
         * @columnSort : 'asc: true', 'desc: false'
         * @column : 해당 컬럼
         */
        sortColumn: function(sortColumn) {
          var itemsCursor = this.state.select('columns');
          var item = itemsCursor.get({ itemId: sortColumn.itemId, columnTitle: sortColumn.columnTitle });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'columnSort'], sortColumn.columnSort);
        },

        /**
         * 컬럼 집계
         * 집계값에 해당하는 열
         *
         * @itemId : 아이템 고유 아이디
         * @key : 'sum', 'min' 등
         * @column : 해당 컬럼
         */
        dataStatistics: function(dataStatistics) {
          // var itemsCursor = this.state.select('columns');
          // var item = itemsCursor.get({ itemId: totalColumn.itemId, columnTitle: totalColumn.column.columnTitle });
          // itemsCursor.set([itemsCursor.get().indexOf(item), 'totalColumnKey'], totalColumn.key);
        },

        /**
         * 전체 컬럼 삭제
         */
        deleteAllColumns: function () {
          this.state.select('columns').set([]);
        },

        exports: {
          /**
           * 아이템 컬럼 찾기
           */
          findColumnsByItemId: function (itemId) {
            var columns = this.state.get('columns').filter(function (data, index) {
              return data.itemId == itemId;
            });
            return columns;
          },

          /**
           * 사용중인 컬럼 찾기
           */
          findSelectColumnsByItemId: function (itemId) {
            var columns = this.state.get('columns').filter(function (data, index) {
              return data.itemId == itemId && data.isSelected == true;
            });
            return columns;
          },

          /**
           * 미사용중인 컬럼 찾기
           */
          findNotSelectColumnsByItemId: function (itemId) {
            var columns = this.state.get('columns').filter(function (data, index) {
              return data.itemId == itemId && data.isSelected == false;
            });
            return columns;
          },

          /**
           * 전체 컬럼
           */
          get columns() {
            return this.state.get('columns');
          }
        }
      };
    }]);

})();

/**************************************************************************
 * @Store
 * 데이터 스토어.
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorDatasStore', [
      '$rootScope',
      'lodash',
      'ApiService',
      'UtilService',
      'ToastService',
      'hotRegisterer',

      function (
        $rootScope,
        _,
        ApiService,
        UtilService,
        ToastService,
        hotRegisterer) {

      return {
        initialize: function () {
          this.state = this.immutable({
            datas: [],        // TODO : 삭제 또는 통합
            searchDatas: [],  // 검색결과 저장
            dataTables: [],   // TODO : 삭제
            localDatas: []    // 로드한 데이터 저장
          });
        },
        handlers: {
          'addAllData': 'addAllData',         // TODO : 삭제
          'saveData': 'saveData',             // 데이터 저장
          'saveSearchData': 'saveSearchData', // 검색 정보 저장
          'addLocalData': 'addLocalData',     // 검색 데이터 저장
          'saveTable': 'saveTable',           // TODO : 삭제
          'updateColumn': 'updateColumn',     // TODO : 삭제
          'updateHeader': 'updateHeader',     // TODO : 삭제
          'deleteAllItem': 'deleteAllDatas',  // 전체 데이터 삭제
        },

        /**
         * 데이터 저장
         *
         * @dataID: 데이터 아이디
         * @dataTitle: 데이터 타이틀
         * @searchItem: 검색결과값
         * @itemId: 사용중인 아이템 아이디
         * @alias: 사용중인 시각화 이름
         * @isFile: 파일 여부
         * @originData: 원본 데이터(파일인 경우만 사용)
         */
        saveData: function (saveData) {
          var item = this.state.get('datas').filter(function (data, index) {
            return data.dataTitle == saveData.dataTitle;
          });

          if (item.length > 0) { return; }

          this.state.push('datas', saveData);
          $rootScope.$broadcast('save-data');
        },

        /**
         * 검색정보 저장
         *
         * @itemId: 아이템 고유 아이디
         * @searchItemId: 검색 데이터 아이디
         * @dataTitle: 데이터 타이틀
         * @searchItem: 검색 메타정보
         * @data: 데이터
         * @sampleData: 샘플데이터
         */
        saveSearchData: function (saveSearchData) {
          var item = this.state.get('searchDatas').filter(function (data, index) {
            return data.searchItemId == saveSearchData.searchItemId && data.itemId == saveSearchData.itemId;
          });

          if (item.length > 0) { return; }

          this.state.push('searchDatas', saveSearchData);
        },

        /**
         * 검색한 데이터 저장
         * 데이터 중복 로드를 막기 위해 로컬에 저장(인스턴스)
         *
         * @link: 검색 링크
         * @data: 데이터
         */
        addLocalData: function (data) {
          var itemsCursor = this.state.select('localDatas');
          var item = itemsCursor.get({ link: data.link });

          if (!item) {
            this.state.push('localDatas', data);
            return;
          }

          itemsCursor.set([itemsCursor.get().indexOf(item), 'data'], data.data);
        },

        /**
         * 테이블 저장
         *
         * @tableId: 테이블 아이디
         * @table: 테이블
         */
        saveTable: function (saveTable) {
          var item = this.state.get('dataTables').filter(function (data, index) {
            return data.tableId == saveTable.tableId;
          });

          if (item.length > 0) { return; }

          this.state.push('dataTables', saveTable);
        },

        /**
         * 데이터 인덱싱
         * 추후지원 예정인 옵션 히스토리등을 위한 함수
         *
         * @itemId: 아이템 아이디
         */
        addAllData: function (dataItem) {

        },

        updateColumn: function(updateColumn) {
          console.log(updateColumn);
        },

        /**
         * 해더 변경
         *
         * @itemId: 아이템 아이디
         * @state: 변경할 항목의 키네임
         * @value: 변경 값
         */
        updateHeader: function(updateHeader) {

        },

        /**
         * 전체 데이터 삭제
         */
        deleteAllDatas: function () {
          this.state.select('datas').set([]);
          this.state.select('searchDatas').set([]);
          this.state.select('dataTables').set([]);
        },

        exports: {
          /**
           * 데이터 타이틀로 데이터 검색
           *
           * @title : 데이터 타이틀
           */
          findByDataTitle: function(title) {
            return this.state.get('datas').filter(function (data, index) {
              return data.dataTitle == title;
            });
          },

          /**
           * 아이템 아이디로 데이터 검색
           *
           * @itemId : 고유 아이디
           */
          findSearchDataByItemId: function(itemId) {
            return this.state.get('searchDatas').filter(function (data, index) {
              return data.itemId == itemId;
            });
          },

          /**
           * 검색 아이디로 데이터 검색
           *
           * @id : 고유 아이디
           */
          findSearchDataById: function(id) {
            return this.state.get('searchDatas').filter(function (data, index) {
              return data.searchItemId == id;
            });
          },

          /**
           * 검색 링크로 데이터 검색
           *
           * @link : 검색 링크
           */
          findLocalDataById: function(link) {
            return this.state.get('localDatas').filter(function (data, index) {
              return data.link == link;
            });
          },

          /**
           * 아이디로 테이블 검색
           *
           * @tableId : 테이블 고유 아이디
           */
          findTableIdById: function(id) {
            return this.state.get('dataTables').filter(function (data, index) {
              return data.tableId == id;
            });
          },

          /**
           * 전체 데이터
           */
          get datas() {
            return this.state.get('datas');
          }
        }
      };
    }]);

})();

/**************************************************************************
 * @Store
 * 아이템 필터 스토어
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorFiltersStore', ['$rootScope', function ($rootScope) {
      return {
        initialize: function () {
          this.state = this.immutable({
            filters: []
          });
        },
        handlers: {
          'addFilter': 'addFilter',
          'removeFilter': 'removeFilter',
          'removeColumn': 'removeFilter',
          'deleteAllItem': 'deleteAllFilters'
        },

        /**
         * 필터 추가
         * 테이블 데이터 필터 추가
         *
         * @itemId : 아이템 아이디
         * @dataSetName : 데이터명(컬럼 타이틀)
         * @column : 해당 컬럼
         * @values : 필터값
         * @valueRanges: 특수값(사이)
         * @dataTotalType: 특수값(집계)
         * @includingState : 포함/배제
         * @query : 검색 조건
         * @operator : 컬럼간 연산값
         */
        addFilter: function(addFilter) {
          var itemsCursor = this.state.select('filters');
          var item = itemsCursor.get({ itemId: addFilter.itemId, dataSetName: addFilter.dataSetName });
          if (item) {
            itemsCursor.set(itemsCursor.get().indexOf(item), addFilter);
          } else {
            this.state.push('filters', addFilter);
          }

          $rootScope.$broadcast('refresh-filter', { itemId: addFilter.itemId });
        },

        /**
         * 필터 삭제
         *
         * @itemId : 아이템 아이디
         * @dataSetName : 데이터명(컬럼 타이틀)
         */
        removeFilter: function (removeFilter) {
          // this.waitFor('EditorColumnsStore', function () {
          //   var itemsCursor = this.state.select('filters');
          //   var item = itemsCursor.get({ itemId: removeFilter.itemId, dataSetName: removeFilter.dataSetName });
          //   if (!item) { return; }
          //   itemsCursor.splice([itemsCursor.get().indexOf(item), 1]);
          //   $rootScope.$broadcast('refresh-filter', { itemId: removeFilter.itemId });
          //   $rootScope.$broadcast('refresh-options', { itemId: removeFilter.itemId });
          // });
          var itemsCursor = this.state.select('filters');
          var item = itemsCursor.get({ itemId: removeFilter.itemId, dataSetName: removeFilter.dataSetName });
          if (!item) { return; }
          itemsCursor.splice([itemsCursor.get().indexOf(item), 1]);
          $rootScope.$broadcast('refresh-filter', { itemId: removeFilter.itemId });
          $rootScope.$broadcast('refresh-filter-in-option-panle', { itemId: removeFilter.itemId });
        },

        /**
         * 전체 필터 삭제
         */
        deleteAllFilters: function () {
          this.state.select('filters').set([]);
        },

        exports: {

          /**
           * 필터 검색
           *
           * @itemId : 아이템 아이디
           */
          findFilterById: function (id) {
            var item = this.state.get('filters').filter(function (data, index) {
              return data.itemId == id;
            });
            return item;
          },

          /**
           * 필터 검색
           *
           * @itemId : 아이템 아이디
           * @dataName : 데이터 이름
           */
          findFilterByIdWithDataName: function (id, dataName) {
            var item = this.state.get('filters').filter(function (data, index) {
              return data.itemId == id && data.dataSetName == dataName;
            });
            return item;
          },

          /**
           * 전체 필터
           */
          get filters() {
            return this.state.get('filters');
          }
        }
      };
    }]);

})();

/**************************************************************************
 * @Store
 * 아이템 스토어
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorItemsStore', [
      '$rootScope',
      '$timeout',
      'DataFilterService',

      function (
        $rootScope,
        $timeout,
        DataFilterService) {

      return {
        initialize: function () {
          this.state = this.immutable({
            items: []
          });
        },
        handlers: {
          'addItem': 'addItem',

          'updateItem': 'updateItem',
          'updateItemOriginData': 'updateItemOriginData',
          'updateItemFilteredData': 'updateItemFilteredData',
          'updateItemVisualizeData': 'updateItemVisualizeData',
          'updateItemUseVisualized': 'updateItemUseVisualized',
          'updateItemFilterOperator': 'updateItemFilterOperator',
          'updateItemSelectRang': 'updateItemSelectRang',
          'dataStatistics': 'dataStatistics',
          'removeStatistics': 'removeStatistics',

          'deleteItem': 'deleteItem',
          'deleteAllItem': 'deleteAllItem',

          'removeColumn': 'removeColumn',
          'selectColumn': 'selectColumn',
          'sortColumn': 'sortColumn'
        },


        /**
         * 아이템 추가
         *
         * @itemId: 아이템 아이디
         * @dataTitle: 데이터 타이틀
         * @metadata: 데이터 정보
         * @alias: 시각화 유형
         * @matchList: 매칭가능한 챠트 리스트
         * @visualizeData: 데이터
         * @originData: 원본 데이터
         * @filteredData: 필터링된 데이터
         * @selectRang: 영역 지정
         * @sortColumn: 마지막 소팅설정(컬럼)
         * @totalColumn: 마지막 집계설정(컬럼)
         * @isFile: 파일업로드 여부
         * @useVisualized: 시각화 표시 여부
         * @filterOperator: 필터 쿼리
         */
        addItem: function (item) {
          this.state.push('items', item);
          $rootScope.$broadcast('updated-data', { itemId: item.itemId });
        },

        /**
         * 아이템 업데이트
         *
         * @itemId: 아이템 아이디
         * @dataTitle: 데이터 타이틀
         * @metadata: 데이터 정보
         * @alias: 시각화 유형
         * @matchList: 매칭가능한 챠트 리스트
         * @visualizeData: 데이터
         * @originData: 원본 데이터
         * @filteredData: 필터링된 데이터
         * @sortColumn: 마지막 소팅설정(컬럼)
         * @totalColumn: 마지막 집계설정(컬럼)
         * @isFile: 파일업로드 여부
         * @useVisualized: 시각화 표시 여부
         * @filterOperator: 필터 쿼리
         */
        updateItem: function(updateItem) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: updateItem.itemId });
          itemsCursor.set(itemsCursor.get().indexOf(item), updateItem);
          $rootScope.$broadcast('updated-data', { itemId: updateItem.itemId });
        },

        /**
         * 원본 데이터 업데이트
         *
         * @itemId : 아이템 고유 아이디
         * @data : 데이터
         */
        updateItemOriginData: function(originData) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: originData.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'originData'], originData.data);
        },

        /**
         * 영역지정 정보 업데이트
         *
         * @itemId: 아이템 아이디
         * @selectRang0: 영역
         * @selectRang1: 영역
         * @selectRang2: 영역
         * @selectRang3: 영역
         */
        updateItemSelectRang: function(selectRang) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: selectRang.itemId });

          itemsCursor.set([itemsCursor.get().indexOf(item), 'selectRang0'], selectRang.selectRang0);
          itemsCursor.set([itemsCursor.get().indexOf(item), 'selectRang1'], selectRang.selectRang1);
          itemsCursor.set([itemsCursor.get().indexOf(item), 'selectRang2'], selectRang.selectRang2);
          itemsCursor.set([itemsCursor.get().indexOf(item), 'selectRang3'], selectRang.selectRang3);
        },

        /**
         * 시각화 데이터 업데이트
         *
         * @itemId : 아이템 고유 아이디
         * @data : 데이터
         */
        updateItemVisualizeData: function(visualizeData) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: visualizeData.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'visualizeData'], visualizeData.data);
        },

        /**
         * 필터 데이터 업데이트
         *
         * @itemId : 아이템 고유 아이디
         * @data : 필터링된 데이터
         */
        updateItemFilteredData: function(filteredData) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: filteredData.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'filteredData'], filteredData.data);
        },

        /**
         * 차트 사용유무 업데이트
         *
         * @itemId: 아이템 아이디
         * @state: 사용 유무 Bool
         */
        updateItemUseVisualized: function(updateData) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: updateData.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'useVisualized'], updateData.state);
          $rootScope.$broadcast('updated-data', { itemId: updateData.itemId });
        },

        /**
         * 차트 필터쿼리 업데이트
         *
         * @itemId: 아이템 아이디
         * @operator: 'AND : 하고, OR : 또는'
         */
        updateItemFilterOperator: function(updateData) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: updateData.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'filterOperator'], updateData.operator);
          $rootScope.$broadcast('updated-data', { itemId: updateData.itemId });
          $rootScope.$broadcast('refresh-filter', { itemId: updateData.itemId });
        },

        /**
         * 아이템 삭제
         *
         * @itemId: 아이템 아이디
         */
        deleteItem: function(deleteItem) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: deleteItem.itemId });
          itemsCursor.splice([itemsCursor.get().indexOf(item), 1]);
          $rootScope.$broadcast('delete-item');
        },

        /**
         * 컬럼 삭제
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         */
        removeColumn: function (removeColumn) {

        },

        /**
         * 컬럼 추가 선택
         *
         * @itemId: 아이템 아이디
         * @columnTitle: 컬럼 타이틀
         * @groupSort : 그룹소팅 - 옵셔널
         */
        selectColumn: function (selectColumn) {

        },

        /**
         * 컬럼 소팅
         *
         * @itemId : 아이템 아이디
         * @columnSort : 'asc: true', 'desc: false'
         * @column : 해당 컬럼
         */
        sortColumn: function (sortColumn) {
          this.waitFor('EditorColumnsStore', function () {
            var itemsCursor = this.state.select('items');
            var item = itemsCursor.get({ itemId: sortColumn.itemId });
            itemsCursor.set([itemsCursor.get().indexOf(item), 'sortColumn'], sortColumn.column);
            $rootScope.$broadcast('updated-data', { itemId: sortColumn.itemId });
          });
        },

        /**
         * 컬럼 집계
         * 집계값에 해당하는 열
         *
         * @itemId : 아이템 고유 아이디
         * @key : 'sum', 'min' 등
         * @column : 해당 컬럼
         */
        dataStatistics: function (data) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: data.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'dataStatisticsColumn'], data.column);
          $rootScope.$broadcast('updated-data', { itemId: data.itemId });
        },

        /**
         * 컬럼 집계 삭제
         *
         * @itemId : 아이템 고유 아이디
         */
        removeStatistics: function (data) {
          var itemsCursor = this.state.select('items');
          var item = itemsCursor.get({ itemId: data.itemId });
          itemsCursor.set([itemsCursor.get().indexOf(item), 'dataStatisticsColumn'], '');
          $rootScope.$broadcast('updated-data', { itemId: data.itemId });
        },


        /**
         * 전체 아이템 삭제
         */
        deleteAllItem: function() {
          this.state.select('items').set([]);
        },

        exports: {
          /**
           * 인덱스로 아이템 검색
           *
           * @index : 인덱스
           */
          findItemByIndex: function (index) {
            var items = this.state.get('items');
            return items[index] || [];
          },

          /**
           * 아이디로 아이템 검색
           *
           * @id : 아이템 아이디
           */
          findItemById: function (id) {
            var item = this.state.get('items').filter(function (data, index) {
              return data.itemId == id;
            });
            return item;
          },

          /**
           * 영역 지정값
           *
           * @id : 아이템 아이디
           */
          findSelectRangByItemId: function (id) {
            var item = this.state.get('items').filter(function (data, index) {
              return data.itemId == id;
            });
            return item[0].selectRang;
          },

          /**
           * 전체 아이템
           */
          get items() {
            return this.state.get('items');
          }
        }
      };
    }]);

})();

/**************************************************************************
 * @Store
 * 프로젝트 스토어
 **************************************************************************/

(function () {

  'use strict';

  angular.module('daisy.stores')
    .store('EditorProjectStore', [
      '$rootScope',
      'ApiService',
      'EditorItemsStore',

      function (
        $rootScope,
        ApiService,
        EditorItemsStore) {

      return {
        initialize: function () {
          this.state = this.immutable({
            project: {
              title: '',
              description: '',
              status: '',
              copyright: '',
              thumbnail: ''
            }
          });
        },
        handlers: {
          'setProjectTitle': 'setProjectTitle',
          'setProjectDescription': 'setProjectDescription',
          'setProjectStatus': 'setProjectStatus',
          'setProjectCopyright': 'setProjectCopyright',
          'setProjectThumbnail': 'setProjectThumbnail',
          'saveProject': 'saveProject',
          'deleteAllItem': 'resetProject'
        },

        /*
         * 프로젝트명
         *
         * @title: 프로젝트 타이틀
         */
        setProjectTitle: function(title) {
          this.state.set(['project', 'title'], title);
        },

        /*
         * 프로젝트 상태
         *
         * @status: 프로젝트 상태
         */
        setProjectStatus: function(status) {
          this.state.set(['project', 'status'], status);
        },

        /*
         * 프로젝트 설명
         *
         * @description: 프로젝트 설명
         */
        setProjectDescription: function(description) {
          this.state.set(['project', 'description'], description);
        },

        /*
         * 프로젝트 저작권
         *
         * @copyright: 프로젝트 저작권
         */
        setProjectCopyright: function(copyright) {
          this.state.set(['project', 'copyright'], copyright);
        },

        /*
         * 프로젝트 썸네일
         *
         * @thumbnail: 프로젝트 썸네일
         */
        setProjectThumbnail: function(thumbnail) {
          this.state.set(['project', 'thumbnail'], thumbnail);
        },

        /*
         * 프로젝트 저장
         *
         * @title: 프로젝트 타이틀
         * @description: 프로젝트 설명
         * @status:
         * @copyright: 저작권 표시
         * @thumbnail: 첫번째 챠트 썸네일
         */
        saveProject: function(saveProject) {
          var items = EditorItemsStore.items;

          ApiService.Project.saveItem(saveProject, items).then(function (data) {
            $rootScope.$broadcast('saved-project', { projectId: data.id });
          }, function (error) {
            console.log(error);
            return;
          });
        },

        /*
         * 전체 프로젝트 리셋
         */
        resetProject: function() {
          this.state.select('project').set({
            title: '',
            description: '',
            status: '',
            copyright: '',
            thumbnail: ''
          });
        },

        exports: {
          /**
           * 전체 컬럼
           */
          get getProject() {
            return this.state.get('project');
          }
        }
      };
    }]);

})();

//# sourceMappingURL=data:application/json;base64,